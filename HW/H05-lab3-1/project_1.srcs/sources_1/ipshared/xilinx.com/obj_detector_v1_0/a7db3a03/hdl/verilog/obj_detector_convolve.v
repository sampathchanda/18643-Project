// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module obj_detector_convolve (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_Addr_A,
        A_EN_A,
        A_WEN_A,
        A_Din_A,
        A_Dout_A,
        B_Addr_A,
        B_EN_A,
        B_WEN_A,
        B_Din_A,
        B_Dout_A,
        tmp,
        conv_address0,
        conv_ce0,
        conv_we0,
        conv_d0,
        tmp1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 15'b1;
parameter    ap_ST_st2_fsm_1 = 15'b10;
parameter    ap_ST_st3_fsm_2 = 15'b100;
parameter    ap_ST_st4_fsm_3 = 15'b1000;
parameter    ap_ST_st5_fsm_4 = 15'b10000;
parameter    ap_ST_st6_fsm_5 = 15'b100000;
parameter    ap_ST_st7_fsm_6 = 15'b1000000;
parameter    ap_ST_st8_fsm_7 = 15'b10000000;
parameter    ap_ST_st9_fsm_8 = 15'b100000000;
parameter    ap_ST_st10_fsm_9 = 15'b1000000000;
parameter    ap_ST_st11_fsm_10 = 15'b10000000000;
parameter    ap_ST_st12_fsm_11 = 15'b100000000000;
parameter    ap_ST_st13_fsm_12 = 15'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 15'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 15'b100000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv5_1A = 5'b11010;
parameter    ap_const_lv5_1E = 5'b11110;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] A_Addr_A;
output   A_EN_A;
output  [3:0] A_WEN_A;
output  [31:0] A_Din_A;
input  [31:0] A_Dout_A;
output  [31:0] B_Addr_A;
output   B_EN_A;
output  [3:0] B_WEN_A;
output  [31:0] B_Din_A;
input  [31:0] B_Dout_A;
input  [2:0] tmp;
output  [11:0] conv_address0;
output   conv_ce0;
output   conv_we0;
output  [31:0] conv_d0;
input  [2:0] tmp1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_EN_A;
reg B_EN_A;
reg[11:0] conv_address0;
reg conv_ce0;
reg conv_we0;
reg[31:0] conv_d0;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm = 15'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_33;
wire  signed [9:0] p_addr6_cast_fu_224_p1;
reg  signed [9:0] p_addr6_cast_reg_478;
wire   [5:0] p_addr2_fu_244_p2;
reg   [5:0] p_addr2_reg_483;
wire  signed [4:0] tmp2_fu_256_p2;
reg  signed [4:0] tmp2_reg_491;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_77;
wire   [0:0] exitcond3_fu_250_p2;
wire  signed [31:0] p_addr8_fu_295_p2;
reg  signed [31:0] p_addr8_reg_496;
wire  signed [4:0] tmp_s_fu_307_p2;
reg  signed [4:0] tmp_s_reg_504;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_92;
wire   [0:0] exitcond2_fu_301_p2;
reg   [11:0] conv_addr_reg_509;
wire   [4:0] i_4_fu_327_p2;
wire   [2:0] k_1_fu_343_p2;
reg   [2:0] k_1_reg_522;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_110;
wire  signed [11:0] p_addr_cast_fu_384_p1;
reg  signed [11:0] p_addr_cast_reg_527;
wire   [0:0] exitcond1_fu_337_p2;
wire   [31:0] p_addr4_fu_413_p2;
reg   [31:0] p_addr4_reg_532;
wire   [4:0] j_1_fu_419_p2;
wire   [2:0] l_1_fu_435_p2;
reg   [2:0] l_1_reg_545;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_130;
wire   [0:0] exitcond_fu_429_p2;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_145;
wire   [31:0] grp_fu_188_p2;
reg   [31:0] tmp_9_reg_570;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_155;
wire   [31:0] grp_fu_183_p2;
reg   [31:0] tmp_10_reg_575;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_164;
reg   [4:0] i_reg_113;
reg   [4:0] j_reg_125;
reg   [31:0] tmp_2_reg_137;
reg   [2:0] k_reg_149;
reg   [31:0] tmp_5_reg_160;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_185;
reg   [2:0] l_reg_172;
wire   [63:0] tmp_59_fu_322_p1;
wire   [63:0] tmp_63_fu_459_p1;
wire   [63:0] tmp_64_fu_473_p1;
wire   [31:0] A_Addr_A_orig;
wire   [31:0] B_Addr_A_orig;
wire   [31:0] grp_fu_183_p0;
wire   [31:0] grp_fu_183_p1;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_207;
wire   [31:0] grp_fu_188_p0;
wire   [31:0] grp_fu_188_p1;
wire   [7:0] tmp_56_fu_194_p3;
wire   [5:0] tmp_57_fu_206_p3;
wire   [8:0] p_shl10_cast_fu_202_p1;
wire   [8:0] p_shl11_cast_fu_214_p1;
wire   [8:0] p_addr6_fu_218_p2;
wire   [4:0] tmp_58_fu_232_p3;
wire   [5:0] tmp_cast_trn_cast_fu_228_p1;
wire   [5:0] p_shl_cast_fu_240_p1;
wire   [9:0] tmp_8_trn_cast_fu_262_p1;
wire  signed [9:0] p_addr7_fu_266_p2;
wire   [14:0] tmp_54_fu_271_p3;
wire   [12:0] tmp_55_fu_283_p3;
wire  signed [31:0] p_shl_fu_279_p1;
wire  signed [31:0] p_shl6_fu_291_p1;
wire   [31:0] tmp_1_trn_fu_313_p1;
wire  signed [31:0] p_addr9_fu_317_p2;
wire   [4:0] k_cast4_fu_333_p1;
wire  signed [4:0] x_fu_349_p2;
wire   [9:0] tmp_60_fu_354_p3;
wire   [6:0] tmp_61_fu_366_p3;
wire   [10:0] p_shl15_cast_fu_362_p1;
wire   [10:0] p_shl16_cast_fu_374_p1;
wire   [10:0] p_addr_fu_378_p2;
wire   [5:0] tmp_4_trn_cast_fu_388_p1;
wire   [5:0] p_addr3_fu_392_p2;
wire   [7:0] tmp_62_fu_401_p3;
wire   [31:0] p_addr3_cast_fu_397_p1;
wire   [31:0] p_shl7_fu_409_p1;
wire   [4:0] l_cast2_fu_425_p1;
wire  signed [4:0] y_fu_441_p2;
wire   [11:0] tmp_6_trn_cast_fu_446_p1;
wire  signed [11:0] p_addr1_fu_450_p2;
wire  signed [31:0] p_addr1_cast_fu_455_p1;
wire   [31:0] tmp_7_trn_fu_464_p1;
wire   [31:0] p_addr5_fu_468_p2;
wire    grp_fu_183_ce;
wire    grp_fu_188_ce;
reg   [14:0] ap_NS_fsm;


obj_detector_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
obj_detector_fadd_32ns_32ns_32_5_full_dsp_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_183_p0 ),
    .din1( grp_fu_183_p1 ),
    .ce( grp_fu_183_ce ),
    .dout( grp_fu_183_p2 )
);

obj_detector_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
obj_detector_fmul_32ns_32ns_32_4_max_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_188_p0 ),
    .din1( grp_fu_188_p1 ),
    .ce( grp_fu_188_ce ),
    .dout( grp_fu_188_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond2_fu_301_p2))) begin
        i_reg_113 <= i_4_fu_327_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_113 <= ap_const_lv5_2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond3_fu_250_p2 == ap_const_lv1_0))) begin
        j_reg_125 <= ap_const_lv5_2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond1_fu_337_p2))) begin
        j_reg_125 <= j_1_fu_419_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond_fu_429_p2))) begin
        k_reg_149 <= k_1_reg_522;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_301_p2))) begin
        k_reg_149 <= ap_const_lv3_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond1_fu_337_p2))) begin
        l_reg_172 <= ap_const_lv3_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        l_reg_172 <= l_1_reg_545;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond_fu_429_p2))) begin
        tmp_2_reg_137 <= tmp_5_reg_160;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_301_p2))) begin
        tmp_2_reg_137 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond1_fu_337_p2))) begin
        tmp_5_reg_160 <= tmp_2_reg_137;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        tmp_5_reg_160 <= tmp_10_reg_575;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_301_p2))) begin
        conv_addr_reg_509 <= tmp_59_fu_322_p1;
        tmp_s_reg_504 <= tmp_s_fu_307_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        k_1_reg_522 <= k_1_fu_343_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        l_1_reg_545 <= l_1_fu_435_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        p_addr2_reg_483 <= p_addr2_fu_244_p2;
        p_addr6_cast_reg_478[9 : 3] <= p_addr6_cast_fu_224_p1[9 : 3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond1_fu_337_p2))) begin
        p_addr4_reg_532 <= p_addr4_fu_413_p2;
        p_addr_cast_reg_527[11 : 2] <= p_addr_cast_fu_384_p1[11 : 2];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond3_fu_250_p2 == ap_const_lv1_0))) begin
        p_addr8_reg_496[31 : 3] <= p_addr8_fu_295_p2[31 : 3];
        tmp2_reg_491 <= tmp2_fu_256_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        tmp_10_reg_575 <= grp_fu_183_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        tmp_9_reg_570 <= grp_fu_188_p2;
    end
end

/// A_EN_A assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        A_EN_A = ap_const_logic_1;
    end else begin
        A_EN_A = ap_const_logic_0;
    end
end

/// B_EN_A assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        B_EN_A = ap_const_logic_1;
    end else begin
        B_EN_A = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond3_fu_250_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond3_fu_250_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond3_fu_250_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond3_fu_250_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_207)
begin
    if (ap_sig_bdd_207) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_164)
begin
    if (ap_sig_bdd_164) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_185)
begin
    if (ap_sig_bdd_185) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_33)
begin
    if (ap_sig_bdd_33) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_77)
begin
    if (ap_sig_bdd_77) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_92)
begin
    if (ap_sig_bdd_92) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_110)
begin
    if (ap_sig_bdd_110) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_130)
begin
    if (ap_sig_bdd_130) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_145)
begin
    if (ap_sig_bdd_145) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_155)
begin
    if (ap_sig_bdd_155) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// conv_address0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or conv_addr_reg_509 or ap_sig_cseq_ST_st15_fsm_14 or tmp_59_fu_322_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        conv_address0 = conv_addr_reg_509;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        conv_address0 = tmp_59_fu_322_p1;
    end else begin
        conv_address0 = 'bx;
    end
end

/// conv_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st15_fsm_14)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14))) begin
        conv_ce0 = ap_const_logic_1;
    end else begin
        conv_ce0 = ap_const_logic_0;
    end
end

/// conv_d0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or tmp_10_reg_575 or ap_sig_cseq_ST_st15_fsm_14)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        conv_d0 = tmp_10_reg_575;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        conv_d0 = ap_const_lv32_0;
    end else begin
        conv_d0 = 'bx;
    end
end

/// conv_we0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond2_fu_301_p2 or ap_sig_cseq_ST_st15_fsm_14)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_301_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14))) begin
        conv_we0 = ap_const_logic_1;
    end else begin
        conv_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond3_fu_250_p2 or exitcond2_fu_301_p2 or exitcond1_fu_337_p2 or exitcond_fu_429_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond3_fu_250_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond2_fu_301_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_337_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            if ((ap_const_lv1_0 == exitcond_fu_429_p2)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_Addr_A = A_Addr_A_orig << ap_const_lv32_2;
assign A_Addr_A_orig = tmp_63_fu_459_p1;
assign A_Din_A = ap_const_lv32_0;
assign A_WEN_A = ap_const_lv4_0;
assign B_Addr_A = B_Addr_A_orig << ap_const_lv32_2;
assign B_Addr_A_orig = tmp_64_fu_473_p1;
assign B_Din_A = ap_const_lv32_0;
assign B_WEN_A = ap_const_lv4_0;

/// ap_sig_bdd_110 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_110 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_130 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_130 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_145 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_145 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_155 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_155 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_164 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_164 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_185 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_185 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_207 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_207 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_33 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_33 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_77 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_77 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_92 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_92 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end
assign exitcond1_fu_337_p2 = (k_reg_149 == ap_const_lv3_5? 1'b1: 1'b0);
assign exitcond2_fu_301_p2 = (j_reg_125 == ap_const_lv5_1A? 1'b1: 1'b0);
assign exitcond3_fu_250_p2 = (i_reg_113 == ap_const_lv5_1A? 1'b1: 1'b0);
assign exitcond_fu_429_p2 = (l_reg_172 == ap_const_lv3_5? 1'b1: 1'b0);
assign grp_fu_183_ce = ap_const_logic_1;
assign grp_fu_183_p0 = tmp_5_reg_160;
assign grp_fu_183_p1 = tmp_9_reg_570;
assign grp_fu_188_ce = ap_const_logic_1;
assign grp_fu_188_p0 = A_Dout_A;
assign grp_fu_188_p1 = B_Dout_A;
assign i_4_fu_327_p2 = (i_reg_113 + ap_const_lv5_1);
assign j_1_fu_419_p2 = (j_reg_125 + ap_const_lv5_1);
assign k_1_fu_343_p2 = (k_reg_149 + ap_const_lv3_1);
assign k_cast4_fu_333_p1 = k_reg_149;
assign l_1_fu_435_p2 = (l_reg_172 + ap_const_lv3_1);
assign l_cast2_fu_425_p1 = l_reg_172;
assign p_addr1_cast_fu_455_p1 = p_addr1_fu_450_p2;
assign p_addr1_fu_450_p2 = ($signed(tmp_6_trn_cast_fu_446_p1) + $signed(p_addr_cast_reg_527));
assign p_addr2_fu_244_p2 = (tmp_cast_trn_cast_fu_228_p1 + p_shl_cast_fu_240_p1);
assign p_addr3_cast_fu_397_p1 = p_addr3_fu_392_p2;
assign p_addr3_fu_392_p2 = (p_addr2_reg_483 + tmp_4_trn_cast_fu_388_p1);
assign p_addr4_fu_413_p2 = (p_addr3_cast_fu_397_p1 + p_shl7_fu_409_p1);
assign p_addr5_fu_468_p2 = (tmp_7_trn_fu_464_p1 + p_addr4_reg_532);
assign p_addr6_cast_fu_224_p1 = $signed(p_addr6_fu_218_p2);
assign p_addr6_fu_218_p2 = (p_shl10_cast_fu_202_p1 - p_shl11_cast_fu_214_p1);
assign p_addr7_fu_266_p2 = ($signed(p_addr6_cast_reg_478) + $signed(tmp_8_trn_cast_fu_262_p1));
assign p_addr8_fu_295_p2 = ($signed(p_shl_fu_279_p1) - $signed(p_shl6_fu_291_p1));
assign p_addr9_fu_317_p2 = ($signed(p_addr8_reg_496) + $signed(tmp_1_trn_fu_313_p1));
assign p_addr_cast_fu_384_p1 = $signed(p_addr_fu_378_p2);
assign p_addr_fu_378_p2 = (p_shl15_cast_fu_362_p1 - p_shl16_cast_fu_374_p1);
assign p_shl10_cast_fu_202_p1 = tmp_56_fu_194_p3;
assign p_shl11_cast_fu_214_p1 = tmp_57_fu_206_p3;
assign p_shl15_cast_fu_362_p1 = tmp_60_fu_354_p3;
assign p_shl16_cast_fu_374_p1 = tmp_61_fu_366_p3;
assign p_shl6_fu_291_p1 = $signed(tmp_55_fu_283_p3);
assign p_shl7_fu_409_p1 = tmp_62_fu_401_p3;
assign p_shl_cast_fu_240_p1 = tmp_58_fu_232_p3;
assign p_shl_fu_279_p1 = $signed(tmp_54_fu_271_p3);
assign tmp2_fu_256_p2 = ($signed(i_reg_113) + $signed(ap_const_lv5_1E));
assign tmp_1_trn_fu_313_p1 = $unsigned(tmp_s_fu_307_p2);
assign tmp_4_trn_cast_fu_388_p1 = k_reg_149;
assign tmp_54_fu_271_p3 = {{p_addr7_fu_266_p2}, {ap_const_lv5_0}};
assign tmp_55_fu_283_p3 = {{p_addr7_fu_266_p2}, {ap_const_lv3_0}};
assign tmp_56_fu_194_p3 = {{tmp1}, {ap_const_lv5_0}};
assign tmp_57_fu_206_p3 = {{tmp1}, {ap_const_lv3_0}};
assign tmp_58_fu_232_p3 = {{tmp}, {ap_const_lv2_0}};
assign tmp_59_fu_322_p1 = $unsigned(p_addr9_fu_317_p2);
assign tmp_60_fu_354_p3 = {{x_fu_349_p2}, {ap_const_lv5_0}};
assign tmp_61_fu_366_p3 = {{x_fu_349_p2}, {ap_const_lv2_0}};
assign tmp_62_fu_401_p3 = {{p_addr3_fu_392_p2}, {ap_const_lv2_0}};
assign tmp_63_fu_459_p1 = $unsigned(p_addr1_cast_fu_455_p1);
assign tmp_64_fu_473_p1 = p_addr5_fu_468_p2;
assign tmp_6_trn_cast_fu_446_p1 = $unsigned(y_fu_441_p2);
assign tmp_7_trn_fu_464_p1 = l_reg_172;
assign tmp_8_trn_cast_fu_262_p1 = $unsigned(tmp2_fu_256_p2);
assign tmp_cast_trn_cast_fu_228_p1 = tmp;
assign tmp_s_fu_307_p2 = ($signed(j_reg_125) + $signed(ap_const_lv5_1E));
assign x_fu_349_p2 = ($signed(k_cast4_fu_333_p1) + $signed(tmp2_reg_491));
assign y_fu_441_p2 = ($signed(tmp_s_reg_504) + $signed(l_cast2_fu_425_p1));
always @ (posedge ap_clk)
begin
    p_addr6_cast_reg_478[2:0] <= 3'b000;
    p_addr8_reg_496[2:0] <= 3'b000;
    p_addr_cast_reg_527[1:0] <= 2'b00;
end



endmodule //obj_detector_convolve

