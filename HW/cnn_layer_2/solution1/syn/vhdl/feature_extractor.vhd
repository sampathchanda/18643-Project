-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity feature_extractor is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_ce0 : OUT STD_LOGIC;
    W_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    feature_ce0 : OUT STD_LOGIC;
    feature_we0 : OUT STD_LOGIC;
    feature_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of feature_extractor is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "feature_extractor,hls_ip_2015_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.412000,HLS_SYN_LAT=91686,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=1803,HLS_SYN_LUT=3329}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_27 : BOOLEAN;
    signal i_1_fu_190_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_342 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_60 : BOOLEAN;
    signal j_1_fu_202_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_350 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_69 : BOOLEAN;
    signal p_addr_cast_fu_216_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr_cast_reg_355 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_226_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_363 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_84 : BOOLEAN;
    signal p_addr2_fu_249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr2_reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_i_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_259_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_376 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_98 : BOOLEAN;
    signal tmp_8_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_381 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_load_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_114 : BOOLEAN;
    signal tmp_6_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_123 : BOOLEAN;
    signal k_1_fu_333_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_reg_406 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_132 : BOOLEAN;
    signal C_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal C_ce0 : STD_LOGIC;
    signal C_we0 : STD_LOGIC;
    signal C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_we0 : STD_LOGIC;
    signal S_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_convolve_fu_155_ap_start : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_155_ap_done : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_155_ap_idle : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_155_ap_ready : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_155_A_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feature_extractor_convolve_fu_155_A_ce0 : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_155_A_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_convolve_fu_155_B_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_feature_extractor_convolve_fu_155_B_ce0 : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_155_B_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_convolve_fu_155_tmp : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_feature_extractor_convolve_fu_155_conv_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feature_extractor_convolve_fu_155_conv_ce0 : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_155_conv_we0 : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_155_conv_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_convolve_fu_155_conv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_convolve_fu_155_tmp1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_feature_extractor_maxpool_fu_168_ap_start : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_168_ap_done : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_168_ap_idle : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_168_ap_ready : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_168_input_mat_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feature_extractor_maxpool_fu_168_input_mat_ce0 : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_168_input_mat_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_maxpool_fu_168_tmp_4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_feature_extractor_maxpool_fu_168_output_mat_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_feature_extractor_maxpool_fu_168_output_mat_ce0 : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_168_output_mat_we0 : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_168_output_mat_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_maxpool_fu_168_tmp_41 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_98 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_197 : BOOLEAN;
    signal j_reg_110 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond2_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_121 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_i_reg_132 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_222 : BOOLEAN;
    signal k_reg_143 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_231 : BOOLEAN;
    signal grp_feature_extractor_convolve_fu_155_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_feature_extractor_maxpool_fu_168_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal exitcond_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_179_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_208_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_trn_cast_fu_232_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr1_fu_236_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_241_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_trn_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr3_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_assign_to_int_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_282_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_292_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_179_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component feature_extractor_convolve IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp : IN STD_LOGIC_VECTOR (1 downto 0);
        conv_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_ce0 : OUT STD_LOGIC;
        conv_we0 : OUT STD_LOGIC;
        conv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp1 : IN STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component feature_extractor_maxpool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_mat_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_mat_ce0 : OUT STD_LOGIC;
        input_mat_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_4 : IN STD_LOGIC_VECTOR (1 downto 0);
        output_mat_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_mat_ce0 : OUT STD_LOGIC;
        output_mat_we0 : OUT STD_LOGIC;
        output_mat_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_41 : IN STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component feature_extractor_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component feature_extractor_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    C_U : component feature_extractor_C
    generic map (
        DataWidth => 32,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_address0,
        ce0 => C_ce0,
        we0 => C_we0,
        d0 => C_d0,
        q0 => C_q0);

    S_U : component feature_extractor_C
    generic map (
        DataWidth => 32,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        we0 => S_we0,
        d0 => S_d0,
        q0 => S_q0);

    grp_feature_extractor_convolve_fu_155 : component feature_extractor_convolve
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_feature_extractor_convolve_fu_155_ap_start,
        ap_done => grp_feature_extractor_convolve_fu_155_ap_done,
        ap_idle => grp_feature_extractor_convolve_fu_155_ap_idle,
        ap_ready => grp_feature_extractor_convolve_fu_155_ap_ready,
        A_address0 => grp_feature_extractor_convolve_fu_155_A_address0,
        A_ce0 => grp_feature_extractor_convolve_fu_155_A_ce0,
        A_q0 => grp_feature_extractor_convolve_fu_155_A_q0,
        B_address0 => grp_feature_extractor_convolve_fu_155_B_address0,
        B_ce0 => grp_feature_extractor_convolve_fu_155_B_ce0,
        B_q0 => grp_feature_extractor_convolve_fu_155_B_q0,
        tmp => grp_feature_extractor_convolve_fu_155_tmp,
        conv_address0 => grp_feature_extractor_convolve_fu_155_conv_address0,
        conv_ce0 => grp_feature_extractor_convolve_fu_155_conv_ce0,
        conv_we0 => grp_feature_extractor_convolve_fu_155_conv_we0,
        conv_d0 => grp_feature_extractor_convolve_fu_155_conv_d0,
        conv_q0 => grp_feature_extractor_convolve_fu_155_conv_q0,
        tmp1 => grp_feature_extractor_convolve_fu_155_tmp1);

    grp_feature_extractor_maxpool_fu_168 : component feature_extractor_maxpool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_feature_extractor_maxpool_fu_168_ap_start,
        ap_done => grp_feature_extractor_maxpool_fu_168_ap_done,
        ap_idle => grp_feature_extractor_maxpool_fu_168_ap_idle,
        ap_ready => grp_feature_extractor_maxpool_fu_168_ap_ready,
        input_mat_address0 => grp_feature_extractor_maxpool_fu_168_input_mat_address0,
        input_mat_ce0 => grp_feature_extractor_maxpool_fu_168_input_mat_ce0,
        input_mat_q0 => grp_feature_extractor_maxpool_fu_168_input_mat_q0,
        tmp_4 => grp_feature_extractor_maxpool_fu_168_tmp_4,
        output_mat_address0 => grp_feature_extractor_maxpool_fu_168_output_mat_address0,
        output_mat_ce0 => grp_feature_extractor_maxpool_fu_168_output_mat_ce0,
        output_mat_we0 => grp_feature_extractor_maxpool_fu_168_output_mat_we0,
        output_mat_d0 => grp_feature_extractor_maxpool_fu_168_output_mat_d0,
        tmp_41 => grp_feature_extractor_maxpool_fu_168_tmp_41);

    feature_extractor_fcmp_32ns_32ns_1_1_U15 : component feature_extractor_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_5_fu_179_p0,
        din1 => tmp_5_fu_179_p1,
        opcode => tmp_5_fu_179_opcode,
        dout => tmp_5_fu_179_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_feature_extractor_convolve_fu_155_ap_start_ap_start_reg assign process. --
    grp_feature_extractor_convolve_fu_155_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_feature_extractor_convolve_fu_155_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_184_p2))) then 
                    grp_feature_extractor_convolve_fu_155_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_feature_extractor_convolve_fu_155_ap_ready)) then 
                    grp_feature_extractor_convolve_fu_155_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_feature_extractor_maxpool_fu_168_ap_start_ap_start_reg assign process. --
    grp_feature_extractor_maxpool_fu_168_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_feature_extractor_maxpool_fu_168_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = exitcond_fu_327_p2))) then 
                    grp_feature_extractor_maxpool_fu_168_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_feature_extractor_maxpool_fu_168_ap_ready)) then 
                    grp_feature_extractor_maxpool_fu_168_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_i_reg_121 assign process. --
    i_i_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond_i_fu_253_p2)))) then 
                i_i_reg_121 <= i_2_reg_363;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_196_p2 = ap_const_lv1_0))) then 
                i_i_reg_121 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- i_reg_98 assign process. --
    i_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = grp_feature_extractor_convolve_fu_155_ap_done)))) then 
                i_reg_98 <= i_1_reg_342;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_98 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- j_i_reg_132 assign process. --
    j_i_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_i_fu_220_p2))) then 
                j_i_reg_132 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                j_i_reg_132 <= j_2_reg_376;
            end if; 
        end if;
    end process;

    -- j_reg_110 assign process. --
    j_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_184_p2)))) then 
                j_reg_110 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond1_i_fu_220_p2)))) then 
                j_reg_110 <= j_1_reg_350;
            end if; 
        end if;
    end process;

    -- k_reg_143 assign process. --
    k_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_196_p2 = ap_const_lv1_0)))) then 
                k_reg_143 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_logic_0 = grp_feature_extractor_maxpool_fu_168_ap_done)))) then 
                k_reg_143 <= k_1_reg_406;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                C_load_reg_391 <= C_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_342 <= i_1_fu_190_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                i_2_reg_363 <= i_2_fu_226_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_1_reg_350 <= j_1_fu_202_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                j_2_reg_376 <= j_2_fu_259_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                k_1_reg_406 <= k_1_fu_333_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_i_fu_220_p2))) then
                    p_addr2_reg_368(8 downto 3) <= p_addr2_fu_249_p1(8 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_196_p2 = ap_const_lv1_0))) then
                    p_addr_cast_reg_355(4 downto 3) <= p_addr_cast_fu_216_p1(4 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_6_reg_398 <= tmp_6_fu_314_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond_i_fu_253_p2))) then
                    tmp_8_reg_381(31 downto 0) <= tmp_8_fu_274_p1(31 downto 0);
            end if;
        end if;
    end process;
    p_addr_cast_reg_355(2 downto 0) <= "000";
    p_addr_cast_reg_355(5) <= '0';
    p_addr2_reg_368(2 downto 0) <= "000";
    p_addr2_reg_368(31 downto 9) <= "00000000000000000000000";
    tmp_8_reg_381(63 downto 32) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_196_p2, exitcond1_i_fu_220_p2, exitcond_i_fu_253_p2, grp_feature_extractor_convolve_fu_155_ap_done, grp_feature_extractor_maxpool_fu_168_ap_done, exitcond2_fu_184_p2, exitcond_fu_327_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_184_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_feature_extractor_convolve_fu_155_ap_done))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((exitcond1_fu_196_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond1_i_fu_220_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond_i_fu_253_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_lv1_0 = exitcond_fu_327_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_logic_0 = grp_feature_extractor_maxpool_fu_168_ap_done))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= grp_feature_extractor_convolve_fu_155_A_address0;

    -- A_ce0 assign process. --
    A_ce0_assign_proc : process(grp_feature_extractor_convolve_fu_155_A_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            A_ce0 <= grp_feature_extractor_convolve_fu_155_A_ce0;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C_address0 assign process. --
    C_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, tmp_8_fu_274_p1, grp_feature_extractor_convolve_fu_155_conv_address0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            C_address0 <= tmp_8_fu_274_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            C_address0 <= grp_feature_extractor_convolve_fu_155_conv_address0;
        else 
            C_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- C_ce0 assign process. --
    C_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, grp_feature_extractor_convolve_fu_155_conv_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            C_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            C_ce0 <= grp_feature_extractor_convolve_fu_155_conv_ce0;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= grp_feature_extractor_convolve_fu_155_conv_d0;

    -- C_we0 assign process. --
    C_we0_assign_proc : process(grp_feature_extractor_convolve_fu_155_conv_we0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            C_we0 <= grp_feature_extractor_convolve_fu_155_conv_we0;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- S_address0 assign process. --
    S_address0_assign_proc : process(tmp_8_reg_381, grp_feature_extractor_maxpool_fu_168_input_mat_address0, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            S_address0 <= tmp_8_reg_381(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            S_address0 <= grp_feature_extractor_maxpool_fu_168_input_mat_address0;
        else 
            S_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- S_ce0 assign process. --
    S_ce0_assign_proc : process(grp_feature_extractor_maxpool_fu_168_input_mat_ce0, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            S_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            S_ce0 <= grp_feature_extractor_maxpool_fu_168_input_mat_ce0;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_d0 <= 
        ap_const_lv32_0 when (tmp_6_reg_398(0) = '1') else 
        C_load_reg_391;

    -- S_we0 assign process. --
    S_we0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            S_we0 <= ap_const_logic_1;
        else 
            S_we0 <= ap_const_logic_0;
        end if; 
    end process;

    W_address0 <= grp_feature_extractor_convolve_fu_155_B_address0;

    -- W_ce0 assign process. --
    W_ce0_assign_proc : process(grp_feature_extractor_convolve_fu_155_B_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            W_ce0 <= grp_feature_extractor_convolve_fu_155_B_ce0;
        else 
            W_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, exitcond_fu_327_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_fu_327_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, exitcond_fu_327_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_fu_327_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_114 assign process. --
    ap_sig_bdd_114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_114 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_123 assign process. --
    ap_sig_bdd_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_123 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_132 assign process. --
    ap_sig_bdd_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_132 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_197 assign process. --
    ap_sig_bdd_197_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_197 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_222 assign process. --
    ap_sig_bdd_222_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_222 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_231 assign process. --
    ap_sig_bdd_231_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_231 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_27 assign process. --
    ap_sig_bdd_27_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_27 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_60 assign process. --
    ap_sig_bdd_60_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_60 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_69 assign process. --
    ap_sig_bdd_69_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_69 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_84 assign process. --
    ap_sig_bdd_84_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_84 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_98 assign process. --
    ap_sig_bdd_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_98 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_132)
    begin
        if (ap_sig_bdd_132) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_231)
    begin
        if (ap_sig_bdd_231) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_27)
    begin
        if (ap_sig_bdd_27) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_60)
    begin
        if (ap_sig_bdd_60) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_197)
    begin
        if (ap_sig_bdd_197) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_69)
    begin
        if (ap_sig_bdd_69) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_84)
    begin
        if (ap_sig_bdd_84) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_98)
    begin
        if (ap_sig_bdd_98) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_114)
    begin
        if (ap_sig_bdd_114) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_123)
    begin
        if (ap_sig_bdd_123) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_222)
    begin
        if (ap_sig_bdd_222) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    b_assign_to_int_fu_279_p1 <= C_load_reg_391;
    exitcond1_fu_196_p2 <= "1" when (j_reg_110 = ap_const_lv2_3) else "0";
    exitcond1_i_fu_220_p2 <= "1" when (i_i_reg_121 = ap_const_lv4_8) else "0";
    exitcond2_fu_184_p2 <= "1" when (i_reg_98 = ap_const_lv2_3) else "0";
    exitcond_fu_327_p2 <= "1" when (k_reg_143 = ap_const_lv2_3) else "0";
    exitcond_i_fu_253_p2 <= "1" when (j_i_reg_132 = ap_const_lv4_8) else "0";
    feature_address0 <= grp_feature_extractor_maxpool_fu_168_output_mat_address0;

    -- feature_ce0 assign process. --
    feature_ce0_assign_proc : process(grp_feature_extractor_maxpool_fu_168_output_mat_ce0, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            feature_ce0 <= grp_feature_extractor_maxpool_fu_168_output_mat_ce0;
        else 
            feature_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feature_d0 <= grp_feature_extractor_maxpool_fu_168_output_mat_d0;

    -- feature_we0 assign process. --
    feature_we0_assign_proc : process(grp_feature_extractor_maxpool_fu_168_output_mat_we0, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            feature_we0 <= grp_feature_extractor_maxpool_fu_168_output_mat_we0;
        else 
            feature_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_feature_extractor_convolve_fu_155_A_q0 <= A_q0;
    grp_feature_extractor_convolve_fu_155_B_q0 <= W_q0;
    grp_feature_extractor_convolve_fu_155_ap_start <= grp_feature_extractor_convolve_fu_155_ap_start_ap_start_reg;
    grp_feature_extractor_convolve_fu_155_conv_q0 <= C_q0;
    grp_feature_extractor_convolve_fu_155_tmp <= i_reg_98;
    grp_feature_extractor_convolve_fu_155_tmp1 <= i_reg_98;
    grp_feature_extractor_maxpool_fu_168_ap_start <= grp_feature_extractor_maxpool_fu_168_ap_start_ap_start_reg;
    grp_feature_extractor_maxpool_fu_168_input_mat_q0 <= S_q0;
    grp_feature_extractor_maxpool_fu_168_tmp_4 <= k_reg_143;
    grp_feature_extractor_maxpool_fu_168_tmp_41 <= k_reg_143;
    i_1_fu_190_p2 <= std_logic_vector(unsigned(i_reg_98) + unsigned(ap_const_lv2_1));
    i_2_fu_226_p2 <= std_logic_vector(unsigned(i_i_reg_121) + unsigned(ap_const_lv4_1));
    j_1_fu_202_p2 <= std_logic_vector(unsigned(j_reg_110) + unsigned(ap_const_lv2_1));
    j_2_fu_259_p2 <= std_logic_vector(unsigned(j_i_reg_132) + unsigned(ap_const_lv4_1));
    k_1_fu_333_p2 <= std_logic_vector(unsigned(k_reg_143) + unsigned(ap_const_lv2_1));
    notlhs_fu_296_p2 <= "0" when (tmp_fu_282_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_302_p2 <= "1" when (tmp_7_fu_292_p1 = ap_const_lv23_0) else "0";
    p_addr1_fu_236_p2 <= std_logic_vector(unsigned(tmp_i_trn_cast_fu_232_p1) + unsigned(p_addr_cast_reg_355));
    p_addr2_fu_249_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_241_p3),32));
    p_addr3_fu_269_p2 <= std_logic_vector(unsigned(tmp_i_trn_fu_265_p1) + unsigned(p_addr2_reg_368));
    p_addr_cast_fu_216_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_208_p3),6));
    tmp_1_fu_241_p3 <= (p_addr1_fu_236_p2 & ap_const_lv3_0);
    tmp_2_fu_208_p3 <= (j_reg_110 & ap_const_lv3_0);
    tmp_4_fu_308_p2 <= (notrhs_fu_302_p2 or notlhs_fu_296_p2);
    tmp_5_fu_179_opcode <= ap_const_lv5_4;
    tmp_5_fu_179_p0 <= C_load_reg_391;
    tmp_5_fu_179_p1 <= ap_const_lv32_0;
    tmp_6_fu_314_p2 <= (tmp_4_fu_308_p2 and tmp_5_fu_179_p2);
    tmp_7_fu_292_p1 <= b_assign_to_int_fu_279_p1(23 - 1 downto 0);
    tmp_8_fu_274_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_269_p2),64));
    tmp_fu_282_p4 <= b_assign_to_int_fu_279_p1(30 downto 23);
    tmp_i_trn_cast_fu_232_p1 <= std_logic_vector(resize(unsigned(i_i_reg_121),6));
    tmp_i_trn_fu_265_p1 <= std_logic_vector(resize(unsigned(j_i_reg_132),32));
end behav;
