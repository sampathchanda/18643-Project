// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module feature_extractor_maxpool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_mat_address0,
        input_mat_ce0,
        input_mat_q0,
        tmp_4,
        output_mat_address0,
        output_mat_ce0,
        output_mat_we0,
        output_mat_d0,
        tmp_41
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 12'b1;
parameter    ap_ST_st2_fsm_1 = 12'b10;
parameter    ap_ST_st3_fsm_2 = 12'b100;
parameter    ap_ST_st4_fsm_3 = 12'b1000;
parameter    ap_ST_st5_fsm_4 = 12'b10000;
parameter    ap_ST_st6_fsm_5 = 12'b100000;
parameter    ap_ST_st7_fsm_6 = 12'b1000000;
parameter    ap_ST_st8_fsm_7 = 12'b10000000;
parameter    ap_ST_st9_fsm_8 = 12'b100000000;
parameter    ap_ST_st10_fsm_9 = 12'b1000000000;
parameter    ap_ST_st11_fsm_10 = 12'b10000000000;
parameter    ap_ST_st12_fsm_11 = 12'b100000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv9_181 = 9'b110000001;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv32_36 = 32'b110110;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] input_mat_address0;
output   input_mat_ce0;
input  [31:0] input_mat_q0;
input  [1:0] tmp_4;
output  [5:0] output_mat_address0;
output   output_mat_ce0;
output   output_mat_we0;
output  [31:0] output_mat_d0;
input  [1:0] tmp_41;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_mat_ce0;
reg output_mat_ce0;
reg output_mat_we0;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm = 12'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_30;
wire   [4:0] p_addr4_cast_fu_192_p1;
reg   [4:0] p_addr4_cast_reg_536;
wire   [2:0] i_2_fu_202_p2;
reg   [2:0] i_2_reg_544;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_64;
wire   [2:0] tmp_fu_208_p2;
reg   [2:0] tmp_reg_549;
wire   [0:0] exitcond3_fu_196_p2;
wire   [31:0] p_addr6_fu_231_p1;
reg   [31:0] p_addr6_reg_554;
wire   [2:0] j_2_fu_241_p2;
reg   [2:0] j_2_reg_562;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_81;
wire   [2:0] tmp_9_fu_247_p2;
reg   [2:0] tmp_9_reg_567;
wire   [0:0] exitcond2_fu_235_p2;
wire   [1:0] k_2_fu_263_p2;
reg   [1:0] k_2_reg_575;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_95;
wire   [2:0] tmp_2_fu_269_p2;
reg   [2:0] tmp_2_reg_580;
wire   [0:0] exitcond1_fu_257_p2;
wire   [1:0] l_1_fu_298_p2;
reg   [1:0] l_1_reg_588;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_109;
wire   [2:0] tmp_5_fu_304_p2;
reg   [2:0] tmp_5_reg_593;
wire   [0:0] exitcond_fu_292_p2;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_123;
reg   [31:0] input_mat_load_reg_603;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_131;
wire   [31:0] grp_fu_176_p1;
reg   [31:0] tmp_7_reg_609;
wire   [0:0] tmp_13_fu_397_p2;
reg   [0:0] tmp_13_reg_615;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_142;
reg   [0:0] p_Result_s_reg_620;
wire   [31:0] p_Val2_4_fu_505_p3;
reg   [31:0] p_Val2_4_reg_625;
wire   [31:0] max_2_fu_524_p3;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_155;
reg   [2:0] i_reg_106;
reg   [2:0] j_reg_117;
reg   [31:0] max_reg_129;
reg   [1:0] k_reg_142;
reg   [31:0] max_1_reg_153;
reg   [1:0] l_reg_165;
wire   [63:0] tmp_3_fu_283_p1;
wire   [63:0] tmp_15_fu_316_p1;
wire   [31:0] grp_fu_176_p0;
wire   [31:0] tmp_12_fu_180_p0;
wire   [31:0] tmp_12_fu_180_p1;
wire   [3:0] tmp_s_fu_184_p3;
wire   [4:0] tmp_trn_cast_fu_214_p1;
wire   [4:0] p_addr5_fu_218_p2;
wire   [6:0] tmp_8_fu_223_p3;
wire   [2:0] k_cast_fu_253_p1;
wire   [31:0] tmp_1_trn_fu_274_p1;
wire   [31:0] p_addr7_fu_278_p2;
wire   [2:0] l_cast_fu_288_p1;
wire   [7:0] tmp_14_fu_309_p4;
wire   [31:0] p_Val2_1_fu_321_p1;
wire   [31:0] tmp_7_to_int_fu_338_p1;
wire   [7:0] loc_V_fu_324_p4;
wire   [22:0] loc_V_1_fu_334_p1;
wire   [0:0] notrhs_fu_361_p2;
wire   [0:0] notlhs_fu_355_p2;
wire   [7:0] tmp_1_fu_341_p4;
wire   [22:0] tmp_17_fu_351_p1;
wire   [0:0] notrhs2_fu_379_p2;
wire   [0:0] notlhs1_fu_373_p2;
wire   [0:0] tmp_6_fu_367_p2;
wire   [0:0] tmp_10_fu_385_p2;
wire   [0:0] tmp_11_fu_391_p2;
wire   [0:0] tmp_12_fu_180_p2;
wire   [23:0] p_Result_1_fu_411_p3;
wire   [8:0] tmp_i_i_i_cast1_fu_423_p1;
wire  signed [8:0] sh_assign_fu_427_p2;
wire   [7:0] tmp_1_i_i_fu_441_p2;
wire   [0:0] isNeg_fu_433_p3;
wire  signed [8:0] tmp_1_i_i_cast_fu_447_p1;
wire   [8:0] sh_assign_1_fu_451_p3;
wire  signed [31:0] sh_assign_1_cast_fu_459_p1;
wire  signed [23:0] sh_assign_1_cast_cast_fu_463_p1;
wire   [77:0] tmp_i_i_fu_419_p1;
wire   [77:0] tmp_2_i_i_fu_467_p1;
wire   [23:0] tmp_3_i_i_fu_471_p2;
wire   [0:0] tmp_20_fu_483_p3;
wire   [77:0] tmp_5_i_i_fu_477_p2;
wire   [31:0] tmp_16_fu_491_p1;
wire   [31:0] tmp_18_fu_495_p4;
wire   [31:0] p_Val2_7_i_i_fu_513_p2;
wire   [31:0] p_Val2_s_fu_518_p3;
wire    grp_fu_176_ce;
wire   [4:0] tmp_12_fu_180_opcode;
reg   [11:0] ap_NS_fsm;


feature_extractor_sitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractor_sitofp_32ns_32_6_U9(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_176_p0 ),
    .ce( grp_fu_176_ce ),
    .dout( grp_fu_176_p1 )
);

feature_extractor_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
feature_extractor_fcmp_32ns_32ns_1_1_U10(
    .din0( tmp_12_fu_180_p0 ),
    .din1( tmp_12_fu_180_p1 ),
    .opcode( tmp_12_fu_180_opcode ),
    .dout( tmp_12_fu_180_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond2_fu_235_p2))) begin
        i_reg_106 <= i_2_reg_544;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_106 <= ap_const_lv3_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond3_fu_196_p2 == ap_const_lv1_0))) begin
        j_reg_117 <= ap_const_lv3_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond1_fu_257_p2))) begin
        j_reg_117 <= j_2_reg_562;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond_fu_292_p2))) begin
        k_reg_142 <= k_2_reg_575;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_235_p2))) begin
        k_reg_142 <= ap_const_lv2_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond1_fu_257_p2))) begin
        l_reg_165 <= ap_const_lv2_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        l_reg_165 <= l_1_reg_588;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond1_fu_257_p2))) begin
        max_1_reg_153 <= max_reg_129;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        max_1_reg_153 <= max_2_fu_524_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond_fu_292_p2))) begin
        max_reg_129 <= max_1_reg_153;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_235_p2))) begin
        max_reg_129 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_2_reg_544 <= i_2_fu_202_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        input_mat_load_reg_603 <= input_mat_q0;
        tmp_7_reg_609 <= grp_fu_176_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_2_reg_562 <= j_2_fu_241_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        k_2_reg_575 <= k_2_fu_263_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        l_1_reg_588 <= l_1_fu_298_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        p_Result_s_reg_620 <= p_Val2_1_fu_321_p1[ap_const_lv32_1F];
        p_Val2_4_reg_625 <= p_Val2_4_fu_505_p3;
        tmp_13_reg_615 <= tmp_13_fu_397_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        p_addr4_cast_reg_536[3 : 2] <= p_addr4_cast_fu_192_p1[3 : 2];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond3_fu_196_p2 == ap_const_lv1_0))) begin
        p_addr6_reg_554[6 : 2] <= p_addr6_fu_231_p1[6 : 2];
        tmp_reg_549[2 : 1] <= tmp_fu_208_p2[2 : 1];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond1_fu_257_p2))) begin
        tmp_2_reg_580 <= tmp_2_fu_269_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond_fu_292_p2))) begin
        tmp_5_reg_593 <= tmp_5_fu_304_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_235_p2))) begin
        tmp_9_reg_567[2 : 1] <= tmp_9_fu_247_p2[2 : 1];
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond3_fu_196_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond3_fu_196_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond3_fu_196_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond3_fu_196_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_131)
begin
    if (ap_sig_bdd_131) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_142)
begin
    if (ap_sig_bdd_142) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_155)
begin
    if (ap_sig_bdd_155) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_30)
begin
    if (ap_sig_bdd_30) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_64)
begin
    if (ap_sig_bdd_64) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_81)
begin
    if (ap_sig_bdd_81) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_95)
begin
    if (ap_sig_bdd_95) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_109)
begin
    if (ap_sig_bdd_109) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_123)
begin
    if (ap_sig_bdd_123) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// input_mat_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_8)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        input_mat_ce0 = ap_const_logic_1;
    end else begin
        input_mat_ce0 = ap_const_logic_0;
    end
end

/// output_mat_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        output_mat_ce0 = ap_const_logic_1;
    end else begin
        output_mat_ce0 = ap_const_logic_0;
    end
end

/// output_mat_we0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or exitcond1_fu_257_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond1_fu_257_p2))) begin
        output_mat_we0 = ap_const_logic_1;
    end else begin
        output_mat_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond3_fu_196_p2 or exitcond2_fu_235_p2 or exitcond1_fu_257_p2 or exitcond_fu_292_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond3_fu_196_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((ap_const_lv1_0 == exitcond2_fu_235_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_257_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            if ((ap_const_lv1_0 == exitcond_fu_292_p2)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_109 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_109 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_123 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_123 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_131 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_131 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_142 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_142 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_155 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_155 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_30 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_30 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_64 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_64 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_81 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_81 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_95 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_95 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end
assign exitcond1_fu_257_p2 = (k_reg_142 == ap_const_lv2_2? 1'b1: 1'b0);
assign exitcond2_fu_235_p2 = (j_reg_117 == ap_const_lv3_4? 1'b1: 1'b0);
assign exitcond3_fu_196_p2 = (i_reg_106 == ap_const_lv3_4? 1'b1: 1'b0);
assign exitcond_fu_292_p2 = (l_reg_165 == ap_const_lv2_2? 1'b1: 1'b0);
assign grp_fu_176_ce = ap_const_logic_1;
assign grp_fu_176_p0 = max_1_reg_153;
assign i_2_fu_202_p2 = (i_reg_106 + ap_const_lv3_1);
assign input_mat_address0 = tmp_15_fu_316_p1;
assign isNeg_fu_433_p3 = sh_assign_fu_427_p2[ap_const_lv32_8];
assign j_2_fu_241_p2 = (j_reg_117 + ap_const_lv3_1);
assign k_2_fu_263_p2 = (k_reg_142 + ap_const_lv2_1);
assign k_cast_fu_253_p1 = k_reg_142;
assign l_1_fu_298_p2 = (l_reg_165 + ap_const_lv2_1);
assign l_cast_fu_288_p1 = l_reg_165;
assign loc_V_1_fu_334_p1 = p_Val2_1_fu_321_p1[22:0];
assign loc_V_fu_324_p4 = {{p_Val2_1_fu_321_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
assign max_2_fu_524_p3 = ((tmp_13_reg_615[0:0]===1'b1)? p_Val2_s_fu_518_p3: max_1_reg_153);
assign notlhs1_fu_373_p2 = (tmp_1_fu_341_p4 != ap_const_lv8_FF? 1'b1: 1'b0);
assign notlhs_fu_355_p2 = (loc_V_fu_324_p4 != ap_const_lv8_FF? 1'b1: 1'b0);
assign notrhs2_fu_379_p2 = (tmp_17_fu_351_p1 == ap_const_lv23_0? 1'b1: 1'b0);
assign notrhs_fu_361_p2 = (loc_V_1_fu_334_p1 == ap_const_lv23_0? 1'b1: 1'b0);
assign output_mat_address0 = tmp_3_fu_283_p1;
assign output_mat_d0 = max_reg_129;
assign p_Result_1_fu_411_p3 = {{ap_const_lv1_1}, {loc_V_1_fu_334_p1}};
assign p_Val2_1_fu_321_p1 = input_mat_load_reg_603;
assign p_Val2_4_fu_505_p3 = ((isNeg_fu_433_p3[0:0]===1'b1)? tmp_16_fu_491_p1: tmp_18_fu_495_p4);
assign p_Val2_7_i_i_fu_513_p2 = (ap_const_lv32_0 - p_Val2_4_reg_625);
assign p_Val2_s_fu_518_p3 = ((p_Result_s_reg_620[0:0]===1'b1)? p_Val2_7_i_i_fu_513_p2: p_Val2_4_reg_625);
assign p_addr4_cast_fu_192_p1 = tmp_s_fu_184_p3;
assign p_addr5_fu_218_p2 = (p_addr4_cast_reg_536 + tmp_trn_cast_fu_214_p1);
assign p_addr6_fu_231_p1 = tmp_8_fu_223_p3;
assign p_addr7_fu_278_p2 = (p_addr6_reg_554 + tmp_1_trn_fu_274_p1);
assign sh_assign_1_cast_cast_fu_463_p1 = $signed(sh_assign_1_fu_451_p3);
assign sh_assign_1_cast_fu_459_p1 = $signed(sh_assign_1_fu_451_p3);
assign sh_assign_1_fu_451_p3 = ((isNeg_fu_433_p3[0:0]===1'b1)? tmp_1_i_i_cast_fu_447_p1: sh_assign_fu_427_p2);
assign sh_assign_fu_427_p2 = ($signed(ap_const_lv9_181) + $signed(tmp_i_i_i_cast1_fu_423_p1));
assign tmp_10_fu_385_p2 = (notrhs2_fu_379_p2 | notlhs1_fu_373_p2);
assign tmp_11_fu_391_p2 = (tmp_6_fu_367_p2 & tmp_10_fu_385_p2);
assign tmp_12_fu_180_opcode = ap_const_lv5_2;
assign tmp_12_fu_180_p0 = input_mat_load_reg_603;
assign tmp_12_fu_180_p1 = tmp_7_reg_609;
assign tmp_13_fu_397_p2 = (tmp_11_fu_391_p2 & tmp_12_fu_180_p2);
assign tmp_14_fu_309_p4 = {{{tmp_4}, {tmp_2_reg_580}}, {tmp_5_reg_593}};
assign tmp_15_fu_316_p1 = tmp_14_fu_309_p4;
assign tmp_16_fu_491_p1 = tmp_20_fu_483_p3;
assign tmp_17_fu_351_p1 = tmp_7_to_int_fu_338_p1[22:0];
assign tmp_18_fu_495_p4 = {{tmp_5_i_i_fu_477_p2[ap_const_lv32_36 : ap_const_lv32_17]}};
assign tmp_1_fu_341_p4 = {{tmp_7_to_int_fu_338_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
assign tmp_1_i_i_cast_fu_447_p1 = $signed(tmp_1_i_i_fu_441_p2);
assign tmp_1_i_i_fu_441_p2 = (ap_const_lv8_7F - loc_V_fu_324_p4);
assign tmp_1_trn_fu_274_p1 = j_reg_117;
assign tmp_20_fu_483_p3 = tmp_3_i_i_fu_471_p2[ap_const_lv32_17];
assign tmp_2_fu_269_p2 = (tmp_reg_549 + k_cast_fu_253_p1);
assign tmp_2_i_i_fu_467_p1 = $unsigned(sh_assign_1_cast_fu_459_p1);
assign tmp_3_fu_283_p1 = p_addr7_fu_278_p2;
assign tmp_3_i_i_fu_471_p2 = p_Result_1_fu_411_p3 >> sh_assign_1_cast_cast_fu_463_p1;
assign tmp_5_fu_304_p2 = (l_cast_fu_288_p1 + tmp_9_reg_567);
assign tmp_5_i_i_fu_477_p2 = tmp_i_i_fu_419_p1 << tmp_2_i_i_fu_467_p1;
assign tmp_6_fu_367_p2 = (notrhs_fu_361_p2 | notlhs_fu_355_p2);
assign tmp_7_to_int_fu_338_p1 = tmp_7_reg_609;
assign tmp_8_fu_223_p3 = {{p_addr5_fu_218_p2}, {ap_const_lv2_0}};
assign tmp_9_fu_247_p2 = j_reg_117 << ap_const_lv3_1;
assign tmp_fu_208_p2 = i_reg_106 << ap_const_lv3_1;
assign tmp_i_i_fu_419_p1 = p_Result_1_fu_411_p3;
assign tmp_i_i_i_cast1_fu_423_p1 = loc_V_fu_324_p4;
assign tmp_s_fu_184_p3 = {{tmp_41}, {ap_const_lv2_0}};
assign tmp_trn_cast_fu_214_p1 = i_reg_106;
always @ (posedge ap_clk)
begin
    p_addr4_cast_reg_536[1:0] <= 2'b00;
    p_addr4_cast_reg_536[4] <= 1'b0;
    tmp_reg_549[0] <= 1'b0;
    p_addr6_reg_554[1:0] <= 2'b00;
    p_addr6_reg_554[31:7] <= 25'b0000000000000000000000000;
    tmp_9_reg_567[0] <= 1'b0;
end



endmodule //feature_extractor_maxpool

