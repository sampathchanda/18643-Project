// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module feature_extractor_convolve (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        tmp,
        conv_address0,
        conv_ce0,
        conv_we0,
        conv_d0,
        conv_q0,
        tmp1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 24'b1;
parameter    ap_ST_st2_fsm_1 = 24'b10;
parameter    ap_ST_st3_fsm_2 = 24'b100;
parameter    ap_ST_st4_fsm_3 = 24'b1000;
parameter    ap_ST_st5_fsm_4 = 24'b10000;
parameter    ap_ST_st6_fsm_5 = 24'b100000;
parameter    ap_ST_st7_fsm_6 = 24'b1000000;
parameter    ap_ST_st8_fsm_7 = 24'b10000000;
parameter    ap_ST_st9_fsm_8 = 24'b100000000;
parameter    ap_ST_st10_fsm_9 = 24'b1000000000;
parameter    ap_ST_st11_fsm_10 = 24'b10000000000;
parameter    ap_ST_st12_fsm_11 = 24'b100000000000;
parameter    ap_ST_st13_fsm_12 = 24'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 24'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 24'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 24'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 24'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 24'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 24'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 24'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 24'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 24'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 24'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 24'b100000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_2 = 4'b10;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv3_6 = 3'b110;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [6:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
input  [1:0] tmp;
output  [7:0] conv_address0;
output   conv_ce0;
output   conv_we0;
output  [31:0] conv_d0;
input  [31:0] conv_q0;
input  [1:0] tmp1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg[7:0] conv_address0;
reg conv_ce0;
reg conv_we0;
reg[31:0] conv_d0;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm = 24'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_42;
wire   [5:0] p_addr6_cast_fu_200_p1;
reg   [5:0] p_addr6_cast_reg_497;
wire   [3:0] s_1_fu_210_p2;
reg   [3:0] s_1_reg_505;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_85;
wire   [31:0] p_addr8_fu_233_p1;
reg   [31:0] p_addr8_reg_510;
wire   [0:0] exitcond5_fu_204_p2;
wire   [4:0] p_addr2_fu_251_p2;
reg   [4:0] p_addr2_reg_515;
wire   [3:0] t_1_fu_263_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_104;
wire  signed [2:0] tmp_6_fu_293_p2;
reg  signed [2:0] tmp_6_reg_531;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_113;
wire   [0:0] exitcond3_fu_283_p2;
wire   [3:0] tmp_6_cast5_fu_299_p1;
reg   [3:0] tmp_6_cast5_reg_536;
wire   [3:0] tmp_cast3_fu_319_p1;
reg   [3:0] tmp_cast3_reg_544;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_127;
wire   [0:0] exitcond2_fu_303_p2;
reg   [7:0] conv_addr_1_reg_549;
wire   [3:0] i_2_fu_336_p2;
wire   [2:0] k_2_fu_352_p2;
reg   [2:0] k_2_reg_562;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_145;
wire  signed [9:0] p_addr_cast_fu_393_p1;
reg  signed [9:0] p_addr_cast_reg_567;
wire   [0:0] exitcond1_fu_346_p2;
wire   [31:0] p_addr4_fu_422_p2;
reg   [31:0] p_addr4_reg_572;
wire   [3:0] j_2_fu_428_p2;
wire   [2:0] l_1_fu_444_p2;
reg   [2:0] l_1_reg_585;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_165;
wire   [0:0] exitcond_fu_438_p2;
wire   [31:0] p_addr5_fu_477_p2;
reg   [31:0] p_addr5_reg_595;
reg   [31:0] A_load_reg_600;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_180;
wire   [31:0] grp_fu_189_p1;
reg   [31:0] tmp_5_reg_605;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_189;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_199;
wire   [31:0] grp_fu_184_p2;
reg   [31:0] tmp_10_reg_620;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_bdd_208;
reg   [31:0] conv_load_reg_625;
wire   [31:0] grp_fu_180_p2;
reg   [31:0] tmp_11_reg_630;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_bdd_218;
reg   [3:0] s_reg_112;
wire   [0:0] exitcond4_fu_257_p2;
reg   [3:0] t_reg_123;
reg   [3:0] i_reg_134;
reg   [3:0] j_reg_146;
reg   [2:0] k_reg_158;
reg   [2:0] l_reg_169;
reg    ap_sig_cseq_ST_st24_fsm_23;
reg    ap_sig_bdd_247;
wire   [63:0] tmp_23_fu_278_p1;
wire   [63:0] tmp_26_fu_331_p1;
wire   [63:0] tmp_30_fu_468_p1;
wire   [63:0] tmp_31_fu_482_p1;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_bdd_259;
wire   [31:0] grp_fu_180_p0;
wire   [31:0] grp_fu_180_p1;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_bdd_272;
wire   [31:0] grp_fu_184_p0;
wire   [31:0] grp_fu_184_p1;
wire   [31:0] grp_fu_189_p0;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_282;
wire   [4:0] tmp_19_fu_192_p3;
wire   [5:0] tmp2_trn_cast_fu_216_p1;
wire   [5:0] p_addr7_fu_220_p2;
wire   [8:0] tmp_21_fu_225_p3;
wire   [3:0] tmp_20_fu_240_p3;
wire   [4:0] tmp_cast_trn_cast_fu_237_p1;
wire   [4:0] p_shl_cast_fu_247_p1;
wire   [31:0] tmp_9_trn_fu_269_p1;
wire   [31:0] p_addr9_fu_273_p2;
wire   [2:0] tmp_22_fu_289_p1;
wire   [2:0] tmp_24_fu_309_p1;
wire  signed [2:0] tmp_s_fu_313_p2;
wire   [7:0] tmp_25_fu_323_p4;
wire   [3:0] k_cast_fu_342_p1;
wire   [3:0] x_fu_358_p2;
wire   [7:0] tmp_27_fu_363_p3;
wire   [5:0] tmp_28_fu_375_p3;
wire   [8:0] p_shl1_cast_fu_371_p1;
wire   [8:0] p_shl2_cast_fu_383_p1;
wire   [8:0] p_addr_fu_387_p2;
wire   [4:0] tmp_3_trn_cast_fu_397_p1;
wire   [4:0] p_addr3_fu_401_p2;
wire   [6:0] tmp_29_fu_410_p3;
wire   [31:0] p_addr3_cast_fu_406_p1;
wire   [31:0] p_shl3_fu_418_p1;
wire   [3:0] l_cast_fu_434_p1;
wire   [3:0] y_fu_450_p2;
wire   [9:0] tmp_4_trn_cast_fu_455_p1;
wire  signed [9:0] p_addr1_fu_459_p2;
wire  signed [31:0] p_addr1_cast_fu_464_p1;
wire   [31:0] tmp_8_trn_fu_473_p1;
wire    grp_fu_180_ce;
wire    grp_fu_184_ce;
wire    grp_fu_189_ce;
reg   [23:0] ap_NS_fsm;


feature_extractor_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractor_fadd_32ns_32ns_32_5_full_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_180_p0 ),
    .din1( grp_fu_180_p1 ),
    .ce( grp_fu_180_ce ),
    .dout( grp_fu_180_p2 )
);

feature_extractor_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractor_fmul_32ns_32ns_32_4_max_dsp_U2(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_184_p0 ),
    .din1( grp_fu_184_p1 ),
    .ce( grp_fu_184_ce ),
    .dout( grp_fu_184_p2 )
);

feature_extractor_sitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractor_sitofp_32ns_32_6_U3(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_189_p0 ),
    .ce( grp_fu_189_ce ),
    .dout( grp_fu_189_p1 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond5_fu_204_p2 == ap_const_lv1_0))) begin
        i_reg_134 <= ap_const_lv4_2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond2_fu_303_p2))) begin
        i_reg_134 <= i_2_fu_336_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond3_fu_283_p2))) begin
        j_reg_146 <= ap_const_lv4_2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == exitcond1_fu_346_p2))) begin
        j_reg_146 <= j_2_fu_428_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_lv1_0 == exitcond_fu_438_p2))) begin
        k_reg_158 <= k_2_reg_562;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond2_fu_303_p2))) begin
        k_reg_158 <= ap_const_lv3_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == exitcond1_fu_346_p2))) begin
        l_reg_169 <= ap_const_lv3_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        l_reg_169 <= l_1_reg_585;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond4_fu_257_p2))) begin
        s_reg_112 <= s_1_reg_505;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        s_reg_112 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond5_fu_204_p2 == ap_const_lv1_0))) begin
        t_reg_123 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond4_fu_257_p2))) begin
        t_reg_123 <= t_1_fu_263_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        A_load_reg_600 <= A_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond2_fu_303_p2))) begin
        conv_addr_1_reg_549 <= tmp_26_fu_331_p1;
        tmp_cast3_reg_544[2 : 0] <= tmp_cast3_fu_319_p1[2 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        conv_load_reg_625 <= conv_q0;
        tmp_10_reg_620 <= grp_fu_184_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        k_2_reg_562 <= k_2_fu_352_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        l_1_reg_585 <= l_1_fu_444_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond5_fu_204_p2 == ap_const_lv1_0))) begin
        p_addr2_reg_515 <= p_addr2_fu_251_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == exitcond1_fu_346_p2))) begin
        p_addr4_reg_572 <= p_addr4_fu_422_p2;
        p_addr_cast_reg_567[9 : 2] <= p_addr_cast_fu_393_p1[9 : 2];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == exitcond_fu_438_p2))) begin
        p_addr5_reg_595 <= p_addr5_fu_477_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        p_addr6_cast_reg_497[4 : 3] <= p_addr6_cast_fu_200_p1[4 : 3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond5_fu_204_p2 == ap_const_lv1_0))) begin
        p_addr8_reg_510[8 : 3] <= p_addr8_fu_233_p1[8 : 3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        s_1_reg_505 <= s_1_fu_210_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        tmp_11_reg_630 <= grp_fu_180_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        tmp_5_reg_605 <= grp_fu_189_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond3_fu_283_p2))) begin
        tmp_6_cast5_reg_536[2 : 0] <= tmp_6_cast5_fu_299_p1[2 : 0];
        tmp_6_reg_531 <= tmp_6_fu_293_p2;
    end
end

/// A_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        A_ce0 = ap_const_logic_1;
    end else begin
        A_ce0 = ap_const_logic_0;
    end
end

/// B_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        B_ce0 = ap_const_logic_1;
    end else begin
        B_ce0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st4_fsm_3 or exitcond3_fu_283_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond3_fu_283_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or exitcond3_fu_283_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond3_fu_283_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_189)
begin
    if (ap_sig_bdd_189) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_199)
begin
    if (ap_sig_bdd_199) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_16 assign process. ///
always @ (ap_sig_bdd_259)
begin
    if (ap_sig_bdd_259) begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st18_fsm_17 assign process. ///
always @ (ap_sig_bdd_208)
begin
    if (ap_sig_bdd_208) begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st19_fsm_18 assign process. ///
always @ (ap_sig_bdd_272)
begin
    if (ap_sig_bdd_272) begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_42)
begin
    if (ap_sig_bdd_42) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st23_fsm_22 assign process. ///
always @ (ap_sig_bdd_218)
begin
    if (ap_sig_bdd_218) begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st24_fsm_23 assign process. ///
always @ (ap_sig_bdd_247)
begin
    if (ap_sig_bdd_247) begin
        ap_sig_cseq_ST_st24_fsm_23 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st24_fsm_23 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_85)
begin
    if (ap_sig_bdd_85) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_104)
begin
    if (ap_sig_bdd_104) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_113)
begin
    if (ap_sig_bdd_113) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_127)
begin
    if (ap_sig_bdd_127) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_145)
begin
    if (ap_sig_bdd_145) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_165)
begin
    if (ap_sig_bdd_165) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_180)
begin
    if (ap_sig_bdd_180) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_282)
begin
    if (ap_sig_bdd_282) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// conv_address0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or conv_addr_1_reg_549 or ap_sig_cseq_ST_st24_fsm_23 or tmp_23_fu_278_p1 or ap_sig_cseq_ST_st17_fsm_16)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        conv_address0 = tmp_23_fu_278_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23) | (ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16))) begin
        conv_address0 = conv_addr_1_reg_549;
    end else begin
        conv_address0 = 'bx;
    end
end

/// conv_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st24_fsm_23 or ap_sig_cseq_ST_st17_fsm_16)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23) | (ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16))) begin
        conv_ce0 = ap_const_logic_1;
    end else begin
        conv_ce0 = ap_const_logic_0;
    end
end

/// conv_d0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or tmp_11_reg_630 or ap_sig_cseq_ST_st24_fsm_23)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        conv_d0 = tmp_11_reg_630;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        conv_d0 = ap_const_lv32_0;
    end else begin
        conv_d0 = 'bx;
    end
end

/// conv_we0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond4_fu_257_p2 or ap_sig_cseq_ST_st24_fsm_23)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond4_fu_257_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        conv_we0 = ap_const_logic_1;
    end else begin
        conv_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond5_fu_204_p2 or exitcond3_fu_283_p2 or exitcond2_fu_303_p2 or exitcond1_fu_346_p2 or exitcond_fu_438_p2 or exitcond4_fu_257_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond5_fu_204_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((ap_const_lv1_0 == exitcond4_fu_257_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond3_fu_283_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (~(ap_const_lv1_0 == exitcond2_fu_303_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_346_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : 
        begin
            if ((ap_const_lv1_0 == exitcond_fu_438_p2)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_30_fu_468_p1;
assign B_address0 = tmp_31_fu_482_p1;

/// ap_sig_bdd_104 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_104 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_113 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_113 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_127 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_127 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_145 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_145 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_165 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_165 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_180 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_180 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_189 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_189 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_199 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_199 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_208 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_208 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_11]);
end

/// ap_sig_bdd_218 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_218 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_16]);
end

/// ap_sig_bdd_247 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_247 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_17]);
end

/// ap_sig_bdd_259 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_259 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end

/// ap_sig_bdd_272 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_272 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_12]);
end

/// ap_sig_bdd_282 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_282 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_42 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_42 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_85 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_85 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign exitcond1_fu_346_p2 = (k_reg_158 == ap_const_lv3_5? 1'b1: 1'b0);
assign exitcond2_fu_303_p2 = (j_reg_146 == ap_const_lv4_A? 1'b1: 1'b0);
assign exitcond3_fu_283_p2 = (i_reg_134 == ap_const_lv4_A? 1'b1: 1'b0);
assign exitcond4_fu_257_p2 = (t_reg_123 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond5_fu_204_p2 = (s_reg_112 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond_fu_438_p2 = (l_reg_169 == ap_const_lv3_5? 1'b1: 1'b0);
assign grp_fu_180_ce = ap_const_logic_1;
assign grp_fu_180_p0 = conv_load_reg_625;
assign grp_fu_180_p1 = tmp_10_reg_620;
assign grp_fu_184_ce = ap_const_logic_1;
assign grp_fu_184_p0 = tmp_5_reg_605;
assign grp_fu_184_p1 = B_q0;
assign grp_fu_189_ce = ap_const_logic_1;
assign grp_fu_189_p0 = A_load_reg_600;
assign i_2_fu_336_p2 = (i_reg_134 + ap_const_lv4_1);
assign j_2_fu_428_p2 = (j_reg_146 + ap_const_lv4_1);
assign k_2_fu_352_p2 = (k_reg_158 + ap_const_lv3_1);
assign k_cast_fu_342_p1 = k_reg_158;
assign l_1_fu_444_p2 = (l_reg_169 + ap_const_lv3_1);
assign l_cast_fu_434_p1 = l_reg_169;
assign p_addr1_cast_fu_464_p1 = p_addr1_fu_459_p2;
assign p_addr1_fu_459_p2 = ($signed(tmp_4_trn_cast_fu_455_p1) + $signed(p_addr_cast_reg_567));
assign p_addr2_fu_251_p2 = (tmp_cast_trn_cast_fu_237_p1 + p_shl_cast_fu_247_p1);
assign p_addr3_cast_fu_406_p1 = p_addr3_fu_401_p2;
assign p_addr3_fu_401_p2 = (p_addr2_reg_515 + tmp_3_trn_cast_fu_397_p1);
assign p_addr4_fu_422_p2 = (p_addr3_cast_fu_406_p1 + p_shl3_fu_418_p1);
assign p_addr5_fu_477_p2 = (tmp_8_trn_fu_473_p1 + p_addr4_reg_572);
assign p_addr6_cast_fu_200_p1 = tmp_19_fu_192_p3;
assign p_addr7_fu_220_p2 = (tmp2_trn_cast_fu_216_p1 + p_addr6_cast_reg_497);
assign p_addr8_fu_233_p1 = tmp_21_fu_225_p3;
assign p_addr9_fu_273_p2 = (p_addr8_reg_510 + tmp_9_trn_fu_269_p1);
assign p_addr_cast_fu_393_p1 = $signed(p_addr_fu_387_p2);
assign p_addr_fu_387_p2 = (p_shl1_cast_fu_371_p1 - p_shl2_cast_fu_383_p1);
assign p_shl1_cast_fu_371_p1 = tmp_27_fu_363_p3;
assign p_shl2_cast_fu_383_p1 = tmp_28_fu_375_p3;
assign p_shl3_fu_418_p1 = tmp_29_fu_410_p3;
assign p_shl_cast_fu_247_p1 = tmp_20_fu_240_p3;
assign s_1_fu_210_p2 = (s_reg_112 + ap_const_lv4_1);
assign t_1_fu_263_p2 = (t_reg_123 + ap_const_lv4_1);
assign tmp2_trn_cast_fu_216_p1 = s_reg_112;
assign tmp_19_fu_192_p3 = {{tmp1}, {ap_const_lv3_0}};
assign tmp_20_fu_240_p3 = {{tmp}, {ap_const_lv2_0}};
assign tmp_21_fu_225_p3 = {{p_addr7_fu_220_p2}, {ap_const_lv3_0}};
assign tmp_22_fu_289_p1 = i_reg_134[2:0];
assign tmp_23_fu_278_p1 = p_addr9_fu_273_p2;
assign tmp_24_fu_309_p1 = j_reg_146[2:0];
assign tmp_25_fu_323_p4 = {{{tmp1}, {tmp_6_reg_531}}, {tmp_s_fu_313_p2}};
assign tmp_26_fu_331_p1 = tmp_25_fu_323_p4;
assign tmp_27_fu_363_p3 = {{x_fu_358_p2}, {ap_const_lv4_0}};
assign tmp_28_fu_375_p3 = {{x_fu_358_p2}, {ap_const_lv2_0}};
assign tmp_29_fu_410_p3 = {{p_addr3_fu_401_p2}, {ap_const_lv2_0}};
assign tmp_30_fu_468_p1 = $unsigned(p_addr1_cast_fu_464_p1);
assign tmp_31_fu_482_p1 = p_addr5_reg_595;
assign tmp_3_trn_cast_fu_397_p1 = k_reg_158;
assign tmp_4_trn_cast_fu_455_p1 = y_fu_450_p2;
assign tmp_6_cast5_fu_299_p1 = $unsigned(tmp_6_fu_293_p2);
assign tmp_6_fu_293_p2 = ($signed(ap_const_lv3_6) + $signed(tmp_22_fu_289_p1));
assign tmp_8_trn_fu_473_p1 = l_reg_169;
assign tmp_9_trn_fu_269_p1 = t_reg_123;
assign tmp_cast3_fu_319_p1 = $unsigned(tmp_s_fu_313_p2);
assign tmp_cast_trn_cast_fu_237_p1 = tmp;
assign tmp_s_fu_313_p2 = ($signed(ap_const_lv3_6) + $signed(tmp_24_fu_309_p1));
assign x_fu_358_p2 = (k_cast_fu_342_p1 + tmp_6_cast5_reg_536);
assign y_fu_450_p2 = (tmp_cast3_reg_544 + l_cast_fu_434_p1);
always @ (posedge ap_clk)
begin
    p_addr6_cast_reg_497[2:0] <= 3'b000;
    p_addr6_cast_reg_497[5] <= 1'b0;
    p_addr8_reg_510[2:0] <= 3'b000;
    p_addr8_reg_510[31:9] <= 23'b00000000000000000000000;
    tmp_6_cast5_reg_536[3] <= 1'b0;
    tmp_cast3_reg_544[3] <= 1'b0;
    p_addr_cast_reg_567[1:0] <= 2'b00;
end



endmodule //feature_extractor_convolve

