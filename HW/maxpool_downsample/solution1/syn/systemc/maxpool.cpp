// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "maxpool.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<8> maxpool::ap_const_lv8_0 = "00000000";
const sc_logic maxpool::ap_const_logic_1 = sc_dt::Log_1;
const bool maxpool::ap_true = true;
const sc_logic maxpool::ap_const_logic_0 = sc_dt::Log_0;

maxpool::maxpool(sc_module_name name) : sc_module(name), mVcdFile(0) {
    maxpool_Loop_LOOP_proc_U0 = new maxpool_Loop_LOOP_proc("maxpool_Loop_LOOP_proc_U0");
    maxpool_Loop_LOOP_proc_U0->ap_clk(ap_clk);
    maxpool_Loop_LOOP_proc_U0->ap_rst(ap_rst_n_inv);
    maxpool_Loop_LOOP_proc_U0->ap_start(maxpool_Loop_LOOP_proc_U0_ap_start);
    maxpool_Loop_LOOP_proc_U0->ap_done(maxpool_Loop_LOOP_proc_U0_ap_done);
    maxpool_Loop_LOOP_proc_U0->ap_continue(maxpool_Loop_LOOP_proc_U0_ap_continue);
    maxpool_Loop_LOOP_proc_U0->ap_idle(maxpool_Loop_LOOP_proc_U0_ap_idle);
    maxpool_Loop_LOOP_proc_U0->ap_ready(maxpool_Loop_LOOP_proc_U0_ap_ready);
    maxpool_Loop_LOOP_proc_U0->output_V_TDATA(maxpool_Loop_LOOP_proc_U0_output_V_TDATA);
    maxpool_Loop_LOOP_proc_U0->output_V_TVALID(maxpool_Loop_LOOP_proc_U0_output_V_TVALID);
    maxpool_Loop_LOOP_proc_U0->output_V_TREADY(maxpool_Loop_LOOP_proc_U0_output_V_TREADY);
    maxpool_Loop_LOOP_proc_U0->input_V_TDATA(maxpool_Loop_LOOP_proc_U0_input_V_TDATA);
    maxpool_Loop_LOOP_proc_U0->input_V_TVALID(maxpool_Loop_LOOP_proc_U0_input_V_TVALID);
    maxpool_Loop_LOOP_proc_U0->input_V_TREADY(maxpool_Loop_LOOP_proc_U0_input_V_TREADY);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_hs_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( maxpool_Loop_LOOP_proc_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_top_allready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_hs_continue);

    SC_METHOD(thread_ap_sig_hs_done);
    sensitive << ( maxpool_Loop_LOOP_proc_U0_ap_done );

    SC_METHOD(thread_ap_sig_top_allready);
    sensitive << ( maxpool_Loop_LOOP_proc_U0_ap_ready );

    SC_METHOD(thread_input_V_TREADY);
    sensitive << ( maxpool_Loop_LOOP_proc_U0_input_V_TREADY );

    SC_METHOD(thread_maxpool_Loop_LOOP_proc_U0_ap_continue);
    sensitive << ( ap_sig_hs_continue );

    SC_METHOD(thread_maxpool_Loop_LOOP_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_maxpool_Loop_LOOP_proc_U0_input_V_TDATA);
    sensitive << ( input_V_TDATA );

    SC_METHOD(thread_maxpool_Loop_LOOP_proc_U0_input_V_TVALID);
    sensitive << ( input_V_TVALID );

    SC_METHOD(thread_maxpool_Loop_LOOP_proc_U0_output_V_TREADY);
    sensitive << ( output_V_TREADY );

    SC_METHOD(thread_output_V_TDATA);
    sensitive << ( maxpool_Loop_LOOP_proc_U0_output_V_TDATA );

    SC_METHOD(thread_output_V_TVALID);
    sensitive << ( maxpool_Loop_LOOP_proc_U0_output_V_TVALID );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_reg_procdone_maxpool_Loop_LOOP_proc_U0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "maxpool_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, begin_r, "(port)begin_r");
    sc_trace(mVcdFile, input_V_TDATA, "(port)input_V_TDATA");
    sc_trace(mVcdFile, output_V_TDATA, "(port)output_V_TDATA");
    sc_trace(mVcdFile, ok, "(port)ok");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, output_V_TVALID, "(port)output_V_TVALID");
    sc_trace(mVcdFile, output_V_TREADY, "(port)output_V_TREADY");
    sc_trace(mVcdFile, input_V_TVALID, "(port)input_V_TVALID");
    sc_trace(mVcdFile, input_V_TREADY, "(port)input_V_TREADY");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, maxpool_Loop_LOOP_proc_U0_ap_start, "maxpool_Loop_LOOP_proc_U0_ap_start");
    sc_trace(mVcdFile, maxpool_Loop_LOOP_proc_U0_ap_done, "maxpool_Loop_LOOP_proc_U0_ap_done");
    sc_trace(mVcdFile, maxpool_Loop_LOOP_proc_U0_ap_continue, "maxpool_Loop_LOOP_proc_U0_ap_continue");
    sc_trace(mVcdFile, maxpool_Loop_LOOP_proc_U0_ap_idle, "maxpool_Loop_LOOP_proc_U0_ap_idle");
    sc_trace(mVcdFile, maxpool_Loop_LOOP_proc_U0_ap_ready, "maxpool_Loop_LOOP_proc_U0_ap_ready");
    sc_trace(mVcdFile, maxpool_Loop_LOOP_proc_U0_output_V_TDATA, "maxpool_Loop_LOOP_proc_U0_output_V_TDATA");
    sc_trace(mVcdFile, maxpool_Loop_LOOP_proc_U0_output_V_TVALID, "maxpool_Loop_LOOP_proc_U0_output_V_TVALID");
    sc_trace(mVcdFile, maxpool_Loop_LOOP_proc_U0_output_V_TREADY, "maxpool_Loop_LOOP_proc_U0_output_V_TREADY");
    sc_trace(mVcdFile, maxpool_Loop_LOOP_proc_U0_input_V_TDATA, "maxpool_Loop_LOOP_proc_U0_input_V_TDATA");
    sc_trace(mVcdFile, maxpool_Loop_LOOP_proc_U0_input_V_TVALID, "maxpool_Loop_LOOP_proc_U0_input_V_TVALID");
    sc_trace(mVcdFile, maxpool_Loop_LOOP_proc_U0_input_V_TREADY, "maxpool_Loop_LOOP_proc_U0_input_V_TREADY");
    sc_trace(mVcdFile, ap_sig_hs_continue, "ap_sig_hs_continue");
    sc_trace(mVcdFile, ap_reg_procdone_maxpool_Loop_LOOP_proc_U0, "ap_reg_procdone_maxpool_Loop_LOOP_proc_U0");
    sc_trace(mVcdFile, ap_sig_hs_done, "ap_sig_hs_done");
    sc_trace(mVcdFile, ap_CS, "ap_CS");
    sc_trace(mVcdFile, ap_sig_top_allready, "ap_sig_top_allready");
#endif

    }
    mHdltvinHandle.open("maxpool.hdltvin.dat");
    mHdltvoutHandle.open("maxpool.hdltvout.dat");
}

maxpool::~maxpool() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete maxpool_Loop_LOOP_proc_U0;
}

void maxpool::thread_ap_clk_no_reset_() {
    ap_CS = ap_const_logic_0;
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_procdone_maxpool_Loop_LOOP_proc_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_maxpool_Loop_LOOP_proc_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(maxpool_Loop_LOOP_proc_U0_ap_done.read(), ap_const_logic_1)) {
            ap_reg_procdone_maxpool_Loop_LOOP_proc_U0 = ap_const_logic_1;
        }
    }
}

void maxpool::thread_ap_done() {
    ap_done = ap_sig_hs_done.read();
}

void maxpool::thread_ap_idle() {
    if (esl_seteq<1,1,1>(maxpool_Loop_LOOP_proc_U0_ap_idle.read(), ap_const_logic_1)) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void maxpool::thread_ap_ready() {
    ap_ready = ap_sig_top_allready.read();
}

void maxpool::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void maxpool::thread_ap_sig_hs_continue() {
    ap_sig_hs_continue = ap_const_logic_1;
}

void maxpool::thread_ap_sig_hs_done() {
    if (esl_seteq<1,1,1>(maxpool_Loop_LOOP_proc_U0_ap_done.read(), ap_const_logic_1)) {
        ap_sig_hs_done = ap_const_logic_1;
    } else {
        ap_sig_hs_done = ap_const_logic_0;
    }
}

void maxpool::thread_ap_sig_top_allready() {
    ap_sig_top_allready = maxpool_Loop_LOOP_proc_U0_ap_ready.read();
}

void maxpool::thread_input_V_TREADY() {
    input_V_TREADY = maxpool_Loop_LOOP_proc_U0_input_V_TREADY.read();
}

void maxpool::thread_maxpool_Loop_LOOP_proc_U0_ap_continue() {
    maxpool_Loop_LOOP_proc_U0_ap_continue = ap_sig_hs_continue.read();
}

void maxpool::thread_maxpool_Loop_LOOP_proc_U0_ap_start() {
    maxpool_Loop_LOOP_proc_U0_ap_start = ap_start.read();
}

void maxpool::thread_maxpool_Loop_LOOP_proc_U0_input_V_TDATA() {
    maxpool_Loop_LOOP_proc_U0_input_V_TDATA = input_V_TDATA.read();
}

void maxpool::thread_maxpool_Loop_LOOP_proc_U0_input_V_TVALID() {
    maxpool_Loop_LOOP_proc_U0_input_V_TVALID = input_V_TVALID.read();
}

void maxpool::thread_maxpool_Loop_LOOP_proc_U0_output_V_TREADY() {
    maxpool_Loop_LOOP_proc_U0_output_V_TREADY = output_V_TREADY.read();
}

void maxpool::thread_output_V_TDATA() {
    output_V_TDATA = maxpool_Loop_LOOP_proc_U0_output_V_TDATA.read();
}

void maxpool::thread_output_V_TVALID() {
    output_V_TVALID = maxpool_Loop_LOOP_proc_U0_output_V_TVALID.read();
}

void maxpool::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"begin_r\" :  \"" << begin_r.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_V_TDATA\" :  \"" << input_V_TDATA.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"output_V_TDATA\" :  \"" << output_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ok\" :  \"" << ok.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_TVALID\" :  \"" << output_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_V_TREADY\" :  \"" << output_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_V_TVALID\" :  \"" << input_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_TREADY\" :  \"" << input_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

