

================================================================
== Vivado HLS Report for 'maxpool_Loop_LOOP_proc'
================================================================
* Date:           Wed Nov 30 17:18:06 2016

* Version:        2015.2 (Build 1266856 on Fri Jun 26 16:57:37 PM 2015)
* Project:        maxpool_downsample
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      6.74|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |  578|  578|  578|  578|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- LOOP    |  576|  576|        48|         48|          1|    12|    yes   |
        +----------+-----+-----+----------+-----------+-----------+------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 48, depth = 48


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 50
* Pipeline: 1
  Pipeline-0: II = 48, D = 48, States = { 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	50  / (exitcond1)
	3  / (!exitcond1)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	2  / true
50 --> 
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_51 [1/1] 0.00ns
newFuncRoot:0  call void (...)* @_ssdm_op_SpecInterface(i8* %output_V, [5 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_1: stg_52 [1/1] 0.00ns
newFuncRoot:1  call void (...)* @_ssdm_op_SpecInterface(i8* %input_V, [5 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_1: stg_53 [1/1] 1.57ns
newFuncRoot:2  br label %.preheader13


 <State 2>: 3.25ns
ST_2: loop_count [1/1] 0.00ns
.preheader13:0  %loop_count = phi i4 [ %loop_count_1, %.preheader.preheader ], [ 0, %newFuncRoot ]

ST_2: exitcond1 [1/1] 1.88ns
.preheader13:1  %exitcond1 = icmp eq i4 %loop_count, -4

ST_2: loop_count_1 [1/1] 0.80ns
.preheader13:2  %loop_count_1 = add i4 %loop_count, 1

ST_2: stg_57 [1/1] 0.00ns
.preheader13:3  br i1 %exitcond1, label %.exitStub, label %.preheader.preheader

ST_2: input_V_read [1/1] 0.00ns
.preheader.preheader:4  %input_V_read = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 3>: 0.00ns
ST_3: input_V_read_1 [1/1] 0.00ns
.preheader.preheader:5  %input_V_read_1 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 4>: 0.00ns
ST_4: input_V_read_2 [1/1] 0.00ns
.preheader.preheader:8  %input_V_read_2 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 5>: 0.00ns
ST_5: input_V_read_3 [1/1] 0.00ns
.preheader.preheader:9  %input_V_read_3 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 6>: 0.00ns
ST_6: input_V_read_4 [1/1] 0.00ns
.preheader.preheader:12  %input_V_read_4 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 7>: 0.00ns
ST_7: input_V_read_5 [1/1] 0.00ns
.preheader.preheader:13  %input_V_read_5 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 8>: 0.00ns
ST_8: input_V_read_6 [1/1] 0.00ns
.preheader.preheader:16  %input_V_read_6 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 9>: 0.00ns
ST_9: input_V_read_7 [1/1] 0.00ns
.preheader.preheader:17  %input_V_read_7 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 10>: 0.00ns
ST_10: input_V_read_8 [1/1] 0.00ns
.preheader.preheader:20  %input_V_read_8 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 11>: 0.00ns
ST_11: input_V_read_9 [1/1] 0.00ns
.preheader.preheader:21  %input_V_read_9 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 12>: 0.00ns
ST_12: input_V_read_10 [1/1] 0.00ns
.preheader.preheader:24  %input_V_read_10 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 13>: 0.00ns
ST_13: input_V_read_11 [1/1] 0.00ns
.preheader.preheader:25  %input_V_read_11 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 14>: 0.00ns
ST_14: input_V_read_12 [1/1] 0.00ns
.preheader.preheader:28  %input_V_read_12 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 15>: 0.00ns
ST_15: input_V_read_13 [1/1] 0.00ns
.preheader.preheader:29  %input_V_read_13 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 16>: 0.00ns
ST_16: input_V_read_14 [1/1] 0.00ns
.preheader.preheader:32  %input_V_read_14 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 17>: 0.00ns
ST_17: input_V_read_15 [1/1] 0.00ns
.preheader.preheader:33  %input_V_read_15 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 18>: 0.00ns
ST_18: input_V_read_16 [1/1] 0.00ns
.preheader.preheader:36  %input_V_read_16 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 19>: 0.00ns
ST_19: input_V_read_17 [1/1] 0.00ns
.preheader.preheader:37  %input_V_read_17 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 20>: 0.00ns
ST_20: input_V_read_18 [1/1] 0.00ns
.preheader.preheader:40  %input_V_read_18 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 21>: 0.00ns
ST_21: input_V_read_19 [1/1] 0.00ns
.preheader.preheader:41  %input_V_read_19 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 22>: 0.00ns
ST_22: input_V_read_20 [1/1] 0.00ns
.preheader.preheader:44  %input_V_read_20 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 23>: 0.00ns
ST_23: input_V_read_21 [1/1] 0.00ns
.preheader.preheader:45  %input_V_read_21 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 24>: 0.00ns
ST_24: input_V_read_22 [1/1] 0.00ns
.preheader.preheader:48  %input_V_read_22 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 25>: 0.00ns
ST_25: input_V_read_23 [1/1] 0.00ns
.preheader.preheader:49  %input_V_read_23 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 26>: 0.00ns
ST_26: tmp [1/1] 0.00ns
.preheader.preheader:52  %tmp = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 27>: 0.00ns
ST_27: tmp_1 [1/1] 0.00ns
.preheader.preheader:53  %tmp_1 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 28>: 0.00ns
ST_28: tmp_6 [1/1] 0.00ns
.preheader.preheader:59  %tmp_6 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 29>: 0.00ns
ST_29: tmp_8 [1/1] 0.00ns
.preheader.preheader:60  %tmp_8 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 30>: 0.00ns
ST_30: tmp_10 [1/1] 0.00ns
.preheader.preheader:66  %tmp_10 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 31>: 0.00ns
ST_31: tmp_21 [1/1] 0.00ns
.preheader.preheader:67  %tmp_21 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 32>: 0.00ns
ST_32: tmp_22 [1/1] 0.00ns
.preheader.preheader:73  %tmp_22 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 33>: 0.00ns
ST_33: tmp_23 [1/1] 0.00ns
.preheader.preheader:74  %tmp_23 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 34>: 0.00ns
ST_34: tmp_24 [1/1] 0.00ns
.preheader.preheader:80  %tmp_24 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 35>: 0.00ns
ST_35: tmp_25 [1/1] 0.00ns
.preheader.preheader:81  %tmp_25 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 36>: 0.00ns
ST_36: tmp_26 [1/1] 0.00ns
.preheader.preheader:87  %tmp_26 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 37>: 0.00ns
ST_37: tmp_27 [1/1] 0.00ns
.preheader.preheader:88  %tmp_27 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 38>: 6.74ns
ST_38: tmp_2 [1/1] 2.00ns
.preheader.preheader:6  %tmp_2 = icmp ugt i8 %input_V_read, %input_V_read_1

ST_38: tmp_5 [1/1] 1.37ns
.preheader.preheader:7  %tmp_5 = select i1 %tmp_2, i8 %input_V_read, i8 %input_V_read_1

ST_38: tmp_s [1/1] 2.00ns
.preheader.preheader:54  %tmp_s = icmp ugt i8 %tmp, %tmp_1

ST_38: temp3 [1/1] 1.37ns
.preheader.preheader:55  %temp3 = select i1 %tmp_s, i8 %tmp, i8 %tmp_1

ST_38: tmp_7 [1/1] 2.00ns
.preheader.preheader:56  %tmp_7 = icmp ugt i8 %tmp_5, %temp3

ST_38: tmp_3 [1/1] 1.37ns
.preheader.preheader:57  %tmp_3 = select i1 %tmp_7, i8 %tmp_5, i8 %temp3

ST_38: stg_100 [1/1] 0.00ns
.preheader.preheader:58  call void @_ssdm_op_Write.axis.volatile.i8P(i8* %output_V, i8 %tmp_3)

ST_38: tmp_28 [1/1] 0.00ns
.preheader.preheader:94  %tmp_28 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 39>: 6.74ns
ST_39: tmp_4_1 [1/1] 2.00ns
.preheader.preheader:10  %tmp_4_1 = icmp ugt i8 %input_V_read_2, %input_V_read_3

ST_39: tmp_5_1 [1/1] 1.37ns
.preheader.preheader:11  %tmp_5_1 = select i1 %tmp_4_1, i8 %input_V_read_2, i8 %input_V_read_3

ST_39: tmp_1_2 [1/1] 2.00ns
.preheader.preheader:61  %tmp_1_2 = icmp ugt i8 %tmp_6, %tmp_8

ST_39: temp3_1 [1/1] 1.37ns
.preheader.preheader:62  %temp3_1 = select i1 %tmp_1_2, i8 %tmp_6, i8 %tmp_8

ST_39: tmp_9_1 [1/1] 2.00ns
.preheader.preheader:63  %tmp_9_1 = icmp ugt i8 %tmp_5_1, %temp3_1

ST_39: tmp_9 [1/1] 1.37ns
.preheader.preheader:64  %tmp_9 = select i1 %tmp_9_1, i8 %tmp_5_1, i8 %temp3_1

ST_39: stg_108 [1/1] 0.00ns
.preheader.preheader:65  call void @_ssdm_op_Write.axis.volatile.i8P(i8* %output_V, i8 %tmp_9)

ST_39: tmp_29 [1/1] 0.00ns
.preheader.preheader:95  %tmp_29 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 40>: 6.74ns
ST_40: tmp_4_2 [1/1] 2.00ns
.preheader.preheader:14  %tmp_4_2 = icmp ugt i8 %input_V_read_4, %input_V_read_5

ST_40: tmp_5_2 [1/1] 1.37ns
.preheader.preheader:15  %tmp_5_2 = select i1 %tmp_4_2, i8 %input_V_read_4, i8 %input_V_read_5

ST_40: tmp_2_3 [1/1] 2.00ns
.preheader.preheader:68  %tmp_2_3 = icmp ugt i8 %tmp_10, %tmp_21

ST_40: temp3_s [1/1] 1.37ns
.preheader.preheader:69  %temp3_s = select i1 %tmp_2_3, i8 %tmp_10, i8 %tmp_21

ST_40: tmp_9_2 [1/1] 2.00ns
.preheader.preheader:70  %tmp_9_2 = icmp ugt i8 %tmp_5_2, %temp3_s

ST_40: tmp_11 [1/1] 1.37ns
.preheader.preheader:71  %tmp_11 = select i1 %tmp_9_2, i8 %tmp_5_2, i8 %temp3_s

ST_40: stg_116 [1/1] 0.00ns
.preheader.preheader:72  call void @_ssdm_op_Write.axis.volatile.i8P(i8* %output_V, i8 %tmp_11)

ST_40: tmp_30 [1/1] 0.00ns
.preheader.preheader:101  %tmp_30 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 41>: 6.74ns
ST_41: tmp_4_3 [1/1] 2.00ns
.preheader.preheader:18  %tmp_4_3 = icmp ugt i8 %input_V_read_6, %input_V_read_7

ST_41: tmp_5_3 [1/1] 1.37ns
.preheader.preheader:19  %tmp_5_3 = select i1 %tmp_4_3, i8 %input_V_read_6, i8 %input_V_read_7

ST_41: tmp_3_4 [1/1] 2.00ns
.preheader.preheader:75  %tmp_3_4 = icmp ugt i8 %tmp_22, %tmp_23

ST_41: temp3_3 [1/1] 1.37ns
.preheader.preheader:76  %temp3_3 = select i1 %tmp_3_4, i8 %tmp_22, i8 %tmp_23

ST_41: tmp_9_3 [1/1] 2.00ns
.preheader.preheader:77  %tmp_9_3 = icmp ugt i8 %tmp_5_3, %temp3_3

ST_41: tmp_12 [1/1] 1.37ns
.preheader.preheader:78  %tmp_12 = select i1 %tmp_9_3, i8 %tmp_5_3, i8 %temp3_3

ST_41: stg_124 [1/1] 0.00ns
.preheader.preheader:79  call void @_ssdm_op_Write.axis.volatile.i8P(i8* %output_V, i8 %tmp_12)

ST_41: tmp_31 [1/1] 0.00ns
.preheader.preheader:102  %tmp_31 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 42>: 6.74ns
ST_42: tmp_4_4 [1/1] 2.00ns
.preheader.preheader:22  %tmp_4_4 = icmp ugt i8 %input_V_read_8, %input_V_read_9

ST_42: tmp_5_4 [1/1] 1.37ns
.preheader.preheader:23  %tmp_5_4 = select i1 %tmp_4_4, i8 %input_V_read_8, i8 %input_V_read_9

ST_42: tmp_4_11 [1/1] 2.00ns
.preheader.preheader:82  %tmp_4_11 = icmp ugt i8 %tmp_24, %tmp_25

ST_42: temp3_4 [1/1] 1.37ns
.preheader.preheader:83  %temp3_4 = select i1 %tmp_4_11, i8 %tmp_24, i8 %tmp_25

ST_42: tmp_9_4 [1/1] 2.00ns
.preheader.preheader:84  %tmp_9_4 = icmp ugt i8 %tmp_5_4, %temp3_4

ST_42: tmp_13 [1/1] 1.37ns
.preheader.preheader:85  %tmp_13 = select i1 %tmp_9_4, i8 %tmp_5_4, i8 %temp3_4

ST_42: stg_132 [1/1] 0.00ns
.preheader.preheader:86  call void @_ssdm_op_Write.axis.volatile.i8P(i8* %output_V, i8 %tmp_13)

ST_42: tmp_32 [1/1] 0.00ns
.preheader.preheader:108  %tmp_32 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 43>: 6.74ns
ST_43: tmp_4_5 [1/1] 2.00ns
.preheader.preheader:26  %tmp_4_5 = icmp ugt i8 %input_V_read_10, %input_V_read_11

ST_43: tmp_5_5 [1/1] 1.37ns
.preheader.preheader:27  %tmp_5_5 = select i1 %tmp_4_5, i8 %input_V_read_10, i8 %input_V_read_11

ST_43: tmp_5_12 [1/1] 2.00ns
.preheader.preheader:89  %tmp_5_12 = icmp ugt i8 %tmp_26, %tmp_27

ST_43: temp3_5 [1/1] 1.37ns
.preheader.preheader:90  %temp3_5 = select i1 %tmp_5_12, i8 %tmp_26, i8 %tmp_27

ST_43: tmp_9_5 [1/1] 2.00ns
.preheader.preheader:91  %tmp_9_5 = icmp ugt i8 %tmp_5_5, %temp3_5

ST_43: tmp_14 [1/1] 1.37ns
.preheader.preheader:92  %tmp_14 = select i1 %tmp_9_5, i8 %tmp_5_5, i8 %temp3_5

ST_43: stg_140 [1/1] 0.00ns
.preheader.preheader:93  call void @_ssdm_op_Write.axis.volatile.i8P(i8* %output_V, i8 %tmp_14)

ST_43: tmp_33 [1/1] 0.00ns
.preheader.preheader:109  %tmp_33 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 44>: 6.74ns
ST_44: tmp_4_6 [1/1] 2.00ns
.preheader.preheader:30  %tmp_4_6 = icmp ugt i8 %input_V_read_12, %input_V_read_13

ST_44: tmp_5_6 [1/1] 1.37ns
.preheader.preheader:31  %tmp_5_6 = select i1 %tmp_4_6, i8 %input_V_read_12, i8 %input_V_read_13

ST_44: tmp_6_13 [1/1] 2.00ns
.preheader.preheader:96  %tmp_6_13 = icmp ugt i8 %tmp_28, %tmp_29

ST_44: temp3_6 [1/1] 1.37ns
.preheader.preheader:97  %temp3_6 = select i1 %tmp_6_13, i8 %tmp_28, i8 %tmp_29

ST_44: tmp_9_6 [1/1] 2.00ns
.preheader.preheader:98  %tmp_9_6 = icmp ugt i8 %tmp_5_6, %temp3_6

ST_44: tmp_15 [1/1] 1.37ns
.preheader.preheader:99  %tmp_15 = select i1 %tmp_9_6, i8 %tmp_5_6, i8 %temp3_6

ST_44: stg_148 [1/1] 0.00ns
.preheader.preheader:100  call void @_ssdm_op_Write.axis.volatile.i8P(i8* %output_V, i8 %tmp_15)

ST_44: tmp_34 [1/1] 0.00ns
.preheader.preheader:115  %tmp_34 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 45>: 6.74ns
ST_45: tmp_4_7 [1/1] 2.00ns
.preheader.preheader:34  %tmp_4_7 = icmp ugt i8 %input_V_read_14, %input_V_read_15

ST_45: tmp_5_7 [1/1] 1.37ns
.preheader.preheader:35  %tmp_5_7 = select i1 %tmp_4_7, i8 %input_V_read_14, i8 %input_V_read_15

ST_45: tmp_7_14 [1/1] 2.00ns
.preheader.preheader:103  %tmp_7_14 = icmp ugt i8 %tmp_30, %tmp_31

ST_45: temp3_7 [1/1] 1.37ns
.preheader.preheader:104  %temp3_7 = select i1 %tmp_7_14, i8 %tmp_30, i8 %tmp_31

ST_45: tmp_9_7 [1/1] 2.00ns
.preheader.preheader:105  %tmp_9_7 = icmp ugt i8 %tmp_5_7, %temp3_7

ST_45: tmp_16 [1/1] 1.37ns
.preheader.preheader:106  %tmp_16 = select i1 %tmp_9_7, i8 %tmp_5_7, i8 %temp3_7

ST_45: stg_156 [1/1] 0.00ns
.preheader.preheader:107  call void @_ssdm_op_Write.axis.volatile.i8P(i8* %output_V, i8 %tmp_16)

ST_45: tmp_35 [1/1] 0.00ns
.preheader.preheader:116  %tmp_35 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 46>: 6.74ns
ST_46: tmp_4_8 [1/1] 2.00ns
.preheader.preheader:38  %tmp_4_8 = icmp ugt i8 %input_V_read_16, %input_V_read_17

ST_46: tmp_5_8 [1/1] 1.37ns
.preheader.preheader:39  %tmp_5_8 = select i1 %tmp_4_8, i8 %input_V_read_16, i8 %input_V_read_17

ST_46: tmp_8_15 [1/1] 2.00ns
.preheader.preheader:110  %tmp_8_15 = icmp ugt i8 %tmp_32, %tmp_33

ST_46: temp3_8 [1/1] 1.37ns
.preheader.preheader:111  %temp3_8 = select i1 %tmp_8_15, i8 %tmp_32, i8 %tmp_33

ST_46: tmp_9_8 [1/1] 2.00ns
.preheader.preheader:112  %tmp_9_8 = icmp ugt i8 %tmp_5_8, %temp3_8

ST_46: tmp_17 [1/1] 1.37ns
.preheader.preheader:113  %tmp_17 = select i1 %tmp_9_8, i8 %tmp_5_8, i8 %temp3_8

ST_46: stg_164 [1/1] 0.00ns
.preheader.preheader:114  call void @_ssdm_op_Write.axis.volatile.i8P(i8* %output_V, i8 %tmp_17)

ST_46: tmp_36 [1/1] 0.00ns
.preheader.preheader:122  %tmp_36 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 47>: 6.74ns
ST_47: tmp_4_9 [1/1] 2.00ns
.preheader.preheader:42  %tmp_4_9 = icmp ugt i8 %input_V_read_18, %input_V_read_19

ST_47: tmp_5_9 [1/1] 1.37ns
.preheader.preheader:43  %tmp_5_9 = select i1 %tmp_4_9, i8 %input_V_read_18, i8 %input_V_read_19

ST_47: tmp_9_16 [1/1] 2.00ns
.preheader.preheader:117  %tmp_9_16 = icmp ugt i8 %tmp_34, %tmp_35

ST_47: temp3_9 [1/1] 1.37ns
.preheader.preheader:118  %temp3_9 = select i1 %tmp_9_16, i8 %tmp_34, i8 %tmp_35

ST_47: tmp_9_9 [1/1] 2.00ns
.preheader.preheader:119  %tmp_9_9 = icmp ugt i8 %tmp_5_9, %temp3_9

ST_47: tmp_18 [1/1] 1.37ns
.preheader.preheader:120  %tmp_18 = select i1 %tmp_9_9, i8 %tmp_5_9, i8 %temp3_9

ST_47: stg_172 [1/1] 0.00ns
.preheader.preheader:121  call void @_ssdm_op_Write.axis.volatile.i8P(i8* %output_V, i8 %tmp_18)

ST_47: tmp_37 [1/1] 0.00ns
.preheader.preheader:123  %tmp_37 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 48>: 6.74ns
ST_48: tmp_4_s [1/1] 2.00ns
.preheader.preheader:46  %tmp_4_s = icmp ugt i8 %input_V_read_20, %input_V_read_21

ST_48: tmp_5_s [1/1] 1.37ns
.preheader.preheader:47  %tmp_5_s = select i1 %tmp_4_s, i8 %input_V_read_20, i8 %input_V_read_21

ST_48: tmp_s_17 [1/1] 2.00ns
.preheader.preheader:124  %tmp_s_17 = icmp ugt i8 %tmp_36, %tmp_37

ST_48: temp3_2 [1/1] 1.37ns
.preheader.preheader:125  %temp3_2 = select i1 %tmp_s_17, i8 %tmp_36, i8 %tmp_37

ST_48: tmp_9_s [1/1] 2.00ns
.preheader.preheader:126  %tmp_9_s = icmp ugt i8 %tmp_5_s, %temp3_2

ST_48: tmp_19 [1/1] 1.37ns
.preheader.preheader:127  %tmp_19 = select i1 %tmp_9_s, i8 %tmp_5_s, i8 %temp3_2

ST_48: stg_180 [1/1] 0.00ns
.preheader.preheader:128  call void @_ssdm_op_Write.axis.volatile.i8P(i8* %output_V, i8 %tmp_19)

ST_48: tmp_38 [1/1] 0.00ns
.preheader.preheader:129  %tmp_38 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)


 <State 49>: 6.74ns
ST_49: empty [1/1] 0.00ns
.preheader.preheader:0  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 12, i64 12, i64 12)

ST_49: stg_183 [1/1] 0.00ns
.preheader.preheader:1  call void (...)* @_ssdm_op_SpecLoopName([5 x i8]* @p_str4) nounwind

ST_49: tmp_4 [1/1] 0.00ns
.preheader.preheader:2  %tmp_4 = call i32 (...)* @_ssdm_op_SpecRegionBegin([5 x i8]* @p_str4)

ST_49: stg_185 [1/1] 0.00ns
.preheader.preheader:3  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind

ST_49: tmp_4_10 [1/1] 2.00ns
.preheader.preheader:50  %tmp_4_10 = icmp ugt i8 %input_V_read_22, %input_V_read_23

ST_49: tmp_5_10 [1/1] 1.37ns
.preheader.preheader:51  %tmp_5_10 = select i1 %tmp_4_10, i8 %input_V_read_22, i8 %input_V_read_23

ST_49: tmp_39 [1/1] 0.00ns
.preheader.preheader:130  %tmp_39 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %input_V)

ST_49: tmp_10_18 [1/1] 2.00ns
.preheader.preheader:131  %tmp_10_18 = icmp ugt i8 %tmp_38, %tmp_39

ST_49: temp3_10 [1/1] 1.37ns
.preheader.preheader:132  %temp3_10 = select i1 %tmp_10_18, i8 %tmp_38, i8 %tmp_39

ST_49: tmp_9_10 [1/1] 2.00ns
.preheader.preheader:133  %tmp_9_10 = icmp ugt i8 %tmp_5_10, %temp3_10

ST_49: tmp_20 [1/1] 1.37ns
.preheader.preheader:134  %tmp_20 = select i1 %tmp_9_10, i8 %tmp_5_10, i8 %temp3_10

ST_49: stg_193 [1/1] 0.00ns
.preheader.preheader:135  call void @_ssdm_op_Write.axis.volatile.i8P(i8* %output_V, i8 %tmp_20)

ST_49: empty_19 [1/1] 0.00ns
.preheader.preheader:136  %empty_19 = call i32 (...)* @_ssdm_op_SpecRegionEnd([5 x i8]* @p_str4, i32 %tmp_4)

ST_49: stg_195 [1/1] 0.00ns
.preheader.preheader:137  br label %.preheader13


 <State 50>: 0.00ns
ST_50: stg_196 [1/1] 0.00ns
.exitStub:0  ret void



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
