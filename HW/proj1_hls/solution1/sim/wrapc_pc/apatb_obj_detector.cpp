// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "A"
#define AUTOTB_TVIN_A  "../tv/cdatafile/c.obj_detector.autotvin_A.dat"
// wrapc file define: "W0"
#define AUTOTB_TVIN_W0  "../tv/cdatafile/c.obj_detector.autotvin_W0.dat"
// wrapc file define: "W1"
#define AUTOTB_TVIN_W1  "../tv/cdatafile/c.obj_detector.autotvin_W1.dat"
// wrapc file define: "res"
#define AUTOTB_TVOUT_res  "../tv/cdatafile/c.obj_detector.autotvout_res.dat"
#define AUTOTB_TVIN_res  "../tv/cdatafile/c.obj_detector.autotvin_res.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "res"
#define AUTOTB_TVOUT_PC_res  "../tv/rtldatafile/rtl.obj_detector.autotvout_res.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			A_depth = 0;
			W0_depth = 0;
			W1_depth = 0;
			res_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{A " << A_depth << "}\n";
			total_list << "{W0 " << W0_depth << "}\n";
			total_list << "{W1 " << W1_depth << "}\n";
			total_list << "{res " << res_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int A_depth;
		int W0_depth;
		int W1_depth;
		int res_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};


#define obj_detector AESL_ORIG_DUT_obj_detector
extern void obj_detector ( float A[28][28],  float W0[6][5][5],  float W1[2][864],  float res[2]);
#undef obj_detector

void obj_detector ( float A[28][28],  float W0[6][5][5],  float W1[2][864],  float res[2])
{
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "res"
		aesl_fh.read(AUTOTB_TVOUT_PC_res, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_res, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_res, AESL_token); // data

			sc_bv<32> *res_pc_buffer = new sc_bv<32>[2];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'res', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'res', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					res_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_res, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_res))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: res
				{
					// bitslice(31, 0)
					// {
						// celement: res(31, 0)
						// {
							sc_lv<32>* res_lv0_0_1_1 = new sc_lv<32>[2];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: res(31, 0)
						{
							// carray: (0) => (1) @ (1)
							for (int i_0 = 0; i_0 <= 1; i_0 += 1)
							{
								if (&(res[0]) != NULL) // check the null address if the c port is array or others
								{
									res_lv0_0_1_1[hls_map_index++].range(31, 0) = sc_bv<32>(res_pc_buffer[hls_map_index].range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: res(31, 0)
						{
							// carray: (0) => (1) @ (1)
							for (int i_0 = 0; i_0 <= 1; i_0 += 1)
							{
								if (&(res[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&res[i_0] = (res_lv0_0_1_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] res_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "A"
		char* tvin_A = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A);

		// "W0"
		char* tvin_W0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_W0);

		// "W1"
		char* tvin_W1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_W1);

		// "res"
		char* tvin_res = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_res);
		char* tvout_res = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_res);

		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_A, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A, tvin_A);

		sc_bv<32>* A_tvin_wrapc_buffer = new sc_bv<32>[784];

		// RTL Name: A
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (27) @ (1)
					for (int i_0 = 0; i_0 <= 27; i_0 += 1)
					{
						// carray: (0) => (27) @ (1)
						for (int i_1 = 0; i_1 <= 27; i_1 += 1)
						{
							if (&(A[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> A_tmp_mem;
								A_tmp_mem = *(int*)&A[i_0][i_1];
								A_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = A_tmp_mem.range(31, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 784; i++)
		{
			sprintf(tvin_A, "%s\n", (A_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A, tvin_A);
		}

		tcl_file.set_num(784, &tcl_file.A_depth);
		sprintf(tvin_A, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A, tvin_A);

		// release memory allocation
		delete [] A_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_W0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_W0, tvin_W0);

		sc_bv<32>* W0_tvin_wrapc_buffer = new sc_bv<32>[150];

		// RTL Name: W0
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: W0(31, 0)
				{
					// carray: (0) => (5) @ (1)
					for (int i_0 = 0; i_0 <= 5; i_0 += 1)
					{
						// carray: (0) => (4) @ (1)
						for (int i_1 = 0; i_1 <= 4; i_1 += 1)
						{
							// carray: (0) => (4) @ (1)
							for (int i_2 = 0; i_2 <= 4; i_2 += 1)
							{
								if (&(W0[0][0][0]) != NULL) // check the null address if the c port is array or others
								{
									sc_lv<32> W0_tmp_mem;
									W0_tmp_mem = *(int*)&W0[i_0][i_1][i_2];
									W0_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = W0_tmp_mem.range(31, 0);
								}
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 150; i++)
		{
			sprintf(tvin_W0, "%s\n", (W0_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_W0, tvin_W0);
		}

		tcl_file.set_num(150, &tcl_file.W0_depth);
		sprintf(tvin_W0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_W0, tvin_W0);

		// release memory allocation
		delete [] W0_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_W1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_W1, tvin_W1);

		sc_bv<32>* W1_tvin_wrapc_buffer = new sc_bv<32>[1728];

		// RTL Name: W1
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: W1(31, 0)
				{
					// carray: (0) => (1) @ (1)
					for (int i_0 = 0; i_0 <= 1; i_0 += 1)
					{
						// carray: (0) => (863) @ (1)
						for (int i_1 = 0; i_1 <= 863; i_1 += 1)
						{
							if (&(W1[0][0]) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> W1_tmp_mem;
								W1_tmp_mem = *(int*)&W1[i_0][i_1];
								W1_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = W1_tmp_mem.range(31, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1728; i++)
		{
			sprintf(tvin_W1, "%s\n", (W1_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_W1, tvin_W1);
		}

		tcl_file.set_num(1728, &tcl_file.W1_depth);
		sprintf(tvin_W1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_W1, tvin_W1);

		// release memory allocation
		delete [] W1_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_res, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_res, tvin_res);

		sc_bv<32>* res_tvin_wrapc_buffer = new sc_bv<32>[2];

		// RTL Name: res
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: res(31, 0)
				{
					// carray: (0) => (1) @ (1)
					for (int i_0 = 0; i_0 <= 1; i_0 += 1)
					{
						if (&(res[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> res_tmp_mem;
							res_tmp_mem = *(int*)&res[i_0];
							res_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = res_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2; i++)
		{
			sprintf(tvin_res, "%s\n", (res_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_res, tvin_res);
		}

		tcl_file.set_num(2, &tcl_file.res_depth);
		sprintf(tvin_res, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_res, tvin_res);

		// release memory allocation
		delete [] res_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		AESL_ORIG_DUT_obj_detector(A, W0, W1, res);


		// [[transaction]]
		sprintf(tvout_res, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_res, tvout_res);

		sc_bv<32>* res_tvout_wrapc_buffer = new sc_bv<32>[2];

		// RTL Name: res
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: res(31, 0)
				{
					// carray: (0) => (1) @ (1)
					for (int i_0 = 0; i_0 <= 1; i_0 += 1)
					{
						if (&(res[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> res_tmp_mem;
							res_tmp_mem = *(int*)&res[i_0];
							res_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = res_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2; i++)
		{
			sprintf(tvout_res, "%s\n", (res_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_res, tvout_res);
		}

		tcl_file.set_num(2, &tcl_file.res_depth);
		sprintf(tvout_res, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_res, tvout_res);

		// release memory allocation
		delete [] res_tvout_wrapc_buffer;

		// release memory allocation: "A"
		delete [] tvin_A;
		// release memory allocation: "W0"
		delete [] tvin_W0;
		// release memory allocation: "W1"
		delete [] tvin_W1;
		// release memory allocation: "res"
		delete [] tvout_res;
		delete [] tvin_res;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

