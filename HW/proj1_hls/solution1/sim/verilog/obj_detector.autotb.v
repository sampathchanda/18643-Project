// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      obj_detector
`define AUTOTB_DUT_INST AESL_inst_obj_detector
`define AUTOTB_TOP      apatb_obj_detector_top
`define AUTOTB_LAT_RESULT_FILE "obj_detector.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "obj_detector.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_obj_detector_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_TRANSACTION_NUM  1
`define AUTOTB_CLOCK_PERIOD 10.000000
`define LENGTH_A 784
`define LENGTH_W0 150
`define LENGTH_W1 1728
`define LENGTH_res 2

`define	AESL_BRAM_A AESL_autobram_A
`define	AESL_BRAM_INST_A bram_inst_A
`define	AESL_BRAM_W0 AESL_autobram_W0
`define	AESL_BRAM_INST_W0 bram_inst_W0
`define	AESL_BRAM_W1 AESL_autobram_W1
`define	AESL_BRAM_INST_W1 bram_inst_W1
`define	AESL_BRAM_res AESL_autobram_res
`define	AESL_BRAM_INST_res bram_inst_res
`define AUTOTB_TVIN_A  "../tv/cdatafile/c.obj_detector.autotvin_A.dat"
`define AUTOTB_TVIN_W0  "../tv/cdatafile/c.obj_detector.autotvin_W0.dat"
`define AUTOTB_TVIN_W1  "../tv/cdatafile/c.obj_detector.autotvin_W1.dat"
`define AUTOTB_TVIN_res  "../tv/cdatafile/c.obj_detector.autotvin_res.dat"
`define AUTOTB_TVIN_A_out_wrapc  "../tv/rtldatafile/rtl.obj_detector.autotvin_A.dat"
`define AUTOTB_TVIN_W0_out_wrapc  "../tv/rtldatafile/rtl.obj_detector.autotvin_W0.dat"
`define AUTOTB_TVIN_W1_out_wrapc  "../tv/rtldatafile/rtl.obj_detector.autotvin_W1.dat"
`define AUTOTB_TVIN_res_out_wrapc  "../tv/rtldatafile/rtl.obj_detector.autotvin_res.dat"
`define AUTOTB_TVOUT_res  "../tv/cdatafile/c.obj_detector.autotvout_res.dat"
`define AUTOTB_TVOUT_res_out_wrapc  "../tv/rtldatafile/rtl.obj_detector.autotvout_res.dat"

module `AUTOTB_TOP;
task read_token;
    input integer fp;
    output reg [191 : 0] token;
    reg [7:0] c;
    reg intoken;
    reg done;
    begin
        token = "";
        intoken = 0;
        done = 0;
        while (!done) begin
            c = $fgetc(fp);
            if (c == 8'hff) begin   // EOF
                done = 1;
            end
            else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
                if (intoken) begin
                    done = 1;
                end
            end
            else begin              // valid character
                intoken = 1;
                token = (token << 8) | c;
            end
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
reg [31 : 0] AESL_mLatCnterIn [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterIn_addr;
reg [31 : 0] AESL_mLatCnterOut [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterOut_addr ;
reg [31 : 0] AESL_clk_counter ;
reg [17 - 1 : 0] AESL_clk_ready[0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [17 - 1 : 0] AESL_clk_done[0 : `AUTOTB_TRANSACTION_NUM + 1];

reg reported_stuck = 0;
reg reported_stuck_cnt = 0;
wire  s_axi_control_AWVALID;
wire  s_axi_control_AWREADY;
wire [4 : 0] s_axi_control_AWADDR;
wire  s_axi_control_WVALID;
wire  s_axi_control_WREADY;
wire [31 : 0] s_axi_control_WDATA;
wire [3 : 0] s_axi_control_WSTRB;
wire  s_axi_control_ARVALID;
wire  s_axi_control_ARREADY;
wire [4 : 0] s_axi_control_ARADDR;
wire  s_axi_control_RVALID;
wire  s_axi_control_RREADY;
wire [31 : 0] s_axi_control_RDATA;
wire [1 : 0] s_axi_control_RRESP;
wire  s_axi_control_BVALID;
wire  s_axi_control_BREADY;
wire [1 : 0] s_axi_control_BRESP;
wire ap_clk;
wire ap_rst_n;
wire [31 : 0] A_Addr_A;
wire  A_EN_A;
wire [3 : 0] A_WEN_A;
wire [31 : 0] A_Din_A;
wire [31 : 0] A_Dout_A;
wire  A_Clk_A;
wire  A_Rst_A;
wire [31 : 0] W0_Addr_A;
wire  W0_EN_A;
wire [3 : 0] W0_WEN_A;
wire [31 : 0] W0_Din_A;
wire [31 : 0] W0_Dout_A;
wire  W0_Clk_A;
wire  W0_Rst_A;
wire [31 : 0] W1_Addr_A;
wire  W1_EN_A;
wire [3 : 0] W1_WEN_A;
wire [31 : 0] W1_Din_A;
wire [31 : 0] W1_Dout_A;
wire  W1_Clk_A;
wire  W1_Rst_A;
wire [31 : 0] res_Addr_A;
wire  res_EN_A;
wire [3 : 0] res_WEN_A;
wire [31 : 0] res_Din_A;
wire [31 : 0] res_Dout_A;
wire  res_Clk_A;
wire  res_Rst_A;
wire  interrupt;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;
wire AESL_slave_start;
wire AESL_slave_write_start_in;
wire AESL_slave_write_start_finish;
reg AESL_slave_ready;
wire AESL_slave_output_done;
reg ready_rise = 0;
reg start_rise = 0;
reg slave_start_status = 0;
reg slave_done_status = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
.s_axi_control_AWVALID(s_axi_control_AWVALID),
.s_axi_control_AWREADY(s_axi_control_AWREADY),
.s_axi_control_AWADDR(s_axi_control_AWADDR),
.s_axi_control_WVALID(s_axi_control_WVALID),
.s_axi_control_WREADY(s_axi_control_WREADY),
.s_axi_control_WDATA(s_axi_control_WDATA),
.s_axi_control_WSTRB(s_axi_control_WSTRB),
.s_axi_control_ARVALID(s_axi_control_ARVALID),
.s_axi_control_ARREADY(s_axi_control_ARREADY),
.s_axi_control_ARADDR(s_axi_control_ARADDR),
.s_axi_control_RVALID(s_axi_control_RVALID),
.s_axi_control_RREADY(s_axi_control_RREADY),
.s_axi_control_RDATA(s_axi_control_RDATA),
.s_axi_control_RRESP(s_axi_control_RRESP),
.s_axi_control_BVALID(s_axi_control_BVALID),
.s_axi_control_BREADY(s_axi_control_BREADY),
.s_axi_control_BRESP(s_axi_control_BRESP),
.ap_clk(ap_clk),
.ap_rst_n(ap_rst_n),
.A_Addr_A(A_Addr_A),
.A_EN_A(A_EN_A),
.A_WEN_A(A_WEN_A),
.A_Din_A(A_Din_A),
.A_Dout_A(A_Dout_A),
.A_Clk_A(A_Clk_A),
.A_Rst_A(A_Rst_A),
.W0_Addr_A(W0_Addr_A),
.W0_EN_A(W0_EN_A),
.W0_WEN_A(W0_WEN_A),
.W0_Din_A(W0_Din_A),
.W0_Dout_A(W0_Dout_A),
.W0_Clk_A(W0_Clk_A),
.W0_Rst_A(W0_Rst_A),
.W1_Addr_A(W1_Addr_A),
.W1_EN_A(W1_EN_A),
.W1_WEN_A(W1_WEN_A),
.W1_Din_A(W1_Din_A),
.W1_Dout_A(W1_Dout_A),
.W1_Clk_A(W1_Clk_A),
.W1_Rst_A(W1_Rst_A),
.res_Addr_A(res_Addr_A),
.res_EN_A(res_EN_A),
.res_WEN_A(res_WEN_A),
.res_Din_A(res_Din_A),
.res_Dout_A(res_Dout_A),
.res_Clk_A(res_Clk_A),
.res_Rst_A(res_Rst_A),
.interrupt(interrupt)
);

// Assignment for control signal
  assign ap_clk = AESL_clock;
  assign ap_rst_n = AESL_reset;
  assign ap_rst_n_n = ~AESL_reset;
  assign AESL_reset = rst;
  assign AESL_start = start;
  assign AESL_ce = ce;
  assign AESL_continue = continue;
  assign AESL_slave_write_start_in = slave_start_status ;
  assign AESL_slave_start = AESL_slave_write_start_finish;
  assign AESL_done = slave_done_status ;

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        slave_start_status <= 1;
    end
    else begin
        if (AESL_start == 1 ) begin
            start_rise = 1;
        end
        if (start_rise == 1 && AESL_done == 1 ) begin
            slave_start_status <= 1;
        end
        if (AESL_slave_write_start_in == 1) begin 
            slave_start_status <= 0;
            start_rise = 0;
        end
    end
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        AESL_slave_ready <= 0;
        ready_rise = 0;
    end
    else begin
        if (AESL_ready == 1 ) begin
            ready_rise = 1;
        end
        if (ready_rise == 1 && AESL_done_delay == 1 ) begin
            AESL_slave_ready <= 1;
        end
        if (AESL_slave_ready == 1) begin 
            AESL_slave_ready <= 0;
            ready_rise = 0;
        end
    end
end

always @ (posedge AESL_clock)
begin
    if (AESL_done == 1) begin
        slave_done_status <= 0;
    end
    else if (AESL_slave_output_done == 1 ) begin
        slave_done_status <= 1;
    end
end
//------------------------bramA Instantiation--------------

// The input and output of bramA
wire  bramA_Clk_A, bramA_Clk_B;
wire  bramA_EN_A, bramA_EN_B;
wire  [4 - 1 : 0] bramA_WEN_A, bramA_WEN_B;
wire    [31 : 0]	bramA_Addr_A, bramA_Addr_B;
wire	[31 : 0]	bramA_Din_A, bramA_Din_B;
wire    [31 : 0]	bramA_Dout_A, bramA_Dout_B;
wire	bramA_ready;
wire	bramA_done;

`AESL_BRAM_A `AESL_BRAM_INST_A(
    .Clk_A    (bramA_Clk_A),
    .Rst_A    (bramA_Rst_A),
    .EN_A     (bramA_EN_A),
    .WEN_A    (bramA_WEN_A),
    .Addr_A   (bramA_Addr_A),
    .Din_A    (bramA_Din_A),
    .Dout_A   (bramA_Dout_A),
    .Clk_B    (bramA_Clk_B),
    .Rst_B    (bramA_Rst_B),
    .EN_B     (bramA_EN_B),
    .WEN_B    (bramA_WEN_B),
    .Addr_B   (bramA_Addr_B),
    .Din_B    (bramA_Din_B),
    .Dout_B   (bramA_Dout_B),
    .ready	(bramA_ready),
    .done	    (bramA_done)
);

// Assignment between dut and bramA
assign bramA_Clk_A = A_Clk_A;
assign bramA_Rst_A = A_Rst_A;
assign bramA_Addr_A = A_Addr_A;
assign bramA_EN_A = A_EN_A;
assign A_Dout_A = bramA_Dout_A;
assign bramA_WEN_A = 0;
assign bramA_Din_A = 0;
assign bramA_ready=	ready;
assign bramA_done = 0;


//------------------------bramW0 Instantiation--------------

// The input and output of bramW0
wire  bramW0_Clk_A, bramW0_Clk_B;
wire  bramW0_EN_A, bramW0_EN_B;
wire  [4 - 1 : 0] bramW0_WEN_A, bramW0_WEN_B;
wire    [31 : 0]	bramW0_Addr_A, bramW0_Addr_B;
wire	[31 : 0]	bramW0_Din_A, bramW0_Din_B;
wire    [31 : 0]	bramW0_Dout_A, bramW0_Dout_B;
wire	bramW0_ready;
wire	bramW0_done;

`AESL_BRAM_W0 `AESL_BRAM_INST_W0(
    .Clk_A    (bramW0_Clk_A),
    .Rst_A    (bramW0_Rst_A),
    .EN_A     (bramW0_EN_A),
    .WEN_A    (bramW0_WEN_A),
    .Addr_A   (bramW0_Addr_A),
    .Din_A    (bramW0_Din_A),
    .Dout_A   (bramW0_Dout_A),
    .Clk_B    (bramW0_Clk_B),
    .Rst_B    (bramW0_Rst_B),
    .EN_B     (bramW0_EN_B),
    .WEN_B    (bramW0_WEN_B),
    .Addr_B   (bramW0_Addr_B),
    .Din_B    (bramW0_Din_B),
    .Dout_B   (bramW0_Dout_B),
    .ready	(bramW0_ready),
    .done	    (bramW0_done)
);

// Assignment between dut and bramW0
assign bramW0_Clk_A = W0_Clk_A;
assign bramW0_Rst_A = W0_Rst_A;
assign bramW0_Addr_A = W0_Addr_A;
assign bramW0_EN_A = W0_EN_A;
assign W0_Dout_A = bramW0_Dout_A;
assign bramW0_WEN_A = 0;
assign bramW0_Din_A = 0;
assign bramW0_ready=	ready;
assign bramW0_done = 0;


//------------------------bramW1 Instantiation--------------

// The input and output of bramW1
wire  bramW1_Clk_A, bramW1_Clk_B;
wire  bramW1_EN_A, bramW1_EN_B;
wire  [4 - 1 : 0] bramW1_WEN_A, bramW1_WEN_B;
wire    [31 : 0]	bramW1_Addr_A, bramW1_Addr_B;
wire	[31 : 0]	bramW1_Din_A, bramW1_Din_B;
wire    [31 : 0]	bramW1_Dout_A, bramW1_Dout_B;
wire	bramW1_ready;
wire	bramW1_done;

`AESL_BRAM_W1 `AESL_BRAM_INST_W1(
    .Clk_A    (bramW1_Clk_A),
    .Rst_A    (bramW1_Rst_A),
    .EN_A     (bramW1_EN_A),
    .WEN_A    (bramW1_WEN_A),
    .Addr_A   (bramW1_Addr_A),
    .Din_A    (bramW1_Din_A),
    .Dout_A   (bramW1_Dout_A),
    .Clk_B    (bramW1_Clk_B),
    .Rst_B    (bramW1_Rst_B),
    .EN_B     (bramW1_EN_B),
    .WEN_B    (bramW1_WEN_B),
    .Addr_B   (bramW1_Addr_B),
    .Din_B    (bramW1_Din_B),
    .Dout_B   (bramW1_Dout_B),
    .ready	(bramW1_ready),
    .done	    (bramW1_done)
);

// Assignment between dut and bramW1
assign bramW1_Clk_A = W1_Clk_A;
assign bramW1_Rst_A = W1_Rst_A;
assign bramW1_Addr_A = W1_Addr_A;
assign bramW1_EN_A = W1_EN_A;
assign W1_Dout_A = bramW1_Dout_A;
assign bramW1_WEN_A = 0;
assign bramW1_Din_A = 0;
assign bramW1_WEN_B = 0;
assign bramW1_Din_B = 0;
assign bramW1_ready=	ready;
assign bramW1_done = 0;


//------------------------bramres Instantiation--------------

// The input and output of bramres
wire  bramres_Clk_A, bramres_Clk_B;
wire  bramres_EN_A, bramres_EN_B;
wire  [4 - 1 : 0] bramres_WEN_A, bramres_WEN_B;
wire    [31 : 0]	bramres_Addr_A, bramres_Addr_B;
wire	[31 : 0]	bramres_Din_A, bramres_Din_B;
wire    [31 : 0]	bramres_Dout_A, bramres_Dout_B;
wire	bramres_ready;
wire	bramres_done;

`AESL_BRAM_res `AESL_BRAM_INST_res(
    .Clk_A    (bramres_Clk_A),
    .Rst_A    (bramres_Rst_A),
    .EN_A     (bramres_EN_A),
    .WEN_A    (bramres_WEN_A),
    .Addr_A   (bramres_Addr_A),
    .Din_A    (bramres_Din_A),
    .Dout_A   (bramres_Dout_A),
    .Clk_B    (bramres_Clk_B),
    .Rst_B    (bramres_Rst_B),
    .EN_B     (bramres_EN_B),
    .WEN_B    (bramres_WEN_B),
    .Addr_B   (bramres_Addr_B),
    .Din_B    (bramres_Din_B),
    .Dout_B   (bramres_Dout_B),
    .ready	(bramres_ready),
    .done	    (bramres_done)
);

// Assignment between dut and bramres
assign bramres_Clk_A = res_Clk_A;
assign bramres_Rst_A = res_Rst_A;
assign bramres_Addr_A = res_Addr_A;
assign bramres_EN_A = res_EN_A;
assign bramres_WEN_A = res_WEN_A;
assign bramres_Din_A = res_Din_A;
assign bramres_WEN_B = 0;
assign bramres_Din_B = 0;
assign bramres_ready= ready_initial | bramres_done;
assign bramres_done =	AESL_done_delay;


AESL_axi_slave_control AESL_AXI_SLAVE_control(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_s_axi_control_AWADDR (s_axi_control_AWADDR),
    .TRAN_s_axi_control_AWVALID (s_axi_control_AWVALID),
    .TRAN_s_axi_control_AWREADY (s_axi_control_AWREADY),
    .TRAN_s_axi_control_WVALID (s_axi_control_WVALID),
    .TRAN_s_axi_control_WREADY (s_axi_control_WREADY),
    .TRAN_s_axi_control_WDATA (s_axi_control_WDATA),
    .TRAN_s_axi_control_WSTRB (s_axi_control_WSTRB),
    .TRAN_s_axi_control_ARADDR (s_axi_control_ARADDR),
    .TRAN_s_axi_control_ARVALID (s_axi_control_ARVALID),
    .TRAN_s_axi_control_ARREADY (s_axi_control_ARREADY),
    .TRAN_s_axi_control_RVALID (s_axi_control_RVALID),
    .TRAN_s_axi_control_RREADY (s_axi_control_RREADY),
    .TRAN_s_axi_control_RDATA (s_axi_control_RDATA),
    .TRAN_s_axi_control_RRESP (s_axi_control_RRESP),
    .TRAN_s_axi_control_BVALID (s_axi_control_BVALID),
    .TRAN_s_axi_control_BREADY (s_axi_control_BREADY),
    .TRAN_s_axi_control_BRESP (s_axi_control_BRESP),
    .TRAN_control_ready_out (AESL_ready),
    .TRAN_control_ready_in (AESL_slave_ready),
    .TRAN_control_done_out (AESL_slave_output_done),
    .TRAN_control_idle_out (AESL_idle),
    .TRAN_control_write_start_in     (AESL_slave_write_start_in),
    .TRAN_control_write_start_finish (AESL_slave_write_start_finish),
    .TRAN_control_transaction_done_in (AESL_done_delay),
    .TRAN_control_interrupt  (interrupt),
    .TRAN_control_start_in  (AESL_slave_start)
);

initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 1);
    while(AESL_ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_ready_cnt_proc
    ready_cnt = 0;
    wait(AESL_reset === 1);
    while(ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        ready_cnt = ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_done_cnt_proc
    done_cnt = 0;
    wait(AESL_reset === 1);
    while(done_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_done !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        done_cnt = done_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
    @(posedge AESL_clock);
    # 0.4;
    $finish;
end

initial fork
    AESL_clock = 0;
    forever #(`AUTOTB_CLOCK_PERIOD/2) AESL_clock = ~AESL_clock;
join

initial begin : initial_process
    integer rand;
    rst = 0;
    # 100;
	  repeat(3) @(posedge AESL_clock);
    rst = 1;
end

initial begin : start_process
  integer rand;
  start = 0;
  ce = 1;
    wait(AESL_reset === 1);
  @(posedge AESL_clock);
  start <= 1;
  while(ready_cnt != `AUTOTB_TRANSACTION_NUM + 1) begin
      @(posedge AESL_clock);
      if(AESL_ready == 1) begin
          start <= 0;
          start <= 1;
      end
  end
  start <= 0;
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == `AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt != `AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end
// Write "[[[runtime]]]" and "[[[/runtime]]]" for output-only transactor 
initial begin : write_output_transactor_res_runtime_process
    integer fp;
    fp = $fopen(`AUTOTB_TVOUT_res_out_wrapc, "w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_res_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait(done_cnt == `AUTOTB_TRANSACTION_NUM)
	  repeat(2) @(posedge AESL_clock);
    # 0.2;
    fp = $fopen(`AUTOTB_TVOUT_res_out_wrapc, "a");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_res_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end

always @ (negedge AESL_clock) begin
    if(AESL_reset === 0)
    begin
        AESL_clk_counter <= 0;
    end 
    else begin
        AESL_clk_counter = AESL_clk_counter + 1;
    end    
end

always @ (posedge AESL_clock or negedge AESL_reset) begin
    if(AESL_reset === 0)
    begin
        AESL_mLatCnterOut_addr = 0;
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter + 1;
        reported_stuck_cnt <= 0;
    end
    else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter;
        AESL_mLatCnterOut_addr = AESL_mLatCnterOut_addr + 1;
        reported_stuck <= 0;
    end
end

always @ (posedge AESL_clock or negedge AESL_reset) begin
    if(AESL_reset === 0)
    begin
        AESL_mLatCnterIn_addr = 0;
    end
    else if (AESL_slave_write_start_finish && AESL_mLatCnterIn_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
        AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
        AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
    end
end

initial begin : performance_check
	integer transaction_counter;
	integer i;
	integer fp;

	integer latthistime;
	integer lattotal;
	integer latmax;
	integer latmin;


	integer thrthistime;
	integer thrtotal;
	integer thrmax;
	integer thrmin;

	integer lataver;
	integer thraver;
	reg [31 : 0] lat_array [0 : `AUTOTB_TRANSACTION_NUM];
	reg [31 : 0] thr_array [0 : `AUTOTB_TRANSACTION_NUM];


	i = 0;
	lattotal = 0;
	latmax = 0;
	latmin = 32'h 7fffffff;
	lataver = 0;

	thrtotal = 0;
	thrmax = 0;
	thrmin = 32'h 7fffffff;
	thraver = 0;

	@(negedge AESL_clock);
	@(posedge AESL_reset);
	while (done_cnt != `AUTOTB_TRANSACTION_NUM) begin
		@(posedge AESL_clock);
	end

	#0.001

	if (AESL_mLatCnterIn_addr == 0) begin
		latmax  = 0;
		latmin  = 0;
		lataver = 0;
		thrmax  = 0;
		thrmin  = 0;
		thraver = 0;
		lat_array[0] = 0;
		thr_array[0] = 0;
	end else if (AESL_mLatCnterOut_addr == 1 || AESL_mLatCnterOut_addr == 0 ) begin
		latmax  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		latmin  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		lataver = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		thrmax  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		thrmin  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		thraver = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		lat_array[0] = lataver;
		thr_array[0] = thraver;
	end else begin
		// LATENCY
		for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
			latthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i];
			lattotal = lattotal + latthistime;
			lat_array[i] = latthistime;
			if (latthistime > latmax) latmax = latthistime;
			if (latthistime < latmin) latmin = latthistime;
		end
		// II
		for (i = 0; i < AESL_mLatCnterIn_addr - 1; i = i + 1) begin
			thrthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i] ;
			thrtotal = thrtotal + thrthistime;
			thr_array[i] = thrthistime;
			if (thrthistime > thrmax) thrmax = thrthistime;
			if (thrthistime < thrmin) thrmin = thrthistime;
		end

		thr_array[AESL_mLatCnterIn_addr - 1] = 0;
		lataver = lattotal / (AESL_mLatCnterOut_addr);
		thraver = thrtotal / (AESL_mLatCnterIn_addr - 1);
	end

	fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

	$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax);
	$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin);
	$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver);
	$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", latmax);
	$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", latmin);
	$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", lataver);
	$fclose(fp);
	fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");
	$fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
	for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
		$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
	end

	$fclose(fp);
end
endmodule
