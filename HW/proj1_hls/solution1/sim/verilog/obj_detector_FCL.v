// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module obj_detector_FCL (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inp_address0,
        inp_ce0,
        inp_q0,
        W_Addr_A,
        W_EN_A,
        W_WEN_A,
        W_Din_A,
        W_Dout_A,
        W_offset,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 7'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 7'b10;
parameter    ap_ST_pp0_stg1_fsm_2 = 7'b100;
parameter    ap_ST_pp0_stg2_fsm_3 = 7'b1000;
parameter    ap_ST_pp0_stg3_fsm_4 = 7'b10000;
parameter    ap_ST_pp0_stg4_fsm_5 = 7'b100000;
parameter    ap_ST_st12_fsm_6 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv11_360 = 11'b1101100000;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv10_360 = 10'b1101100000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] inp_address0;
output   inp_ce0;
input  [31:0] inp_q0;
output  [31:0] W_Addr_A;
output   W_EN_A;
output  [3:0] W_WEN_A;
output  [31:0] W_Din_A;
input  [31:0] W_Dout_A;
input  [0:0] W_offset;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inp_ce0;
reg W_EN_A;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm = 7'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_25;
reg   [31:0] out_reg_76;
reg   [9:0] i_reg_88;
wire   [10:0] tmp_16_cast_fu_110_p3;
reg   [10:0] tmp_16_cast_reg_149;
wire   [0:0] exitcond_fu_118_p2;
reg   [0:0] exitcond_reg_154;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_62;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_reg_154_pp0_it1;
wire   [9:0] i_5_fu_124_p2;
reg   [9:0] i_5_reg_158;
reg    ap_sig_cseq_ST_pp0_stg1_fsm_2;
reg    ap_sig_bdd_86;
wire   [31:0] grp_fu_104_p2;
reg   [31:0] tmp_s_reg_183;
reg    ap_sig_cseq_ST_pp0_stg4_fsm_5;
reg    ap_sig_bdd_98;
wire   [31:0] grp_fu_99_p2;
reg   [9:0] i_phi_fu_92_p4;
wire   [63:0] tmp_fu_130_p1;
wire   [63:0] tmp_16_fu_144_p1;
wire   [31:0] W_Addr_A_orig;
wire   [31:0] grp_fu_99_p0;
wire   [31:0] grp_fu_99_p1;
wire   [31:0] grp_fu_104_p0;
wire   [31:0] grp_fu_104_p1;
wire   [10:0] tmp_trn_cast_fu_135_p1;
wire   [10:0] p_addr1_fu_139_p2;
wire    grp_fu_99_ce;
wire    grp_fu_104_ce;
reg    ap_sig_cseq_ST_st12_fsm_6;
reg    ap_sig_bdd_163;
reg   [6:0] ap_NS_fsm;


obj_detector_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
obj_detector_fadd_32ns_32ns_32_5_full_dsp_U49(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_99_p0 ),
    .din1( grp_fu_99_p1 ),
    .ce( grp_fu_99_ce ),
    .dout( grp_fu_99_p2 )
);

obj_detector_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
obj_detector_fmul_32ns_32ns_32_4_max_dsp_U50(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_104_p0 ),
    .din1( grp_fu_104_p1 ),
    .ce( grp_fu_104_ce ),
    .dout( grp_fu_104_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_fu_118_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((exitcond_reg_154 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5) & ~(exitcond_reg_154 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_reg_154 == ap_const_lv1_0))) begin
        i_reg_88 <= i_5_reg_158;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_88 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5) & (ap_reg_ppstg_exitcond_reg_154_pp0_it1 == ap_const_lv1_0))) begin
        out_reg_76 <= grp_fu_99_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        out_reg_76 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        ap_reg_ppstg_exitcond_reg_154_pp0_it1 <= exitcond_reg_154;
        exitcond_reg_154 <= exitcond_fu_118_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        i_5_reg_158 <= i_5_fu_124_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        tmp_16_cast_reg_149[6 : 5] <= tmp_16_cast_fu_110_p3[6 : 5];tmp_16_cast_reg_149[9 : 8] <= tmp_16_cast_fu_110_p3[9 : 8];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((exitcond_reg_154 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5))) begin
        tmp_s_reg_183 <= grp_fu_104_p2;
    end
end

/// W_EN_A assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        W_EN_A = ap_const_logic_1;
    end else begin
        W_EN_A = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st12_fsm_6)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_6))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st12_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_6)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_62)
begin
    if (ap_sig_bdd_62) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. ///
always @ (ap_sig_bdd_86)
begin
    if (ap_sig_bdd_86) begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg4_fsm_5 assign process. ///
always @ (ap_sig_bdd_98)
begin
    if (ap_sig_bdd_98) begin
        ap_sig_cseq_ST_pp0_stg4_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg4_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_6 assign process. ///
always @ (ap_sig_bdd_163)
begin
    if (ap_sig_bdd_163) begin
        ap_sig_cseq_ST_st12_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_25)
begin
    if (ap_sig_bdd_25) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// i_phi_fu_92_p4 assign process. ///
always @ (i_reg_88 or exitcond_reg_154 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or i_5_reg_158)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_reg_154 == ap_const_lv1_0))) begin
        i_phi_fu_92_p4 = i_5_reg_158;
    end else begin
        i_phi_fu_92_p4 = i_reg_88;
    end
end

/// inp_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        inp_ce0 = ap_const_logic_1;
    end else begin
        inp_ce0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_118_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_5)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_fu_118_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st12_fsm_6;
            end
        end
        ap_ST_pp0_stg1_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg2_fsm_3;
        end
        ap_ST_pp0_stg2_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg3_fsm_4;
        end
        ap_ST_pp0_stg3_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg4_fsm_5;
        end
        ap_ST_pp0_stg4_fsm_5 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st12_fsm_6;
            end
        end
        ap_ST_st12_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W_Addr_A = W_Addr_A_orig << ap_const_lv32_2;
assign W_Addr_A_orig = tmp_16_fu_144_p1;
assign W_Din_A = ap_const_lv32_0;
assign W_WEN_A = ap_const_lv4_0;
assign ap_return = out_reg_76;

/// ap_sig_bdd_163 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_163 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_25 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_25 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_62 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_62 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_86 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_86 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_98 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_98 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end
assign exitcond_fu_118_p2 = (i_phi_fu_92_p4 == ap_const_lv10_360? 1'b1: 1'b0);
assign grp_fu_104_ce = ap_const_logic_1;
assign grp_fu_104_p0 = inp_q0;
assign grp_fu_104_p1 = W_Dout_A;
assign grp_fu_99_ce = ap_const_logic_1;
assign grp_fu_99_p0 = out_reg_76;
assign grp_fu_99_p1 = tmp_s_reg_183;
assign i_5_fu_124_p2 = (i_phi_fu_92_p4 + ap_const_lv10_1);
assign inp_address0 = tmp_fu_130_p1;
assign p_addr1_fu_139_p2 = (tmp_trn_cast_fu_135_p1 + tmp_16_cast_reg_149);
assign tmp_16_cast_fu_110_p3 = ((W_offset[0:0]===1'b1)? ap_const_lv11_360: ap_const_lv11_0);
assign tmp_16_fu_144_p1 = p_addr1_fu_139_p2;
assign tmp_fu_130_p1 = i_phi_fu_92_p4;
assign tmp_trn_cast_fu_135_p1 = i_phi_fu_92_p4;
always @ (posedge ap_clk)
begin
    tmp_16_cast_reg_149[4:0] <= 5'b00000;
    tmp_16_cast_reg_149[7:7] <= 1'b0;
    tmp_16_cast_reg_149[10] <= 1'b0;
end



endmodule //obj_detector_FCL

