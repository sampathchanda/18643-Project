-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity obj_detector_flatten is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inp_ce0 : OUT STD_LOGIC;
    inp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of obj_detector_flatten is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal i_4_fu_105_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_296 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_48 : BOOLEAN;
    signal p_addr_cast_fu_141_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr_cast_reg_301 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_151_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_309 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_63 : BOOLEAN;
    signal tmp_5_fu_181_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_reg_314 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr2_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr2_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_236_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_327 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_79 : BOOLEAN;
    signal exitcond_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_279_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_reg_337 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_65 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_77 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_88 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_108 : BOOLEAN;
    signal tmp_54_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_111_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_123_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_119_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_fu_131_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr_fu_135_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_fu_157_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl7_fu_169_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl6_cast_fu_165_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl7_cast_fu_177_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_trn_cast_fu_187_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr1_fu_191_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_52_fu_196_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_53_fu_208_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl9_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_trn_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr3_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_256_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_cast4_fu_226_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_270_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_cast_fu_266_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_cast_fu_275_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_cast_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_65 assign process. --
    i_reg_65_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond1_fu_145_p2)))) then 
                i_reg_65 <= i_4_reg_296;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_65 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- j_reg_77 assign process. --
    j_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_230_p2)))) then 
                j_reg_77 <= j_1_reg_309;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_99_p2 = ap_const_lv1_0))) then 
                j_reg_77 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- k_reg_88 assign process. --
    k_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_145_p2))) then 
                k_reg_88 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                k_reg_88 <= k_1_reg_327;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_4_reg_296 <= i_4_fu_105_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_309 <= j_1_fu_151_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                k_1_reg_327 <= k_1_fu_236_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_145_p2))) then
                    p_addr2_reg_319(31 downto 2) <= p_addr2_fu_220_p2(31 downto 2);
                    tmp_5_reg_314(8 downto 2) <= tmp_5_fu_181_p2(8 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_99_p2 = ap_const_lv1_0))) then
                    p_addr_cast_reg_301(8 downto 2) <= p_addr_cast_fu_141_p1(8 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_fu_230_p2))) then
                tmp_8_reg_337 <= tmp_8_fu_279_p2;
            end if;
        end if;
    end process;
    p_addr_cast_reg_301(1 downto 0) <= "00";
    tmp_5_reg_314(1 downto 0) <= "00";
    p_addr2_reg_319(1 downto 0) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_99_p2, exitcond1_fu_145_p2, exitcond_fu_230_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond2_fu_99_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond1_fu_145_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond_fu_230_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_99_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_99_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_99_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_99_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_108 assign process. --
    ap_sig_bdd_108_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_108 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_48 assign process. --
    ap_sig_bdd_48_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_48 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_63 assign process. --
    ap_sig_bdd_63_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_63 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_79 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_48)
    begin
        if (ap_sig_bdd_48) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_63)
    begin
        if (ap_sig_bdd_63) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_79)
    begin
        if (ap_sig_bdd_79) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_108)
    begin
        if (ap_sig_bdd_108) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_145_p2 <= "1" when (j_reg_77 = ap_const_lv4_C) else "0";
    exitcond2_fu_99_p2 <= "1" when (i_reg_65 = ap_const_lv3_6) else "0";
    exitcond_fu_230_p2 <= "1" when (k_reg_88 = ap_const_lv4_C) else "0";
    i_4_fu_105_p2 <= std_logic_vector(unsigned(i_reg_65) + unsigned(ap_const_lv3_1));
    inp_address0 <= tmp_54_fu_251_p1(10 - 1 downto 0);

    -- inp_ce0 assign process. --
    inp_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            inp_ce0 <= ap_const_logic_1;
        else 
            inp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_151_p2 <= std_logic_vector(unsigned(j_reg_77) + unsigned(ap_const_lv4_1));
    k_1_fu_236_p2 <= std_logic_vector(unsigned(k_reg_88) + unsigned(ap_const_lv4_1));
    k_cast4_fu_226_p1 <= std_logic_vector(resize(unsigned(k_reg_88),9));
    out_r_address0 <= tmp_9_fu_288_p1(10 - 1 downto 0);

    -- out_r_ce0 assign process. --
    out_r_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= inp_q0;

    -- out_r_we0 assign process. --
    out_r_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_addr1_fu_191_p2 <= std_logic_vector(unsigned(tmp_4_trn_cast_fu_187_p1) + unsigned(p_addr_cast_reg_301));
    p_addr2_fu_220_p2 <= std_logic_vector(signed(p_shl8_fu_204_p1) - signed(p_shl9_fu_216_p1));
    p_addr3_fu_246_p2 <= std_logic_vector(signed(p_addr2_reg_319) + signed(tmp_6_trn_fu_242_p1));
        p_addr_cast_fu_141_p1 <= std_logic_vector(resize(signed(p_addr_fu_135_p2),9));

    p_addr_fu_135_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_119_p1) - unsigned(p_shl4_cast_fu_131_p1));
    p_shl4_cast_fu_131_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_123_p3),8));
    p_shl6_cast_fu_165_p1 <= std_logic_vector(resize(unsigned(p_shl6_fu_157_p3),9));
    p_shl6_fu_157_p3 <= (j_reg_77 & ap_const_lv4_0);
    p_shl7_cast_fu_177_p1 <= std_logic_vector(resize(unsigned(p_shl7_fu_169_p3),9));
    p_shl7_fu_169_p3 <= (j_reg_77 & ap_const_lv2_0);
        p_shl8_fu_204_p1 <= std_logic_vector(resize(signed(tmp_52_fu_196_p3),32));

        p_shl9_fu_216_p1 <= std_logic_vector(resize(signed(tmp_53_fu_208_p3),32));

    p_shl_cast_fu_119_p1 <= std_logic_vector(resize(unsigned(tmp_fu_111_p3),8));
    tmp1_cast_fu_266_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_256_p4),11));
    tmp1_fu_256_p4 <= ((i_reg_65 & i_reg_65) & ap_const_lv4_0);
        tmp2_cast_fu_275_p1 <= std_logic_vector(resize(signed(tmp2_fu_270_p2),11));

    tmp2_fu_270_p2 <= std_logic_vector(unsigned(k_cast4_fu_226_p1) + unsigned(tmp_5_reg_314));
    tmp_4_trn_cast_fu_187_p1 <= std_logic_vector(resize(unsigned(j_reg_77),9));
    tmp_52_fu_196_p3 <= (p_addr1_fu_191_p2 & ap_const_lv4_0);
    tmp_53_fu_208_p3 <= (p_addr1_fu_191_p2 & ap_const_lv2_0);
    tmp_54_fu_251_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_246_p2),64));
    tmp_5_fu_181_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_165_p1) - unsigned(p_shl7_cast_fu_177_p1));
    tmp_6_trn_fu_242_p1 <= std_logic_vector(resize(unsigned(k_reg_88),32));
        tmp_8_cast_fu_285_p1 <= std_logic_vector(resize(signed(tmp_8_reg_337),32));

    tmp_8_fu_279_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_266_p1) + unsigned(tmp2_cast_fu_275_p1));
    tmp_9_fu_288_p1 <= std_logic_vector(resize(unsigned(tmp_8_cast_fu_285_p1),64));
    tmp_fu_111_p3 <= (i_reg_65 & ap_const_lv4_0);
    tmp_s_fu_123_p3 <= (i_reg_65 & ap_const_lv2_0);
end behav;
