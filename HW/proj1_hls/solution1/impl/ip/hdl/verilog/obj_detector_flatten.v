// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module obj_detector_flatten (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inp_address0,
        inp_ce0,
        inp_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv3_6 = 3'b110;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_C = 4'b1100;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] inp_address0;
output   inp_ce0;
input  [31:0] inp_q0;
output  [9:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inp_ce0;
reg out_r_ce0;
reg out_r_we0;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm = 5'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_23;
wire   [2:0] i_4_fu_105_p2;
reg   [2:0] i_4_reg_296;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_48;
wire  signed [8:0] p_addr_cast_fu_141_p1;
reg  signed [8:0] p_addr_cast_reg_301;
wire   [0:0] exitcond2_fu_99_p2;
wire   [3:0] j_1_fu_151_p2;
reg   [3:0] j_1_reg_309;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_63;
wire   [8:0] tmp_5_fu_181_p2;
reg   [8:0] tmp_5_reg_314;
wire   [0:0] exitcond1_fu_145_p2;
wire  signed [31:0] p_addr2_fu_220_p2;
reg  signed [31:0] p_addr2_reg_319;
wire   [3:0] k_1_fu_236_p2;
reg   [3:0] k_1_reg_327;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_79;
wire   [0:0] exitcond_fu_230_p2;
wire  signed [10:0] tmp_8_fu_279_p2;
reg  signed [10:0] tmp_8_reg_337;
reg   [2:0] i_reg_65;
reg   [3:0] j_reg_77;
reg   [3:0] k_reg_88;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_108;
wire   [63:0] tmp_54_fu_251_p1;
wire   [63:0] tmp_9_fu_288_p1;
wire   [6:0] tmp_fu_111_p3;
wire   [4:0] tmp_s_fu_123_p3;
wire   [7:0] p_shl_cast_fu_119_p1;
wire   [7:0] p_shl4_cast_fu_131_p1;
wire   [7:0] p_addr_fu_135_p2;
wire   [7:0] p_shl6_fu_157_p3;
wire   [5:0] p_shl7_fu_169_p3;
wire   [8:0] p_shl6_cast_fu_165_p1;
wire   [8:0] p_shl7_cast_fu_177_p1;
wire   [8:0] tmp_4_trn_cast_fu_187_p1;
wire  signed [8:0] p_addr1_fu_191_p2;
wire   [12:0] tmp_52_fu_196_p3;
wire   [10:0] tmp_53_fu_208_p3;
wire  signed [31:0] p_shl8_fu_204_p1;
wire  signed [31:0] p_shl9_fu_216_p1;
wire   [31:0] tmp_6_trn_fu_242_p1;
wire  signed [31:0] p_addr3_fu_246_p2;
wire   [9:0] tmp1_fu_256_p4;
wire   [8:0] k_cast4_fu_226_p1;
wire   [8:0] tmp2_fu_270_p2;
wire   [10:0] tmp1_cast_fu_266_p1;
wire  signed [10:0] tmp2_cast_fu_275_p1;
wire  signed [31:0] tmp_8_cast_fu_285_p1;
reg   [4:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond1_fu_145_p2))) begin
        i_reg_65 <= i_4_reg_296;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_65 <= ap_const_lv3_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond_fu_230_p2))) begin
        j_reg_77 <= j_1_reg_309;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_99_p2 == ap_const_lv1_0))) begin
        j_reg_77 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_145_p2))) begin
        k_reg_88 <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        k_reg_88 <= k_1_reg_327;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_4_reg_296 <= i_4_fu_105_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_1_reg_309 <= j_1_fu_151_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        k_1_reg_327 <= k_1_fu_236_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_145_p2))) begin
        p_addr2_reg_319[31 : 2] <= p_addr2_fu_220_p2[31 : 2];
        tmp_5_reg_314[8 : 2] <= tmp_5_fu_181_p2[8 : 2];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_99_p2 == ap_const_lv1_0))) begin
        p_addr_cast_reg_301[8 : 2] <= p_addr_cast_fu_141_p1[8 : 2];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond_fu_230_p2))) begin
        tmp_8_reg_337 <= tmp_8_fu_279_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_99_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_99_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_99_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_99_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_23)
begin
    if (ap_sig_bdd_23) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_48)
begin
    if (ap_sig_bdd_48) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_63)
begin
    if (ap_sig_bdd_63) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_79)
begin
    if (ap_sig_bdd_79) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_108)
begin
    if (ap_sig_bdd_108) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// inp_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        inp_ce0 = ap_const_logic_1;
    end else begin
        inp_ce0 = ap_const_logic_0;
    end
end

/// out_r_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        out_r_ce0 = ap_const_logic_1;
    end else begin
        out_r_ce0 = ap_const_logic_0;
    end
end

/// out_r_we0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        out_r_we0 = ap_const_logic_1;
    end else begin
        out_r_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_99_p2 or exitcond1_fu_145_p2 or exitcond_fu_230_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond2_fu_99_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((ap_const_lv1_0 == exitcond1_fu_145_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if ((ap_const_lv1_0 == exitcond_fu_230_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_108 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_108 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_23 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_23 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_48 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_48 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_63 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_63 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_79 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_79 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end
assign exitcond1_fu_145_p2 = (j_reg_77 == ap_const_lv4_C? 1'b1: 1'b0);
assign exitcond2_fu_99_p2 = (i_reg_65 == ap_const_lv3_6? 1'b1: 1'b0);
assign exitcond_fu_230_p2 = (k_reg_88 == ap_const_lv4_C? 1'b1: 1'b0);
assign i_4_fu_105_p2 = (i_reg_65 + ap_const_lv3_1);
assign inp_address0 = tmp_54_fu_251_p1;
assign j_1_fu_151_p2 = (j_reg_77 + ap_const_lv4_1);
assign k_1_fu_236_p2 = (k_reg_88 + ap_const_lv4_1);
assign k_cast4_fu_226_p1 = k_reg_88;
assign out_r_address0 = tmp_9_fu_288_p1;
assign out_r_d0 = inp_q0;
assign p_addr1_fu_191_p2 = ($signed(tmp_4_trn_cast_fu_187_p1) + $signed(p_addr_cast_reg_301));
assign p_addr2_fu_220_p2 = ($signed(p_shl8_fu_204_p1) - $signed(p_shl9_fu_216_p1));
assign p_addr3_fu_246_p2 = ($signed(p_addr2_reg_319) + $signed(tmp_6_trn_fu_242_p1));
assign p_addr_cast_fu_141_p1 = $signed(p_addr_fu_135_p2);
assign p_addr_fu_135_p2 = (p_shl_cast_fu_119_p1 - p_shl4_cast_fu_131_p1);
assign p_shl4_cast_fu_131_p1 = tmp_s_fu_123_p3;
assign p_shl6_cast_fu_165_p1 = p_shl6_fu_157_p3;
assign p_shl6_fu_157_p3 = {{j_reg_77}, {ap_const_lv4_0}};
assign p_shl7_cast_fu_177_p1 = p_shl7_fu_169_p3;
assign p_shl7_fu_169_p3 = {{j_reg_77}, {ap_const_lv2_0}};
assign p_shl8_fu_204_p1 = $signed(tmp_52_fu_196_p3);
assign p_shl9_fu_216_p1 = $signed(tmp_53_fu_208_p3);
assign p_shl_cast_fu_119_p1 = tmp_fu_111_p3;
assign tmp1_cast_fu_266_p1 = tmp1_fu_256_p4;
assign tmp1_fu_256_p4 = {{{i_reg_65}, {i_reg_65}}, {ap_const_lv4_0}};
assign tmp2_cast_fu_275_p1 = $signed(tmp2_fu_270_p2);
assign tmp2_fu_270_p2 = (k_cast4_fu_226_p1 + tmp_5_reg_314);
assign tmp_4_trn_cast_fu_187_p1 = j_reg_77;
assign tmp_52_fu_196_p3 = {{p_addr1_fu_191_p2}, {ap_const_lv4_0}};
assign tmp_53_fu_208_p3 = {{p_addr1_fu_191_p2}, {ap_const_lv2_0}};
assign tmp_54_fu_251_p1 = $unsigned(p_addr3_fu_246_p2);
assign tmp_5_fu_181_p2 = (p_shl6_cast_fu_165_p1 - p_shl7_cast_fu_177_p1);
assign tmp_6_trn_fu_242_p1 = k_reg_88;
assign tmp_8_cast_fu_285_p1 = tmp_8_reg_337;
assign tmp_8_fu_279_p2 = ($signed(tmp1_cast_fu_266_p1) + $signed(tmp2_cast_fu_275_p1));
assign tmp_9_fu_288_p1 = $unsigned(tmp_8_cast_fu_285_p1);
assign tmp_fu_111_p3 = {{i_reg_65}, {ap_const_lv4_0}};
assign tmp_s_fu_123_p3 = {{i_reg_65}, {ap_const_lv2_0}};
always @ (posedge ap_clk)
begin
    p_addr_cast_reg_301[1:0] <= 2'b00;
    tmp_5_reg_314[1:0] <= 2'b00;
    p_addr2_reg_319[1:0] <= 2'b00;
end



endmodule //obj_detector_flatten

