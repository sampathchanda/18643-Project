-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity obj_detector is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    A_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_EN_A : OUT STD_LOGIC;
    A_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    A_Clk_A : OUT STD_LOGIC;
    A_Rst_A : OUT STD_LOGIC;
    W0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    W0_EN_A : OUT STD_LOGIC;
    W0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    W0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    W0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    W0_Clk_A : OUT STD_LOGIC;
    W0_Rst_A : OUT STD_LOGIC;
    W1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    W1_EN_A : OUT STD_LOGIC;
    W1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    W1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    W1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    W1_Clk_A : OUT STD_LOGIC;
    W1_Rst_A : OUT STD_LOGIC;
    res_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_EN_A : OUT STD_LOGIC;
    res_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    res_Clk_A : OUT STD_LOGIC;
    res_Rst_A : OUT STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of obj_detector is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "obj_detector,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.412000,HLS_SYN_LAT=1042049,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=10,HLS_SYN_FF=2213,HLS_SYN_LUT=3796}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_67 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal obj_detector_control_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal s1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_134 : BOOLEAN;
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_141 : BOOLEAN;
    signal res_addr_gep_fu_136_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_addr_reg_1169 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_352_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1177 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_156 : BOOLEAN;
    signal i_2_fu_364_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1185 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_165 : BOOLEAN;
    signal p_addr_cast_fu_400_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr_cast_reg_1190 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_410_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1198 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_180 : BOOLEAN;
    signal p_addr2_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr2_reg_1203 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_i_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_461_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1211 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_194 : BOOLEAN;
    signal tmp_40_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_reg_1216 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s0_load_reg_1226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_210 : BOOLEAN;
    signal y_assign_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_assign_reg_1232 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_cond_i_i_i_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_i_i_reg_1239 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_221 : BOOLEAN;
    signal sel_tmp1_i_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1249 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_232 : BOOLEAN;
    signal sel_tmp2_i_fu_581_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp2_i_reg_1254 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_246 : BOOLEAN;
    signal tmp_13_i_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_i_reg_1259 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_256 : BOOLEAN;
    signal i_3_fu_600_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_1267 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_265 : BOOLEAN;
    signal p_addr4_cast_fu_636_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr4_cast_reg_1272 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr5_cast_fu_670_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr5_cast_reg_1278 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_5_fu_680_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_1286 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_281 : BOOLEAN;
    signal p_addr8_fu_733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr8_reg_1291 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_i2_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr10_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr10_reg_1297 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr12_fu_811_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr12_reg_1303 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_823_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_1311 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_299 : BOOLEAN;
    signal exitcond_i7_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr13_fu_871_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr13_reg_1326 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr7_fu_876_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr7_reg_1331 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr16_fu_885_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr16_reg_1336 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_reg_1341 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1353 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_325 : BOOLEAN;
    signal max_3_reg_1358 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_2_fu_977_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_2_reg_1365 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_335 : BOOLEAN;
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_1371 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_4_fu_1069_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_4_reg_1381 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_1152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_1388 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_350 : BOOLEAN;
    signal s0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal s0_ce0 : STD_LOGIC;
    signal s0_we0 : STD_LOGIC;
    signal s0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal s1_ce0 : STD_LOGIC;
    signal s1_we0 : STD_LOGIC;
    signal s1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal s1_ce1 : STD_LOGIC;
    signal s2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal s2_ce0 : STD_LOGIC;
    signal s2_we0 : STD_LOGIC;
    signal s2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal s3_ce0 : STD_LOGIC;
    signal s3_we0 : STD_LOGIC;
    signal s3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_299_ap_start : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_299_ap_done : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_299_ap_idle : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_299_ap_ready : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_299_A_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_299_A_EN_A : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_299_A_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_obj_detector_convolve_fu_299_A_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_299_A_Dout_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_299_B_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_299_B_EN_A : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_299_B_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_obj_detector_convolve_fu_299_B_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_299_B_Dout_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_299_tmp : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_obj_detector_convolve_fu_299_conv_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_obj_detector_convolve_fu_299_conv_ce0 : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_299_conv_we0 : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_299_conv_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_299_tmp1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_obj_detector_FCL_fu_312_ap_start : STD_LOGIC;
    signal grp_obj_detector_FCL_fu_312_ap_done : STD_LOGIC;
    signal grp_obj_detector_FCL_fu_312_ap_idle : STD_LOGIC;
    signal grp_obj_detector_FCL_fu_312_ap_ready : STD_LOGIC;
    signal grp_obj_detector_FCL_fu_312_inp_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_obj_detector_FCL_fu_312_inp_ce0 : STD_LOGIC;
    signal grp_obj_detector_FCL_fu_312_inp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_FCL_fu_312_W_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_FCL_fu_312_W_EN_A : STD_LOGIC;
    signal grp_obj_detector_FCL_fu_312_W_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_obj_detector_FCL_fu_312_W_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_FCL_fu_312_W_Dout_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_FCL_fu_312_W_offset : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_obj_detector_FCL_fu_312_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_323_ap_start : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_323_ap_done : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_323_ap_idle : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_323_ap_ready : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_323_inp_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_obj_detector_flatten_fu_323_inp_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_323_inp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_323_out_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_obj_detector_flatten_fu_323_out_r_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_323_out_r_we0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_323_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_221 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_450 : BOOLEAN;
    signal i1_reg_233 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_244 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_i_reg_255 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_475 : BOOLEAN;
    signal i2_reg_266 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i1_reg_277 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_i6_reg_288 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_495 : BOOLEAN;
    signal grp_obj_detector_convolve_fu_299_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_obj_detector_FCL_fu_312_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_507 : BOOLEAN;
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_514 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_522 : BOOLEAN;
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_529 : BOOLEAN;
    signal grp_obj_detector_flatten_fu_323_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_541 : BOOLEAN;
    signal tmp_41_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_890_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_984_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_1165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_i_fu_329_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_assign_fu_332_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_336_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_370_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_382_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_378_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_390_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr_fu_394_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_trn_cast_fu_416_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr1_fu_420_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_425_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_27_fu_437_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl3_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_trn_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr3_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_fu_484_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_1_fu_494_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_i_i_i_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_i_i_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_i_i_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_i_i_i_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inp_load_i_to_int_fu_534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_537_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_fu_547_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_1_fu_575_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_606_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_618_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl6_cast_fu_614_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl7_cast_fu_626_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr4_fu_630_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_640_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_652_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_cast_fu_648_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_cast_fu_660_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr5_fu_664_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i3_fu_686_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i4_trn_cast_fu_700_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr6_fu_704_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_29_fu_709_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_35_fu_721_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_fu_717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl1_fu_729_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_fu_694_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_i_trn9_cast_fu_739_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr9_fu_743_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_36_fu_748_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_37_fu_760_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl4_fu_756_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl5_fu_768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_trn_cast_fu_778_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr11_fu_782_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_38_fu_787_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_39_fu_799_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_fu_795_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl9_fu_807_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_fu_829_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_i_trn_fu_837_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr14_fu_841_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_fu_851_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_i_trn_fu_857_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr15_fu_861_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_i_trn_fu_881_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_i_to_int_fu_894_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_3_i_to_int_fu_912_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_898_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_908_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_915_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_fu_925_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_7_i_to_int_fu_988_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_6_i_to_int_fu_1005_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_991_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_fu_1001_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_1008_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_fu_1018_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_8_i_to_int_fu_1075_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_i_to_int_fu_1093_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_1079_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_1089_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_1096_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_fu_1106_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_336_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);

    component obj_detector_convolve IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_EN_A : OUT STD_LOGIC;
        A_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
        B_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_EN_A : OUT STD_LOGIC;
        B_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp : IN STD_LOGIC_VECTOR (2 downto 0);
        conv_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_ce0 : OUT STD_LOGIC;
        conv_we0 : OUT STD_LOGIC;
        conv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp1 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component obj_detector_FCL IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        inp_ce0 : OUT STD_LOGIC;
        inp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        W_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        W_EN_A : OUT STD_LOGIC;
        W_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        W_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        W_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
        W_offset : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_flatten IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        inp_ce0 : OUT STD_LOGIC;
        inp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_fptrunc_64ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_fpext_32ns_64_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component obj_detector_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component obj_detector_s0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_s1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_s2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    obj_detector_control_s_axi_U : component obj_detector_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => obj_detector_control_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    s0_U : component obj_detector_s0
    generic map (
        DataWidth => 32,
        AddressRange => 3456,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s0_address0,
        ce0 => s0_ce0,
        we0 => s0_we0,
        d0 => s0_d0,
        q0 => s0_q0);

    s1_U : component obj_detector_s1
    generic map (
        DataWidth => 32,
        AddressRange => 3456,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s1_address0,
        ce0 => s1_ce0,
        we0 => s1_we0,
        d0 => s1_d0,
        q0 => s1_q0,
        address1 => s1_address1,
        ce1 => s1_ce1,
        q1 => s1_q1);

    s2_U : component obj_detector_s2
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s2_address0,
        ce0 => s2_ce0,
        we0 => s2_we0,
        d0 => s2_d0,
        q0 => s2_q0);

    s3_U : component obj_detector_s2
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s3_address0,
        ce0 => s3_ce0,
        we0 => s3_we0,
        d0 => s3_d0,
        q0 => s3_q0);

    grp_obj_detector_convolve_fu_299 : component obj_detector_convolve
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_obj_detector_convolve_fu_299_ap_start,
        ap_done => grp_obj_detector_convolve_fu_299_ap_done,
        ap_idle => grp_obj_detector_convolve_fu_299_ap_idle,
        ap_ready => grp_obj_detector_convolve_fu_299_ap_ready,
        A_Addr_A => grp_obj_detector_convolve_fu_299_A_Addr_A,
        A_EN_A => grp_obj_detector_convolve_fu_299_A_EN_A,
        A_WEN_A => grp_obj_detector_convolve_fu_299_A_WEN_A,
        A_Din_A => grp_obj_detector_convolve_fu_299_A_Din_A,
        A_Dout_A => grp_obj_detector_convolve_fu_299_A_Dout_A,
        B_Addr_A => grp_obj_detector_convolve_fu_299_B_Addr_A,
        B_EN_A => grp_obj_detector_convolve_fu_299_B_EN_A,
        B_WEN_A => grp_obj_detector_convolve_fu_299_B_WEN_A,
        B_Din_A => grp_obj_detector_convolve_fu_299_B_Din_A,
        B_Dout_A => grp_obj_detector_convolve_fu_299_B_Dout_A,
        tmp => grp_obj_detector_convolve_fu_299_tmp,
        conv_address0 => grp_obj_detector_convolve_fu_299_conv_address0,
        conv_ce0 => grp_obj_detector_convolve_fu_299_conv_ce0,
        conv_we0 => grp_obj_detector_convolve_fu_299_conv_we0,
        conv_d0 => grp_obj_detector_convolve_fu_299_conv_d0,
        tmp1 => grp_obj_detector_convolve_fu_299_tmp1);

    grp_obj_detector_FCL_fu_312 : component obj_detector_FCL
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_obj_detector_FCL_fu_312_ap_start,
        ap_done => grp_obj_detector_FCL_fu_312_ap_done,
        ap_idle => grp_obj_detector_FCL_fu_312_ap_idle,
        ap_ready => grp_obj_detector_FCL_fu_312_ap_ready,
        inp_address0 => grp_obj_detector_FCL_fu_312_inp_address0,
        inp_ce0 => grp_obj_detector_FCL_fu_312_inp_ce0,
        inp_q0 => grp_obj_detector_FCL_fu_312_inp_q0,
        W_Addr_A => grp_obj_detector_FCL_fu_312_W_Addr_A,
        W_EN_A => grp_obj_detector_FCL_fu_312_W_EN_A,
        W_WEN_A => grp_obj_detector_FCL_fu_312_W_WEN_A,
        W_Din_A => grp_obj_detector_FCL_fu_312_W_Din_A,
        W_Dout_A => grp_obj_detector_FCL_fu_312_W_Dout_A,
        W_offset => grp_obj_detector_FCL_fu_312_W_offset,
        ap_return => grp_obj_detector_FCL_fu_312_ap_return);

    grp_obj_detector_flatten_fu_323 : component obj_detector_flatten
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_obj_detector_flatten_fu_323_ap_start,
        ap_done => grp_obj_detector_flatten_fu_323_ap_done,
        ap_idle => grp_obj_detector_flatten_fu_323_ap_idle,
        ap_ready => grp_obj_detector_flatten_fu_323_ap_ready,
        inp_address0 => grp_obj_detector_flatten_fu_323_inp_address0,
        inp_ce0 => grp_obj_detector_flatten_fu_323_inp_ce0,
        inp_q0 => grp_obj_detector_flatten_fu_323_inp_q0,
        out_r_address0 => grp_obj_detector_flatten_fu_323_out_r_address0,
        out_r_ce0 => grp_obj_detector_flatten_fu_323_out_r_ce0,
        out_r_we0 => grp_obj_detector_flatten_fu_323_out_r_we0,
        out_r_d0 => grp_obj_detector_flatten_fu_323_out_r_d0);

    obj_detector_fptrunc_64ns_32_1_U11 : component obj_detector_fptrunc_64ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_13_i_fu_329_p0,
        dout => tmp_13_i_fu_329_p1);

    obj_detector_fpext_32ns_64_1_U12 : component obj_detector_fpext_32ns_64_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => y_assign_fu_332_p0,
        dout => y_assign_fu_332_p1);

    obj_detector_fcmp_32ns_32ns_1_1_U13 : component obj_detector_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_336_p0,
        din1 => grp_fu_336_p1,
        opcode => grp_fu_336_opcode,
        dout => grp_fu_336_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_obj_detector_FCL_fu_312_ap_start_ap_start_reg assign process. --
    grp_obj_detector_FCL_fu_312_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_obj_detector_FCL_fu_312_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24))) then 
                    grp_obj_detector_FCL_fu_312_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_obj_detector_FCL_fu_312_ap_ready)) then 
                    grp_obj_detector_FCL_fu_312_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_obj_detector_convolve_fu_299_ap_start_ap_start_reg assign process. --
    grp_obj_detector_convolve_fu_299_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_obj_detector_convolve_fu_299_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_346_p2))) then 
                    grp_obj_detector_convolve_fu_299_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_obj_detector_convolve_fu_299_ap_ready)) then 
                    grp_obj_detector_convolve_fu_299_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_obj_detector_flatten_fu_323_ap_start_ap_start_reg assign process. --
    grp_obj_detector_flatten_fu_323_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_obj_detector_flatten_fu_323_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond_fu_594_p2)))) then 
                    grp_obj_detector_flatten_fu_323_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_obj_detector_flatten_fu_323_ap_ready)) then 
                    grp_obj_detector_flatten_fu_323_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i1_reg_233 assign process. --
    i1_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond1_i_fu_404_p2)))) then 
                i1_reg_233 <= i_2_reg_1185;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_346_p2)))) then 
                i1_reg_233 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- i2_reg_266 assign process. --
    i2_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = exitcond1_i2_fu_674_p2)))) then 
                i2_reg_266 <= i_3_reg_1267;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_358_p2 = ap_const_lv1_0)))) then 
                i2_reg_266 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- i_i1_reg_277 assign process. --
    i_i1_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = exitcond_i7_fu_817_p2)))) then 
                i_i1_reg_277 <= i_5_reg_1286;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = exitcond_fu_594_p2))) then 
                i_i1_reg_277 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- i_i_reg_244 assign process. --
    i_i_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond_i_fu_455_p2)))) then 
                i_i_reg_244 <= i_4_reg_1198;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_358_p2 = ap_const_lv1_0))) then 
                i_i_reg_244 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- i_reg_221 assign process. --
    i_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = grp_obj_detector_convolve_fu_299_ap_done)))) then 
                i_reg_221 <= i_1_reg_1177;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_221 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- j_i6_reg_288 assign process. --
    j_i6_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = exitcond1_i2_fu_674_p2))) then 
                j_i6_reg_288 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                j_i6_reg_288 <= j_1_reg_1311;
            end if; 
        end if;
    end process;

    -- j_i_reg_255 assign process. --
    j_i_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_i_fu_404_p2))) then 
                j_i_reg_255 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                j_i_reg_255 <= j_reg_1211;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_1177 <= i_1_fu_352_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_2_reg_1185 <= i_2_fu_364_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                i_3_reg_1267 <= i_3_fu_600_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                i_4_reg_1198 <= i_4_fu_410_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                i_5_reg_1286 <= i_5_fu_680_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                j_1_reg_1311 <= j_1_fu_823_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                j_reg_1211 <= j_fu_461_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                max_1_reg_1341 <= s1_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then
                max_2_reg_1365 <= max_2_fu_977_p3;
                tmp_24_reg_1371 <= grp_fu_336_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then
                max_3_reg_1358 <= s1_q1;
                tmp_16_reg_1353 <= tmp_16_fu_971_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                max_4_reg_1381 <= max_4_fu_1069_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                or_cond_i_i_i_reg_1239 <= or_cond_i_i_i_fu_510_p2;
                sel_tmp1_i_reg_1244 <= sel_tmp1_i_fu_528_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = exitcond1_i2_fu_674_p2))) then
                    p_addr10_reg_1297(31 downto 4) <= p_addr10_fu_772_p2(31 downto 4);
                    p_addr12_reg_1303(31 downto 2) <= p_addr12_fu_811_p2(31 downto 2);
                    p_addr8_reg_1291(31 downto 4) <= p_addr8_fu_733_p2(31 downto 4);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and (ap_const_lv1_0 = exitcond_i7_fu_817_p2))) then
                    p_addr13_reg_1326(31 downto 1) <= p_addr13_fu_871_p2(31 downto 1);
                p_addr16_reg_1336 <= p_addr16_fu_885_p2;
                    p_addr7_reg_1331(31 downto 1) <= p_addr7_fu_876_p2(31 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_i_fu_404_p2))) then
                    p_addr2_reg_1203(31 downto 3) <= p_addr2_fu_449_p2(31 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = exitcond_fu_594_p2))) then
                    p_addr4_cast_reg_1272(9 downto 3) <= p_addr4_cast_fu_636_p1(9 downto 3);
                    p_addr5_cast_reg_1278(8 downto 2) <= p_addr5_cast_fu_670_p1(8 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_358_p2 = ap_const_lv1_0))) then
                    p_addr_cast_reg_1190(9 downto 3) <= p_addr_cast_fu_400_p1(9 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18))) then
                reg_341 <= s1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                s0_load_reg_1226 <= s0_q0;
                y_assign_reg_1232 <= y_assign_fu_332_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = or_cond_i_i_i_reg_1239) and (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then
                sel_tmp2_i_reg_1254 <= sel_tmp2_i_fu_581_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                tmp_13_i_reg_1259 <= tmp_13_i_fu_329_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                tmp_34_reg_1388 <= tmp_34_fu_1152_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond_i_fu_455_p2))) then
                    tmp_40_reg_1216(31 downto 0) <= tmp_40_fu_476_p1(31 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = sel_tmp1_i_reg_1244)) and (ap_const_lv1_0 = or_cond_i_i_i_reg_1239))) then
                tmp_8_reg_1249 <= tmp_8_fu_569_p2;
            end if;
        end if;
    end process;
    res_addr_reg_1169(0) <= '0';
    p_addr_cast_reg_1190(2 downto 0) <= "000";
    p_addr2_reg_1203(2 downto 0) <= "000";
    tmp_40_reg_1216(63 downto 32) <= "00000000000000000000000000000000";
    p_addr4_cast_reg_1272(2 downto 0) <= "000";
    p_addr5_cast_reg_1278(1 downto 0) <= "00";
    p_addr8_reg_1291(3 downto 0) <= "0000";
    p_addr10_reg_1297(3 downto 0) <= "1000";
    p_addr12_reg_1303(1 downto 0) <= "00";
    p_addr13_reg_1326(0) <= '0';
    p_addr7_reg_1331(0) <= '1';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_358_p2, exitcond1_i_fu_404_p2, exitcond_i_fu_455_p2, exitcond_fu_594_p2, exitcond1_i2_fu_674_p2, exitcond_i7_fu_817_p2, grp_obj_detector_convolve_fu_299_ap_done, grp_obj_detector_FCL_fu_312_ap_done, grp_obj_detector_flatten_fu_323_ap_done, exitcond2_fu_346_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_346_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_obj_detector_convolve_fu_299_ap_done))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((exitcond1_fu_358_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = exitcond1_i_fu_404_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond_i_fu_455_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st13_fsm_12 => 
                if ((ap_const_lv1_0 = exitcond_fu_594_p2)) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st14_fsm_13 => 
                if ((ap_const_lv1_0 = exitcond1_i2_fu_674_p2)) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st15_fsm_14 => 
                if ((ap_const_lv1_0 = exitcond_i7_fu_817_p2)) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st22_fsm_21 => 
                if (not((ap_const_logic_0 = grp_obj_detector_flatten_fu_323_ap_done))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                if (not((ap_const_logic_0 = grp_obj_detector_FCL_fu_312_ap_done))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                if (not((ap_const_logic_0 = grp_obj_detector_FCL_fu_312_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_Addr_A <= grp_obj_detector_convolve_fu_299_A_Addr_A;
    A_Clk_A <= ap_clk;
    A_Din_A <= ap_const_lv32_0;

    -- A_EN_A assign process. --
    A_EN_A_assign_proc : process(grp_obj_detector_convolve_fu_299_A_EN_A, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            A_EN_A <= grp_obj_detector_convolve_fu_299_A_EN_A;
        else 
            A_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    A_Rst_A <= ap_rst_n_inv;
    A_WEN_A <= ap_const_lv4_0;
    W0_Addr_A <= grp_obj_detector_convolve_fu_299_B_Addr_A;
    W0_Clk_A <= ap_clk;
    W0_Din_A <= ap_const_lv32_0;

    -- W0_EN_A assign process. --
    W0_EN_A_assign_proc : process(grp_obj_detector_convolve_fu_299_B_EN_A, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            W0_EN_A <= grp_obj_detector_convolve_fu_299_B_EN_A;
        else 
            W0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    W0_Rst_A <= ap_rst_n_inv;
    W0_WEN_A <= ap_const_lv4_0;
    W1_Addr_A <= grp_obj_detector_FCL_fu_312_W_Addr_A;
    W1_Clk_A <= ap_clk;
    W1_Din_A <= ap_const_lv32_0;

    -- W1_EN_A assign process. --
    W1_EN_A_assign_proc : process(grp_obj_detector_FCL_fu_312_W_EN_A, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25))) then 
            W1_EN_A <= grp_obj_detector_FCL_fu_312_W_EN_A;
        else 
            W1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    W1_Rst_A <= ap_rst_n_inv;
    W1_WEN_A <= ap_const_lv4_0;

    -- ap_done assign process. --
    ap_done_assign_proc : process(grp_obj_detector_FCL_fu_312_ap_done, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_logic_0 = grp_obj_detector_FCL_fu_312_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(grp_obj_detector_FCL_fu_312_ap_done, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_logic_0 = grp_obj_detector_FCL_fu_312_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_134 assign process. --
    ap_sig_bdd_134_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_134 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_141 assign process. --
    ap_sig_bdd_141_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_141 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_156 assign process. --
    ap_sig_bdd_156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_156 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_165 assign process. --
    ap_sig_bdd_165_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_165 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_180 assign process. --
    ap_sig_bdd_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_180 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_194 assign process. --
    ap_sig_bdd_194_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_194 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_210 assign process. --
    ap_sig_bdd_210_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_210 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_221 assign process. --
    ap_sig_bdd_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_221 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_232 assign process. --
    ap_sig_bdd_232_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_232 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_246 assign process. --
    ap_sig_bdd_246_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_246 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_256 assign process. --
    ap_sig_bdd_256_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_256 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_265 assign process. --
    ap_sig_bdd_265_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_265 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_281 assign process. --
    ap_sig_bdd_281_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_281 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_299 assign process. --
    ap_sig_bdd_299_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_299 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_325 assign process. --
    ap_sig_bdd_325_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_325 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_335 assign process. --
    ap_sig_bdd_335_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_335 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_350 assign process. --
    ap_sig_bdd_350_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_350 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_450 assign process. --
    ap_sig_bdd_450_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_450 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_475 assign process. --
    ap_sig_bdd_475_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_475 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_495 assign process. --
    ap_sig_bdd_495_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_495 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_507 assign process. --
    ap_sig_bdd_507_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_507 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_514 assign process. --
    ap_sig_bdd_514_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_514 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_522 assign process. --
    ap_sig_bdd_522_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_522 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_529 assign process. --
    ap_sig_bdd_529_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_529 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_541 assign process. --
    ap_sig_bdd_541_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_541 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_67 assign process. --
    ap_sig_bdd_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_67 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_246)
    begin
        if (ap_sig_bdd_246) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_256)
    begin
        if (ap_sig_bdd_256) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_475)
    begin
        if (ap_sig_bdd_475) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_265)
    begin
        if (ap_sig_bdd_265) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_281)
    begin
        if (ap_sig_bdd_281) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_299)
    begin
        if (ap_sig_bdd_299) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_134)
    begin
        if (ap_sig_bdd_134) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_325)
    begin
        if (ap_sig_bdd_325) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_335)
    begin
        if (ap_sig_bdd_335) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_141)
    begin
        if (ap_sig_bdd_141) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_67)
    begin
        if (ap_sig_bdd_67) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_350)
    begin
        if (ap_sig_bdd_350) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_495)
    begin
        if (ap_sig_bdd_495) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_541)
    begin
        if (ap_sig_bdd_541) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_507)
    begin
        if (ap_sig_bdd_507) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_522)
    begin
        if (ap_sig_bdd_522) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_514)
    begin
        if (ap_sig_bdd_514) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_529)
    begin
        if (ap_sig_bdd_529) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_156)
    begin
        if (ap_sig_bdd_156) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_450)
    begin
        if (ap_sig_bdd_450) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_165)
    begin
        if (ap_sig_bdd_165) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_180)
    begin
        if (ap_sig_bdd_180) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_194)
    begin
        if (ap_sig_bdd_194) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_210)
    begin
        if (ap_sig_bdd_210) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_221)
    begin
        if (ap_sig_bdd_221) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_232)
    begin
        if (ap_sig_bdd_232) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_358_p2 <= "1" when (i1_reg_233 = ap_const_lv3_6) else "0";
    exitcond1_i2_fu_674_p2 <= "1" when (i_i1_reg_277 = ap_const_lv4_C) else "0";
    exitcond1_i_fu_404_p2 <= "1" when (i_i_reg_244 = ap_const_lv5_18) else "0";
    exitcond2_fu_346_p2 <= "1" when (i_reg_221 = ap_const_lv3_6) else "0";
    exitcond_fu_594_p2 <= "1" when (i2_reg_266 = ap_const_lv3_6) else "0";
    exitcond_i7_fu_817_p2 <= "1" when (j_i6_reg_288 = ap_const_lv4_C) else "0";
    exitcond_i_fu_455_p2 <= "1" when (j_i_reg_255 = ap_const_lv5_18) else "0";

    -- grp_fu_336_opcode assign process. --
    grp_fu_336_opcode_assign_proc : process(or_cond_i_i_i_reg_1239, sel_tmp1_i_reg_1244, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            grp_fu_336_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = sel_tmp1_i_reg_1244)) and (ap_const_lv1_0 = or_cond_i_i_i_reg_1239))) then 
            grp_fu_336_opcode <= ap_const_lv5_4;
        else 
            grp_fu_336_opcode <= "XXXXX";
        end if; 
    end process;


    -- grp_fu_336_p0 assign process. --
    grp_fu_336_p0_assign_proc : process(reg_341, s0_load_reg_1226, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st17_fsm_16, max_3_reg_1358, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_336_p0 <= max_3_reg_1358;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            grp_fu_336_p0 <= reg_341;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_336_p0 <= s0_load_reg_1226;
        else 
            grp_fu_336_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_336_p1 assign process. --
    grp_fu_336_p1_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, max_1_reg_1341, ap_sig_cseq_ST_st17_fsm_16, max_2_fu_977_p3, ap_sig_cseq_ST_st18_fsm_17, max_4_reg_1381, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            grp_fu_336_p1 <= max_4_reg_1381;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_336_p1 <= max_2_fu_977_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            grp_fu_336_p1 <= max_1_reg_1341;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_336_p1 <= ap_const_lv32_0;
        else 
            grp_fu_336_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_obj_detector_FCL_fu_312_W_Dout_A <= W1_Dout_A;

    -- grp_obj_detector_FCL_fu_312_W_offset assign process. --
    grp_obj_detector_FCL_fu_312_W_offset_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            grp_obj_detector_FCL_fu_312_W_offset <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_obj_detector_FCL_fu_312_W_offset <= ap_const_lv1_0;
        else 
            grp_obj_detector_FCL_fu_312_W_offset <= "X";
        end if; 
    end process;

    grp_obj_detector_FCL_fu_312_ap_start <= grp_obj_detector_FCL_fu_312_ap_start_ap_start_reg;
    grp_obj_detector_FCL_fu_312_inp_q0 <= s3_q0;
    grp_obj_detector_convolve_fu_299_A_Dout_A <= A_Dout_A;
    grp_obj_detector_convolve_fu_299_B_Dout_A <= W0_Dout_A;
    grp_obj_detector_convolve_fu_299_ap_start <= grp_obj_detector_convolve_fu_299_ap_start_ap_start_reg;
    grp_obj_detector_convolve_fu_299_tmp <= i_reg_221;
    grp_obj_detector_convolve_fu_299_tmp1 <= i_reg_221;
    grp_obj_detector_flatten_fu_323_ap_start <= grp_obj_detector_flatten_fu_323_ap_start_ap_start_reg;
    grp_obj_detector_flatten_fu_323_inp_q0 <= s2_q0;
    i_1_fu_352_p2 <= std_logic_vector(unsigned(i_reg_221) + unsigned(ap_const_lv3_1));
    i_2_fu_364_p2 <= std_logic_vector(unsigned(i1_reg_233) + unsigned(ap_const_lv3_1));
    i_3_fu_600_p2 <= std_logic_vector(unsigned(i2_reg_266) + unsigned(ap_const_lv3_1));
    i_4_fu_410_p2 <= std_logic_vector(unsigned(i_i_reg_244) + unsigned(ap_const_lv5_1));
    i_5_fu_680_p2 <= std_logic_vector(unsigned(i_i1_reg_277) + unsigned(ap_const_lv4_1));
    inp_load_i_to_int_fu_534_p1 <= s0_load_reg_1226;
    j_1_fu_823_p2 <= std_logic_vector(unsigned(j_i6_reg_288) + unsigned(ap_const_lv4_1));
    j_fu_461_p2 <= std_logic_vector(unsigned(j_i_reg_255) + unsigned(ap_const_lv5_1));
    loc_V_1_fu_494_p1 <= p_Val2_s_fu_481_p1(52 - 1 downto 0);
    loc_V_fu_484_p4 <= p_Val2_s_fu_481_p1(62 downto 52);
    max_1_i_to_int_fu_1093_p1 <= max_4_reg_1381;
    max_2_fu_977_p3 <= 
        reg_341 when (tmp_16_reg_1353(0) = '1') else 
        max_1_reg_1341;
    max_3_i_to_int_fu_912_p1 <= max_1_reg_1341;
    max_4_fu_1069_p3 <= 
        max_3_reg_1358 when (tmp_25_fu_1064_p2(0) = '1') else 
        max_2_reg_1365;
    max_6_i_to_int_fu_1005_p1 <= max_2_reg_1365;
    max_7_i_to_int_fu_988_p1 <= max_3_reg_1358;
    max_8_i_to_int_fu_1075_p1 <= reg_341;
    max_i_to_int_fu_894_p1 <= reg_341;
    notlhs1_fu_929_p2 <= "0" when (tmp_9_fu_898_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_947_p2 <= "0" when (tmp_10_fu_915_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_1022_p2 <= "0" when (tmp_17_fu_991_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_1040_p2 <= "0" when (tmp_19_fu_1008_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_1110_p2 <= "0" when (tmp_26_fu_1079_p4 = ap_const_lv8_FF) else "1";
    notlhs6_fu_1128_p2 <= "0" when (tmp_28_fu_1096_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_551_p2 <= "0" when (tmp_fu_537_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_935_p2 <= "1" when (tmp_44_fu_908_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_953_p2 <= "1" when (tmp_45_fu_925_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_1028_p2 <= "1" when (tmp_47_fu_1001_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_1046_p2 <= "1" when (tmp_48_fu_1018_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_1116_p2 <= "1" when (tmp_50_fu_1089_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_1134_p2 <= "1" when (tmp_51_fu_1106_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_557_p2 <= "1" when (tmp_42_fu_547_p1 = ap_const_lv23_0) else "0";
    obj_detector_control_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    or_cond1_i_i_i_fu_522_p2 <= (tmp_2_i_i_i_fu_516_p2 or tmp_1_i_i_i_fu_504_p2);
    or_cond_i_i_i_fu_510_p2 <= (tmp_i_i_i_fu_498_p2 and tmp_1_i_i_i_fu_504_p2);
    p_Val2_s_fu_481_p1 <= y_assign_reg_1232;
    p_addr10_fu_772_p2 <= std_logic_vector(signed(p_shl4_fu_756_p1) - signed(p_shl5_fu_768_p1));
    p_addr11_fu_782_p2 <= std_logic_vector(unsigned(tmp_3_i_trn_cast_fu_778_p1) + unsigned(p_addr5_cast_reg_1278));
    p_addr12_fu_811_p2 <= std_logic_vector(signed(p_shl8_fu_795_p1) - signed(p_shl9_fu_807_p1));
    p_addr13_fu_871_p2 <= std_logic_vector(unsigned(tmp_5_i_trn_fu_837_p1) + unsigned(p_addr10_reg_1297));
    p_addr14_fu_841_p2 <= std_logic_vector(unsigned(tmp_5_i_trn_fu_837_p1) + unsigned(p_addr8_reg_1291));
    p_addr15_fu_861_p2 <= std_logic_vector(unsigned(tmp_8_i_trn_fu_857_p1) + unsigned(p_addr8_reg_1291));
    p_addr16_fu_885_p2 <= std_logic_vector(unsigned(tmp_12_i_trn_fu_881_p1) + unsigned(p_addr12_reg_1303));
    p_addr1_fu_420_p2 <= std_logic_vector(signed(p_addr_cast_reg_1190) + signed(tmp_i_trn_cast_fu_416_p1));
    p_addr2_fu_449_p2 <= std_logic_vector(signed(p_shl2_fu_433_p1) - signed(p_shl3_fu_445_p1));
    p_addr3_fu_471_p2 <= std_logic_vector(unsigned(tmp_i_trn_fu_467_p1) + unsigned(p_addr2_reg_1203));
        p_addr4_cast_fu_636_p1 <= std_logic_vector(resize(signed(p_addr4_fu_630_p2),10));

    p_addr4_fu_630_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_614_p1) - unsigned(p_shl7_cast_fu_626_p1));
        p_addr5_cast_fu_670_p1 <= std_logic_vector(resize(signed(p_addr5_fu_664_p2),9));

    p_addr5_fu_664_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_648_p1) - unsigned(p_shl5_cast_fu_660_p1));
    p_addr6_fu_704_p2 <= std_logic_vector(unsigned(tmp_i4_trn_cast_fu_700_p1) + unsigned(p_addr4_cast_reg_1272));
    p_addr7_fu_876_p2 <= std_logic_vector(unsigned(tmp_8_i_trn_fu_857_p1) + unsigned(p_addr10_reg_1297));
    p_addr8_fu_733_p2 <= std_logic_vector(signed(p_shl_fu_717_p1) - signed(p_shl1_fu_729_p1));
    p_addr9_fu_743_p2 <= std_logic_vector(unsigned(tmp_2_i_trn9_cast_fu_739_p1) + unsigned(p_addr4_cast_reg_1272));
        p_addr_cast_fu_400_p1 <= std_logic_vector(resize(signed(p_addr_fu_394_p2),10));

    p_addr_fu_394_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_378_p1) - unsigned(p_shl1_cast_fu_390_p1));
    p_shl1_cast_fu_390_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_382_p3),9));
        p_shl1_fu_729_p1 <= std_logic_vector(resize(signed(tmp_35_fu_721_p3),32));

        p_shl2_fu_433_p1 <= std_logic_vector(resize(signed(tmp_20_fu_425_p3),32));

        p_shl3_fu_445_p1 <= std_logic_vector(resize(signed(tmp_27_fu_437_p3),32));

    p_shl4_cast_fu_648_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_640_p3),8));
        p_shl4_fu_756_p1 <= std_logic_vector(resize(signed(tmp_36_fu_748_p3),32));

    p_shl5_cast_fu_660_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_652_p3),8));
        p_shl5_fu_768_p1 <= std_logic_vector(resize(signed(tmp_37_fu_760_p3),32));

    p_shl6_cast_fu_614_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_606_p3),9));
    p_shl7_cast_fu_626_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_618_p3),9));
        p_shl8_fu_795_p1 <= std_logic_vector(resize(signed(tmp_38_fu_787_p3),32));

        p_shl9_fu_807_p1 <= std_logic_vector(resize(signed(tmp_39_fu_799_p3),32));

    p_shl_cast_fu_378_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_370_p3),9));
        p_shl_fu_717_p1 <= std_logic_vector(resize(signed(tmp_29_fu_709_p3),32));

    res_1_fu_575_p3 <= 
        ap_const_lv64_0 when (tmp_8_reg_1249(0) = '1') else 
        y_assign_reg_1232;
    res_Addr_A <= std_logic_vector(shift_left(unsigned(res_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    -- res_Addr_A_orig assign process. --
    res_Addr_A_orig_assign_proc : process(res_addr_reg_1169, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            res_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            res_Addr_A_orig <= std_logic_vector(resize(unsigned(res_addr_reg_1169),32));
        else 
            res_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    res_Clk_A <= ap_clk;
    res_Din_A <= grp_obj_detector_FCL_fu_312_ap_return;

    -- res_EN_A assign process. --
    res_EN_A_assign_proc : process(grp_obj_detector_FCL_fu_312_ap_done, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and not((ap_const_logic_0 = grp_obj_detector_FCL_fu_312_ap_done))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_logic_0 = grp_obj_detector_FCL_fu_312_ap_done))))) then 
            res_EN_A <= ap_const_logic_1;
        else 
            res_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    res_Rst_A <= ap_rst_n_inv;

    -- res_WEN_A assign process. --
    res_WEN_A_assign_proc : process(grp_obj_detector_FCL_fu_312_ap_done, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and not((ap_const_logic_0 = grp_obj_detector_FCL_fu_312_ap_done))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_logic_0 = grp_obj_detector_FCL_fu_312_ap_done))))) then 
            res_WEN_A <= ap_const_lv4_F;
        else 
            res_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    res_addr_gep_fu_136_p3 <= ap_const_lv64_0(32 - 1 downto 0);

    -- s0_address0 assign process. --
    s0_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, tmp_40_fu_476_p1, grp_obj_detector_convolve_fu_299_conv_address0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            s0_address0 <= tmp_40_fu_476_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            s0_address0 <= grp_obj_detector_convolve_fu_299_conv_address0;
        else 
            s0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- s0_ce0 assign process. --
    s0_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, grp_obj_detector_convolve_fu_299_conv_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            s0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            s0_ce0 <= grp_obj_detector_convolve_fu_299_conv_ce0;
        else 
            s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    s0_d0 <= grp_obj_detector_convolve_fu_299_conv_d0;

    -- s0_we0 assign process. --
    s0_we0_assign_proc : process(grp_obj_detector_convolve_fu_299_conv_we0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            s0_we0 <= grp_obj_detector_convolve_fu_299_conv_we0;
        else 
            s0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s1_address0 assign process. --
    s1_address0_assign_proc : process(tmp_40_reg_1216, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st12_fsm_11, tmp_41_fu_846_p1, tmp_49_fu_984_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            s1_address0 <= tmp_40_reg_1216(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            s1_address0 <= tmp_49_fu_984_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            s1_address0 <= tmp_41_fu_846_p1(12 - 1 downto 0);
        else 
            s1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- s1_address1 assign process. --
    s1_address1_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st15_fsm_14, tmp_43_fu_866_p1, tmp_46_fu_890_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            s1_address1 <= tmp_46_fu_890_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            s1_address1 <= tmp_43_fu_866_p1(12 - 1 downto 0);
        else 
            s1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- s1_ce0 assign process. --
    s1_ce0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            s1_ce0 <= ap_const_logic_1;
        else 
            s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s1_ce1 assign process. --
    s1_ce1_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            s1_ce1 <= ap_const_logic_1;
        else 
            s1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s1_d0 <= tmp_13_i_reg_1259;

    -- s1_we0 assign process. --
    s1_we0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            s1_we0 <= ap_const_logic_1;
        else 
            s1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_address0 assign process. --
    s2_address0_assign_proc : process(grp_obj_detector_flatten_fu_323_inp_address0, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st22_fsm_21, tmp_52_fu_1165_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            s2_address0 <= tmp_52_fu_1165_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            s2_address0 <= grp_obj_detector_flatten_fu_323_inp_address0;
        else 
            s2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- s2_ce0 assign process. --
    s2_ce0_assign_proc : process(grp_obj_detector_flatten_fu_323_inp_ce0, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            s2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            s2_ce0 <= grp_obj_detector_flatten_fu_323_inp_ce0;
        else 
            s2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    s2_d0 <= 
        reg_341 when (tmp_34_reg_1388(0) = '1') else 
        max_4_reg_1381;

    -- s2_we0 assign process. --
    s2_we0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            s2_we0 <= ap_const_logic_1;
        else 
            s2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s3_address0 assign process. --
    s3_address0_assign_proc : process(grp_obj_detector_FCL_fu_312_inp_address0, grp_obj_detector_flatten_fu_323_out_r_address0, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            s3_address0 <= grp_obj_detector_flatten_fu_323_out_r_address0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25))) then 
            s3_address0 <= grp_obj_detector_FCL_fu_312_inp_address0;
        else 
            s3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- s3_ce0 assign process. --
    s3_ce0_assign_proc : process(grp_obj_detector_FCL_fu_312_inp_ce0, grp_obj_detector_flatten_fu_323_out_r_ce0, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            s3_ce0 <= grp_obj_detector_flatten_fu_323_out_r_ce0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25))) then 
            s3_ce0 <= grp_obj_detector_FCL_fu_312_inp_ce0;
        else 
            s3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    s3_d0 <= grp_obj_detector_flatten_fu_323_out_r_d0;

    -- s3_we0 assign process. --
    s3_we0_assign_proc : process(grp_obj_detector_flatten_fu_323_out_r_we0, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            s3_we0 <= grp_obj_detector_flatten_fu_323_out_r_we0;
        else 
            s3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_i_fu_528_p2 <= (or_cond_i_i_i_fu_510_p2 xor or_cond1_i_i_i_fu_522_p2);
    sel_tmp2_i_fu_581_p3 <= 
        res_1_fu_575_p3 when (sel_tmp1_i_reg_1244(0) = '1') else 
        ap_const_lv64_0;
    tmp_10_fu_915_p4 <= max_3_i_to_int_fu_912_p1(30 downto 23);
    tmp_11_fu_640_p3 <= (i2_reg_266 & ap_const_lv4_0);
    tmp_12_fu_941_p2 <= (notrhs1_fu_935_p2 or notlhs1_fu_929_p2);
    tmp_12_i_trn_fu_881_p1 <= std_logic_vector(resize(unsigned(j_i6_reg_288),32));
    tmp_13_fu_959_p2 <= (notrhs2_fu_953_p2 or notlhs2_fu_947_p2);
    tmp_13_i_fu_329_p0 <= 
        y_assign_reg_1232 when (or_cond_i_i_i_reg_1239(0) = '1') else 
        sel_tmp2_i_reg_1254;
    tmp_14_fu_965_p2 <= (tmp_12_fu_941_p2 and tmp_13_fu_959_p2);
    tmp_16_fu_971_p2 <= (tmp_14_fu_965_p2 and grp_fu_336_p2);
    tmp_17_fu_991_p4 <= max_7_i_to_int_fu_988_p1(30 downto 23);
    tmp_18_fu_652_p3 <= (i2_reg_266 & ap_const_lv2_0);
    tmp_19_fu_1008_p4 <= max_6_i_to_int_fu_1005_p1(30 downto 23);
    tmp_1_fu_382_p3 <= (i1_reg_233 & ap_const_lv3_0);
    tmp_1_i_fu_694_p2 <= (tmp_i3_fu_686_p3 or ap_const_lv5_1);
    tmp_1_i_i_i_fu_504_p2 <= "1" when (loc_V_1_fu_494_p1 = ap_const_lv52_0) else "0";
    tmp_20_fu_425_p3 <= (p_addr1_fu_420_p2 & ap_const_lv5_0);
    tmp_21_fu_1034_p2 <= (notrhs3_fu_1028_p2 or notlhs3_fu_1022_p2);
    tmp_22_fu_1052_p2 <= (notrhs4_fu_1046_p2 or notlhs4_fu_1040_p2);
    tmp_23_fu_1058_p2 <= (tmp_21_fu_1034_p2 and tmp_22_fu_1052_p2);
    tmp_25_fu_1064_p2 <= (tmp_23_fu_1058_p2 and tmp_24_reg_1371);
    tmp_26_fu_1079_p4 <= max_8_i_to_int_fu_1075_p1(30 downto 23);
    tmp_27_fu_437_p3 <= (p_addr1_fu_420_p2 & ap_const_lv3_0);
    tmp_28_fu_1096_p4 <= max_1_i_to_int_fu_1093_p1(30 downto 23);
    tmp_29_fu_709_p3 <= (p_addr6_fu_704_p2 & ap_const_lv5_0);
    tmp_2_fu_606_p3 <= (i2_reg_266 & ap_const_lv5_0);
    tmp_2_i_i_i_fu_516_p2 <= "0" when (loc_V_fu_484_p4 = ap_const_lv11_7FF) else "1";
    tmp_2_i_trn9_cast_fu_739_p1 <= std_logic_vector(resize(unsigned(tmp_1_i_fu_694_p2),10));
    tmp_30_fu_1122_p2 <= (notrhs5_fu_1116_p2 or notlhs5_fu_1110_p2);
    tmp_31_fu_1140_p2 <= (notrhs6_fu_1134_p2 or notlhs6_fu_1128_p2);
    tmp_32_fu_1146_p2 <= (tmp_30_fu_1122_p2 and tmp_31_fu_1140_p2);
    tmp_34_fu_1152_p2 <= (tmp_32_fu_1146_p2 and grp_fu_336_p2);
    tmp_35_fu_721_p3 <= (p_addr6_fu_704_p2 & ap_const_lv3_0);
    tmp_36_fu_748_p3 <= (p_addr9_fu_743_p2 & ap_const_lv5_0);
    tmp_37_fu_760_p3 <= (p_addr9_fu_743_p2 & ap_const_lv3_0);
    tmp_38_fu_787_p3 <= (p_addr11_fu_782_p2 & ap_const_lv4_0);
    tmp_39_fu_799_p3 <= (p_addr11_fu_782_p2 & ap_const_lv2_0);
    tmp_3_fu_563_p2 <= (notrhs_fu_557_p2 or notlhs_fu_551_p2);
    tmp_3_i_trn_cast_fu_778_p1 <= std_logic_vector(resize(unsigned(i_i1_reg_277),9));
    tmp_40_fu_476_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_471_p2),64));
    tmp_41_fu_846_p1 <= std_logic_vector(resize(unsigned(p_addr14_fu_841_p2),64));
    tmp_42_fu_547_p1 <= inp_load_i_to_int_fu_534_p1(23 - 1 downto 0);
    tmp_43_fu_866_p1 <= std_logic_vector(resize(unsigned(p_addr15_fu_861_p2),64));
    tmp_44_fu_908_p1 <= max_i_to_int_fu_894_p1(23 - 1 downto 0);
    tmp_45_fu_925_p1 <= max_3_i_to_int_fu_912_p1(23 - 1 downto 0);
    tmp_46_fu_890_p1 <= std_logic_vector(resize(unsigned(p_addr13_reg_1326),64));
    tmp_47_fu_1001_p1 <= max_7_i_to_int_fu_988_p1(23 - 1 downto 0);
    tmp_48_fu_1018_p1 <= max_6_i_to_int_fu_1005_p1(23 - 1 downto 0);
    tmp_49_fu_984_p1 <= std_logic_vector(resize(unsigned(p_addr7_reg_1331),64));
    tmp_4_i_fu_829_p3 <= (j_i6_reg_288 & ap_const_lv1_0);
    tmp_50_fu_1089_p1 <= max_8_i_to_int_fu_1075_p1(23 - 1 downto 0);
    tmp_51_fu_1106_p1 <= max_1_i_to_int_fu_1093_p1(23 - 1 downto 0);
    tmp_52_fu_1165_p1 <= std_logic_vector(resize(unsigned(p_addr16_reg_1336),64));
    tmp_5_i_trn_fu_837_p1 <= std_logic_vector(resize(unsigned(tmp_4_i_fu_829_p3),32));
    tmp_6_fu_618_p3 <= (i2_reg_266 & ap_const_lv3_0);
    tmp_7_i_fu_851_p2 <= (tmp_4_i_fu_829_p3 or ap_const_lv5_1);
    tmp_8_fu_569_p2 <= (tmp_3_fu_563_p2 and grp_fu_336_p2);
    tmp_8_i_trn_fu_857_p1 <= std_logic_vector(resize(unsigned(tmp_7_i_fu_851_p2),32));
    tmp_9_fu_898_p4 <= max_i_to_int_fu_894_p1(30 downto 23);
    tmp_fu_537_p4 <= inp_load_i_to_int_fu_534_p1(30 downto 23);
    tmp_i3_fu_686_p3 <= (i_i1_reg_277 & ap_const_lv1_0);
    tmp_i4_trn_cast_fu_700_p1 <= std_logic_vector(resize(unsigned(tmp_i3_fu_686_p3),10));
    tmp_i_i_i_fu_498_p2 <= "1" when (loc_V_fu_484_p4 = ap_const_lv11_0) else "0";
    tmp_i_trn_cast_fu_416_p1 <= std_logic_vector(resize(unsigned(i_i_reg_244),10));
    tmp_i_trn_fu_467_p1 <= std_logic_vector(resize(unsigned(j_i_reg_255),32));
    tmp_s_fu_370_p3 <= (i1_reg_233 & ap_const_lv5_0);
    y_assign_fu_332_p0 <= s0_q0;
end behav;
