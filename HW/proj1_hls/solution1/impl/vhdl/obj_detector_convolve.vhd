-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity obj_detector_convolve is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_EN_A : OUT STD_LOGIC;
    A_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    B_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_EN_A : OUT STD_LOGIC;
    B_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp : IN STD_LOGIC_VECTOR (2 downto 0);
    conv_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_ce0 : OUT STD_LOGIC;
    conv_we0 : OUT STD_LOGIC;
    conv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp1 : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of obj_detector_convolve is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_33 : BOOLEAN;
    signal p_addr6_cast_fu_224_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr6_cast_reg_478 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr2_fu_244_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr2_reg_483 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_fu_256_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_reg_491 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_77 : BOOLEAN;
    signal exitcond3_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr8_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr8_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_307_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_504 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_92 : BOOLEAN;
    signal exitcond2_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_addr_reg_509 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_4_fu_327_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_fu_343_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_522 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_110 : BOOLEAN;
    signal p_addr_cast_fu_384_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr_cast_reg_527 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr4_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr4_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_419_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal l_1_fu_435_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_1_reg_545 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_130 : BOOLEAN;
    signal exitcond_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_145 : BOOLEAN;
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_155 : BOOLEAN;
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_164 : BOOLEAN;
    signal i_reg_113 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_125 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_reg_137 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_149 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_185 : BOOLEAN;
    signal l_reg_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_59_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_207 : BOOLEAN;
    signal grp_fu_188_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_194_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_fu_206_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl10_cast_fu_202_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl11_cast_fu_214_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr6_fu_218_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_fu_232_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_trn_cast_fu_228_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_240_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_trn_cast_fu_262_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr7_fu_266_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_54_fu_271_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_55_fu_283_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl6_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_trn_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr9_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast4_fu_333_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_fu_349_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_60_fu_354_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_61_fu_366_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl15_cast_fu_362_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl16_cast_fu_374_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_addr_fu_378_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_trn_cast_fu_388_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr3_fu_392_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_62_fu_401_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr3_cast_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl7_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_cast2_fu_425_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_fu_441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_trn_cast_fu_446_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr1_fu_450_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr1_cast_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_trn_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr5_fu_468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_ce : STD_LOGIC;
    signal grp_fu_188_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component obj_detector_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    obj_detector_fadd_32ns_32ns_32_5_full_dsp_U0 : component obj_detector_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_183_p0,
        din1 => grp_fu_183_p1,
        ce => grp_fu_183_ce,
        dout => grp_fu_183_p2);

    obj_detector_fmul_32ns_32ns_32_4_max_dsp_U1 : component obj_detector_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_188_p0,
        din1 => grp_fu_188_p1,
        ce => grp_fu_188_ce,
        dout => grp_fu_188_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_113 assign process. --
    i_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond2_fu_301_p2)))) then 
                i_reg_113 <= i_4_fu_327_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_113 <= ap_const_lv5_2;
            end if; 
        end if;
    end process;

    -- j_reg_125 assign process. --
    j_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_250_p2 = ap_const_lv1_0))) then 
                j_reg_125 <= ap_const_lv5_2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond1_fu_337_p2)))) then 
                j_reg_125 <= j_1_fu_419_p2;
            end if; 
        end if;
    end process;

    -- k_reg_149 assign process. --
    k_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_429_p2)))) then 
                k_reg_149 <= k_1_reg_522;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_301_p2))) then 
                k_reg_149 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- l_reg_172 assign process. --
    l_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond1_fu_337_p2))) then 
                l_reg_172 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                l_reg_172 <= l_1_reg_545;
            end if; 
        end if;
    end process;

    -- tmp_2_reg_137 assign process. --
    tmp_2_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_429_p2)))) then 
                tmp_2_reg_137 <= tmp_5_reg_160;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_301_p2))) then 
                tmp_2_reg_137 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- tmp_5_reg_160 assign process. --
    tmp_5_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond1_fu_337_p2))) then 
                tmp_5_reg_160 <= tmp_2_reg_137;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                tmp_5_reg_160 <= tmp_10_reg_575;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_301_p2))) then
                conv_addr_reg_509 <= tmp_59_fu_322_p1(12 - 1 downto 0);
                tmp_s_reg_504 <= tmp_s_fu_307_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                k_1_reg_522 <= k_1_fu_343_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                l_1_reg_545 <= l_1_fu_435_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                p_addr2_reg_483 <= p_addr2_fu_244_p2;
                    p_addr6_cast_reg_478(9 downto 3) <= p_addr6_cast_fu_224_p1(9 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond1_fu_337_p2))) then
                p_addr4_reg_532 <= p_addr4_fu_413_p2;
                    p_addr_cast_reg_527(11 downto 2) <= p_addr_cast_fu_384_p1(11 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_250_p2 = ap_const_lv1_0))) then
                    p_addr8_reg_496(31 downto 3) <= p_addr8_fu_295_p2(31 downto 3);
                tmp2_reg_491 <= tmp2_fu_256_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                tmp_10_reg_575 <= grp_fu_183_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_9_reg_570 <= grp_fu_188_p2;
            end if;
        end if;
    end process;
    p_addr6_cast_reg_478(2 downto 0) <= "000";
    p_addr8_reg_496(2 downto 0) <= "000";
    p_addr_cast_reg_527(1 downto 0) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond3_fu_250_p2, exitcond2_fu_301_p2, exitcond1_fu_337_p2, exitcond_fu_429_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond3_fu_250_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_301_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_337_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = exitcond_fu_429_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    A_Addr_A <= std_logic_vector(shift_left(unsigned(A_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    A_Addr_A_orig <= tmp_63_fu_459_p1(32 - 1 downto 0);
    A_Din_A <= ap_const_lv32_0;

    -- A_EN_A assign process. --
    A_EN_A_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            A_EN_A <= ap_const_logic_1;
        else 
            A_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    A_WEN_A <= ap_const_lv4_0;
    B_Addr_A <= std_logic_vector(shift_left(unsigned(B_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    B_Addr_A_orig <= tmp_64_fu_473_p1(32 - 1 downto 0);
    B_Din_A <= ap_const_lv32_0;

    -- B_EN_A assign process. --
    B_EN_A_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            B_EN_A <= ap_const_logic_1;
        else 
            B_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_WEN_A <= ap_const_lv4_0;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond3_fu_250_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_250_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond3_fu_250_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_250_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_110 assign process. --
    ap_sig_bdd_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_110 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_130 assign process. --
    ap_sig_bdd_130_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_130 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_145 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_155 assign process. --
    ap_sig_bdd_155_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_155 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_164 assign process. --
    ap_sig_bdd_164_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_164 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_185 assign process. --
    ap_sig_bdd_185_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_185 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_207 assign process. --
    ap_sig_bdd_207_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_207 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_33 assign process. --
    ap_sig_bdd_33_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_33 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_77 assign process. --
    ap_sig_bdd_77_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_77 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_92 assign process. --
    ap_sig_bdd_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_92 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_207)
    begin
        if (ap_sig_bdd_207) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_164)
    begin
        if (ap_sig_bdd_164) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_185)
    begin
        if (ap_sig_bdd_185) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_33)
    begin
        if (ap_sig_bdd_33) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_77)
    begin
        if (ap_sig_bdd_77) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_92)
    begin
        if (ap_sig_bdd_92) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_110)
    begin
        if (ap_sig_bdd_110) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_130)
    begin
        if (ap_sig_bdd_130) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_145)
    begin
        if (ap_sig_bdd_145) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_155)
    begin
        if (ap_sig_bdd_155) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- conv_address0 assign process. --
    conv_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, conv_addr_reg_509, ap_sig_cseq_ST_st15_fsm_14, tmp_59_fu_322_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            conv_address0 <= conv_addr_reg_509;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            conv_address0 <= tmp_59_fu_322_p1(12 - 1 downto 0);
        else 
            conv_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- conv_ce0 assign process. --
    conv_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            conv_ce0 <= ap_const_logic_1;
        else 
            conv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- conv_d0 assign process. --
    conv_d0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_10_reg_575, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            conv_d0 <= tmp_10_reg_575;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            conv_d0 <= ap_const_lv32_0;
        else 
            conv_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- conv_we0 assign process. --
    conv_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond2_fu_301_p2, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_301_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            conv_we0 <= ap_const_logic_1;
        else 
            conv_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_337_p2 <= "1" when (k_reg_149 = ap_const_lv3_5) else "0";
    exitcond2_fu_301_p2 <= "1" when (j_reg_125 = ap_const_lv5_1A) else "0";
    exitcond3_fu_250_p2 <= "1" when (i_reg_113 = ap_const_lv5_1A) else "0";
    exitcond_fu_429_p2 <= "1" when (l_reg_172 = ap_const_lv3_5) else "0";
    grp_fu_183_ce <= ap_const_logic_1;
    grp_fu_183_p0 <= tmp_5_reg_160;
    grp_fu_183_p1 <= tmp_9_reg_570;
    grp_fu_188_ce <= ap_const_logic_1;
    grp_fu_188_p0 <= A_Dout_A;
    grp_fu_188_p1 <= B_Dout_A;
    i_4_fu_327_p2 <= std_logic_vector(unsigned(i_reg_113) + unsigned(ap_const_lv5_1));
    j_1_fu_419_p2 <= std_logic_vector(unsigned(j_reg_125) + unsigned(ap_const_lv5_1));
    k_1_fu_343_p2 <= std_logic_vector(unsigned(k_reg_149) + unsigned(ap_const_lv3_1));
    k_cast4_fu_333_p1 <= std_logic_vector(resize(unsigned(k_reg_149),5));
    l_1_fu_435_p2 <= std_logic_vector(unsigned(l_reg_172) + unsigned(ap_const_lv3_1));
    l_cast2_fu_425_p1 <= std_logic_vector(resize(unsigned(l_reg_172),5));
        p_addr1_cast_fu_455_p1 <= std_logic_vector(resize(signed(p_addr1_fu_450_p2),32));

    p_addr1_fu_450_p2 <= std_logic_vector(unsigned(tmp_6_trn_cast_fu_446_p1) + unsigned(p_addr_cast_reg_527));
    p_addr2_fu_244_p2 <= std_logic_vector(unsigned(tmp_cast_trn_cast_fu_228_p1) + unsigned(p_shl_cast_fu_240_p1));
    p_addr3_cast_fu_397_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_392_p2),32));
    p_addr3_fu_392_p2 <= std_logic_vector(unsigned(p_addr2_reg_483) + unsigned(tmp_4_trn_cast_fu_388_p1));
    p_addr4_fu_413_p2 <= std_logic_vector(unsigned(p_addr3_cast_fu_397_p1) + unsigned(p_shl7_fu_409_p1));
    p_addr5_fu_468_p2 <= std_logic_vector(unsigned(tmp_7_trn_fu_464_p1) + unsigned(p_addr4_reg_532));
        p_addr6_cast_fu_224_p1 <= std_logic_vector(resize(signed(p_addr6_fu_218_p2),10));

    p_addr6_fu_218_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_202_p1) - unsigned(p_shl11_cast_fu_214_p1));
    p_addr7_fu_266_p2 <= std_logic_vector(signed(p_addr6_cast_reg_478) + signed(tmp_8_trn_cast_fu_262_p1));
    p_addr8_fu_295_p2 <= std_logic_vector(signed(p_shl_fu_279_p1) - signed(p_shl6_fu_291_p1));
    p_addr9_fu_317_p2 <= std_logic_vector(signed(p_addr8_reg_496) + signed(tmp_1_trn_fu_313_p1));
        p_addr_cast_fu_384_p1 <= std_logic_vector(resize(signed(p_addr_fu_378_p2),12));

    p_addr_fu_378_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_362_p1) - unsigned(p_shl16_cast_fu_374_p1));
    p_shl10_cast_fu_202_p1 <= std_logic_vector(resize(unsigned(tmp_56_fu_194_p3),9));
    p_shl11_cast_fu_214_p1 <= std_logic_vector(resize(unsigned(tmp_57_fu_206_p3),9));
    p_shl15_cast_fu_362_p1 <= std_logic_vector(resize(unsigned(tmp_60_fu_354_p3),11));
    p_shl16_cast_fu_374_p1 <= std_logic_vector(resize(unsigned(tmp_61_fu_366_p3),11));
        p_shl6_fu_291_p1 <= std_logic_vector(resize(signed(tmp_55_fu_283_p3),32));

    p_shl7_fu_409_p1 <= std_logic_vector(resize(unsigned(tmp_62_fu_401_p3),32));
    p_shl_cast_fu_240_p1 <= std_logic_vector(resize(unsigned(tmp_58_fu_232_p3),6));
        p_shl_fu_279_p1 <= std_logic_vector(resize(signed(tmp_54_fu_271_p3),32));

    tmp2_fu_256_p2 <= std_logic_vector(unsigned(i_reg_113) + unsigned(ap_const_lv5_1E));
    tmp_1_trn_fu_313_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_307_p2),32));
    tmp_4_trn_cast_fu_388_p1 <= std_logic_vector(resize(unsigned(k_reg_149),6));
    tmp_54_fu_271_p3 <= (p_addr7_fu_266_p2 & ap_const_lv5_0);
    tmp_55_fu_283_p3 <= (p_addr7_fu_266_p2 & ap_const_lv3_0);
    tmp_56_fu_194_p3 <= (tmp1 & ap_const_lv5_0);
    tmp_57_fu_206_p3 <= (tmp1 & ap_const_lv3_0);
    tmp_58_fu_232_p3 <= (tmp & ap_const_lv2_0);
    tmp_59_fu_322_p1 <= std_logic_vector(resize(unsigned(p_addr9_fu_317_p2),64));
    tmp_60_fu_354_p3 <= (x_fu_349_p2 & ap_const_lv5_0);
    tmp_61_fu_366_p3 <= (x_fu_349_p2 & ap_const_lv2_0);
    tmp_62_fu_401_p3 <= (p_addr3_fu_392_p2 & ap_const_lv2_0);
    tmp_63_fu_459_p1 <= std_logic_vector(resize(unsigned(p_addr1_cast_fu_455_p1),64));
    tmp_64_fu_473_p1 <= std_logic_vector(resize(unsigned(p_addr5_fu_468_p2),64));
    tmp_6_trn_cast_fu_446_p1 <= std_logic_vector(resize(unsigned(y_fu_441_p2),12));
    tmp_7_trn_fu_464_p1 <= std_logic_vector(resize(unsigned(l_reg_172),32));
    tmp_8_trn_cast_fu_262_p1 <= std_logic_vector(resize(unsigned(tmp2_fu_256_p2),10));
    tmp_cast_trn_cast_fu_228_p1 <= std_logic_vector(resize(unsigned(tmp),6));
    tmp_s_fu_307_p2 <= std_logic_vector(unsigned(j_reg_125) + unsigned(ap_const_lv5_1E));
    x_fu_349_p2 <= std_logic_vector(unsigned(k_cast4_fu_333_p1) + unsigned(tmp2_reg_491));
    y_fu_441_p2 <= std_logic_vector(signed(tmp_s_reg_504) + signed(l_cast2_fu_425_p1));
end behav;
