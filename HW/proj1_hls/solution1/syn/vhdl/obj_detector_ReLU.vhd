-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity obj_detector_ReLU is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inp_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    inp_ce0 : OUT STD_LOGIC;
    inp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_2 : IN STD_LOGIC_VECTOR (2 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_21 : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of obj_detector_ReLU is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal p_addr_cast_fu_146_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr_cast_reg_356 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr12_cast_fu_180_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr12_cast_reg_361 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_fu_190_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_369 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_56 : BOOLEAN;
    signal p_addr2_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr2_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr15_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr15_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_276_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_387 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_73 : BOOLEAN;
    signal exitcond_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr16_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr16_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_88 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_99 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_94 : BOOLEAN;
    signal tmp_392_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_394_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_330_fu_110_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_330_fu_110_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_116_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_385_fu_128_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl9_cast_fu_124_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl10_cast_fu_136_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr_fu_140_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_386_fu_150_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_387_fu_162_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_158_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl11_cast_fu_170_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr12_fu_174_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_trn_cast_fu_196_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr1_fu_200_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_388_fu_205_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_389_fu_217_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl1_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr13_fu_235_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_390_fu_240_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_391_fu_252_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl3_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_trn_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr3_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_load_to_int_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_305_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_393_fu_315_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_329_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_330_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_331_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_330_fu_110_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component obj_detector_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    obj_detector_fcmp_32ns_32ns_1_1_U14 : component obj_detector_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_330_fu_110_p0,
        din1 => tmp_330_fu_110_p1,
        opcode => tmp_330_fu_110_opcode,
        dout => tmp_330_fu_110_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_88 assign process. --
    i_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_270_p2)))) then 
                i_reg_88 <= i_5_reg_369;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_88 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- j_reg_99 assign process. --
    j_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                j_reg_99 <= j_1_reg_387;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_184_p2 = ap_const_lv1_0))) then 
                j_reg_99 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_5_reg_369 <= i_5_fu_190_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_387 <= j_1_fu_276_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    p_addr12_cast_reg_361(9 downto 3) <= p_addr12_cast_fu_180_p1(9 downto 3);
                    p_addr_cast_reg_356(9 downto 3) <= p_addr_cast_fu_146_p1(9 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_184_p2 = ap_const_lv1_0))) then
                    p_addr15_reg_379(31 downto 3) <= p_addr15_fu_264_p2(31 downto 3);
                    p_addr2_reg_374(31 downto 3) <= p_addr2_fu_229_p2(31 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_270_p2))) then
                p_addr16_reg_397 <= p_addr16_fu_296_p2;
            end if;
        end if;
    end process;
    p_addr_cast_reg_356(2 downto 0) <= "000";
    p_addr12_cast_reg_361(2 downto 0) <= "000";
    p_addr2_reg_374(2 downto 0) <= "000";
    p_addr15_reg_379(2 downto 0) <= "000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_184_p2, exitcond_fu_270_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_184_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond_fu_270_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_184_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_184_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_184_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_184_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_56 assign process. --
    ap_sig_bdd_56_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_56 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_73 assign process. --
    ap_sig_bdd_73_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_73 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_94 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_56)
    begin
        if (ap_sig_bdd_56) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_73)
    begin
        if (ap_sig_bdd_73) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_94)
    begin
        if (ap_sig_bdd_94) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_184_p2 <= "1" when (i_reg_88 = ap_const_lv5_18) else "0";
    exitcond_fu_270_p2 <= "1" when (j_reg_99 = ap_const_lv5_18) else "0";
    i_5_fu_190_p2 <= std_logic_vector(unsigned(i_reg_88) + unsigned(ap_const_lv5_1));
    inp_address0 <= tmp_392_fu_291_p1(12 - 1 downto 0);

    -- inp_ce0 assign process. --
    inp_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            inp_ce0 <= ap_const_logic_1;
        else 
            inp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inp_load_to_int_fu_301_p1 <= inp_q0;
    j_1_fu_276_p2 <= std_logic_vector(unsigned(j_reg_99) + unsigned(ap_const_lv5_1));
    notlhs_fu_319_p2 <= "0" when (tmp_s_fu_305_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_325_p2 <= "1" when (tmp_393_fu_315_p1 = ap_const_lv23_0) else "0";
    out_r_address0 <= tmp_394_fu_343_p1(12 - 1 downto 0);

    -- out_r_ce0 assign process. --
    out_r_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= 
        inp_q0 when (tmp_331_fu_337_p2(0) = '1') else 
        ap_const_lv32_0;

    -- out_r_we0 assign process. --
    out_r_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_addr12_cast_fu_180_p1 <= std_logic_vector(resize(signed(p_addr12_fu_174_p2),10));

    p_addr12_fu_174_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_158_p1) - unsigned(p_shl11_cast_fu_170_p1));
    p_addr13_fu_235_p2 <= std_logic_vector(signed(p_addr12_cast_reg_361) + signed(tmp_trn_cast_fu_196_p1));
    p_addr15_fu_264_p2 <= std_logic_vector(signed(p_shl2_fu_248_p1) - signed(p_shl3_fu_260_p1));
    p_addr16_fu_296_p2 <= std_logic_vector(unsigned(tmp_trn_fu_282_p1) + unsigned(p_addr15_reg_379));
    p_addr1_fu_200_p2 <= std_logic_vector(signed(p_addr_cast_reg_356) + signed(tmp_trn_cast_fu_196_p1));
    p_addr2_fu_229_p2 <= std_logic_vector(signed(p_shl_fu_213_p1) - signed(p_shl1_fu_225_p1));
    p_addr3_fu_286_p2 <= std_logic_vector(unsigned(tmp_trn_fu_282_p1) + unsigned(p_addr2_reg_374));
        p_addr_cast_fu_146_p1 <= std_logic_vector(resize(signed(p_addr_fu_140_p2),10));

    p_addr_fu_140_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_124_p1) - unsigned(p_shl10_cast_fu_136_p1));
    p_shl10_cast_fu_136_p1 <= std_logic_vector(resize(unsigned(tmp_385_fu_128_p3),9));
    p_shl11_cast_fu_170_p1 <= std_logic_vector(resize(unsigned(tmp_387_fu_162_p3),9));
        p_shl1_fu_225_p1 <= std_logic_vector(resize(signed(tmp_389_fu_217_p3),32));

        p_shl2_fu_248_p1 <= std_logic_vector(resize(signed(tmp_390_fu_240_p3),32));

        p_shl3_fu_260_p1 <= std_logic_vector(resize(signed(tmp_391_fu_252_p3),32));

    p_shl9_cast_fu_124_p1 <= std_logic_vector(resize(unsigned(tmp_fu_116_p3),9));
    p_shl_cast_fu_158_p1 <= std_logic_vector(resize(unsigned(tmp_386_fu_150_p3),9));
        p_shl_fu_213_p1 <= std_logic_vector(resize(signed(tmp_388_fu_205_p3),32));

    tmp_329_fu_331_p2 <= (notrhs_fu_325_p2 or notlhs_fu_319_p2);
    tmp_330_fu_110_opcode <= ap_const_lv5_2;
    tmp_330_fu_110_p0 <= inp_q0;
    tmp_330_fu_110_p1 <= ap_const_lv32_0;
    tmp_331_fu_337_p2 <= (tmp_329_fu_331_p2 and tmp_330_fu_110_p2);
    tmp_385_fu_128_p3 <= (tmp_2 & ap_const_lv3_0);
    tmp_386_fu_150_p3 <= (tmp_21 & ap_const_lv5_0);
    tmp_387_fu_162_p3 <= (tmp_21 & ap_const_lv3_0);
    tmp_388_fu_205_p3 <= (p_addr1_fu_200_p2 & ap_const_lv5_0);
    tmp_389_fu_217_p3 <= (p_addr1_fu_200_p2 & ap_const_lv3_0);
    tmp_390_fu_240_p3 <= (p_addr13_fu_235_p2 & ap_const_lv5_0);
    tmp_391_fu_252_p3 <= (p_addr13_fu_235_p2 & ap_const_lv3_0);
    tmp_392_fu_291_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_286_p2),64));
    tmp_393_fu_315_p1 <= inp_load_to_int_fu_301_p1(23 - 1 downto 0);
    tmp_394_fu_343_p1 <= std_logic_vector(resize(unsigned(p_addr16_reg_397),64));
    tmp_fu_116_p3 <= (tmp_2 & ap_const_lv5_0);
    tmp_s_fu_305_p4 <= inp_load_to_int_fu_301_p1(30 downto 23);
    tmp_trn_cast_fu_196_p1 <= std_logic_vector(resize(unsigned(i_reg_88),10));
    tmp_trn_fu_282_p1 <= std_logic_vector(resize(unsigned(j_reg_99),32));
end behav;
