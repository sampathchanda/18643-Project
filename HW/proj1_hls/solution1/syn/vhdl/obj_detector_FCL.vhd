-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity obj_detector_FCL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inp_ce0 : OUT STD_LOGIC;
    inp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    W_EN_A : OUT STD_LOGIC;
    W_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    W_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    W_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    W_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of obj_detector_FCL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_pp0_stg4_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st12_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_360 : STD_LOGIC_VECTOR (10 downto 0) := "01101100000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_360 : STD_LOGIC_VECTOR (9 downto 0) := "1101100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal out_reg_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_88 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_cast_fu_110_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_cast_reg_149 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_154 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_62 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_154_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_124_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_158 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_86 : BOOLEAN;
    signal grp_fu_104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg4_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_98 : BOOLEAN;
    signal grp_fu_99_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_phi_fu_92_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_99_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_99_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_104_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_104_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_trn_cast_fu_135_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_addr1_fu_139_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_99_ce : STD_LOGIC;
    signal grp_fu_104_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st12_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_163 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component obj_detector_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    obj_detector_fadd_32ns_32ns_32_5_full_dsp_U48 : component obj_detector_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_99_p0,
        din1 => grp_fu_99_p1,
        ce => grp_fu_99_ce,
        dout => grp_fu_99_p2);

    obj_detector_fmul_32ns_32ns_32_4_max_dsp_U49 : component obj_detector_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_104_p0,
        din1 => grp_fu_104_p1,
        ce => grp_fu_104_ce,
        dout => grp_fu_104_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_fu_118_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond_reg_154 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5) and not((exitcond_reg_154 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_88 assign process. --
    i_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_reg_154 = ap_const_lv1_0))) then 
                i_reg_88 <= i_5_reg_158;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_88 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- out_reg_76 assign process. --
    out_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5) and (ap_reg_ppstg_exitcond_reg_154_pp0_it1 = ap_const_lv1_0))) then 
                out_reg_76 <= grp_fu_99_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                out_reg_76 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_reg_154_pp0_it1 <= exitcond_reg_154;
                exitcond_reg_154 <= exitcond_fu_118_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                i_5_reg_158 <= i_5_fu_124_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    tmp_16_cast_reg_149(6 downto 5) <= tmp_16_cast_fu_110_p3(6 downto 5);    tmp_16_cast_reg_149(9 downto 8) <= tmp_16_cast_fu_110_p3(9 downto 8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_154 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then
                tmp_s_reg_183 <= grp_fu_104_p2;
            end if;
        end if;
    end process;
    tmp_16_cast_reg_149(4 downto 0) <= "00000";
    tmp_16_cast_reg_149(7 downto 7) <= "0";
    tmp_16_cast_reg_149(10) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_118_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_5)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_118_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_6;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
            when ap_ST_pp0_stg3_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_5;
            when ap_ST_pp0_stg4_fsm_5 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_6;
                end if;
            when ap_ST_st12_fsm_6 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    W_Addr_A <= std_logic_vector(shift_left(unsigned(W_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    W_Addr_A_orig <= tmp_16_fu_144_p1(32 - 1 downto 0);
    W_Din_A <= ap_const_lv32_0;

    -- W_EN_A assign process. --
    W_EN_A_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            W_EN_A <= ap_const_logic_1;
        else 
            W_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    W_WEN_A <= ap_const_lv4_0;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st12_fsm_6)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st12_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= out_reg_76;

    -- ap_sig_bdd_163 assign process. --
    ap_sig_bdd_163_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_163 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_62 assign process. --
    ap_sig_bdd_62_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_62 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_86 assign process. --
    ap_sig_bdd_86_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_86 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_98 assign process. --
    ap_sig_bdd_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_98 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_62)
    begin
        if (ap_sig_bdd_62) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_86)
    begin
        if (ap_sig_bdd_86) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_5_assign_proc : process(ap_sig_bdd_98)
    begin
        if (ap_sig_bdd_98) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_6 assign process. --
    ap_sig_cseq_ST_st12_fsm_6_assign_proc : process(ap_sig_bdd_163)
    begin
        if (ap_sig_bdd_163) then 
            ap_sig_cseq_ST_st12_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_118_p2 <= "1" when (i_phi_fu_92_p4 = ap_const_lv10_360) else "0";
    grp_fu_104_ce <= ap_const_logic_1;
    grp_fu_104_p0 <= inp_q0;
    grp_fu_104_p1 <= W_Dout_A;
    grp_fu_99_ce <= ap_const_logic_1;
    grp_fu_99_p0 <= out_reg_76;
    grp_fu_99_p1 <= tmp_s_reg_183;
    i_5_fu_124_p2 <= std_logic_vector(unsigned(i_phi_fu_92_p4) + unsigned(ap_const_lv10_1));

    -- i_phi_fu_92_p4 assign process. --
    i_phi_fu_92_p4_assign_proc : process(i_reg_88, exitcond_reg_154, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_5_reg_158)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_reg_154 = ap_const_lv1_0))) then 
            i_phi_fu_92_p4 <= i_5_reg_158;
        else 
            i_phi_fu_92_p4 <= i_reg_88;
        end if; 
    end process;

    inp_address0 <= tmp_fu_130_p1(10 - 1 downto 0);

    -- inp_ce0 assign process. --
    inp_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            inp_ce0 <= ap_const_logic_1;
        else 
            inp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_addr1_fu_139_p2 <= std_logic_vector(unsigned(tmp_trn_cast_fu_135_p1) + unsigned(tmp_16_cast_reg_149));
    tmp_16_cast_fu_110_p3 <= 
        ap_const_lv11_360 when (W_offset(0) = '1') else 
        ap_const_lv11_0;
    tmp_16_fu_144_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_139_p2),64));
    tmp_fu_130_p1 <= std_logic_vector(resize(unsigned(i_phi_fu_92_p4),64));
    tmp_trn_cast_fu_135_p1 <= std_logic_vector(resize(unsigned(i_phi_fu_92_p4),11));
end behav;
