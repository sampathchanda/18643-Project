-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity feature_extractor_maxpool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_mat_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_mat_ce0 : OUT STD_LOGIC;
    input_mat_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_4 : IN STD_LOGIC_VECTOR (2 downto 0);
    output_mat_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_mat_ce0 : OUT STD_LOGIC;
    output_mat_we0 : OUT STD_LOGIC;
    output_mat_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_41 : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of feature_extractor_maxpool is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_30 : BOOLEAN;
    signal p_addr_cast_fu_232_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr_cast_reg_667 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr4_cast_fu_266_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr4_cast_reg_672 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_fu_276_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_680 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_64 : BOOLEAN;
    signal tmp_fu_282_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_685 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr6_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr6_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_335_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_698 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_81 : BOOLEAN;
    signal tmp_1_fu_341_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_703 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_359_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_2_reg_711 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_95 : BOOLEAN;
    signal p_addr2_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr2_reg_716 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_1_fu_433_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal l_1_reg_724 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_109 : BOOLEAN;
    signal p_addr3_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr3_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_123 : BOOLEAN;
    signal input_mat_load_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_131 : BOOLEAN;
    signal grp_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal p_Result_s_reg_756 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_641_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_2_fu_660_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_155 : BOOLEAN;
    signal i_reg_124 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_135 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_160 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_171 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_183 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_17_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_198_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_202_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_214_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl9_cast_fu_210_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_222_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr_fu_226_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_236_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_248_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_244_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_cast_fu_256_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr4_fu_260_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_trn_cast_fu_290_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr5_fu_294_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_299_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_16_fu_311_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_fu_307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl3_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast3_fu_349_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_trn_cast_fu_370_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr1_fu_374_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_379_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_19_fu_391_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl4_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl5_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_trn_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr7_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_cast2_fu_423_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_439_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_trn_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_to_int_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_460_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_2_fu_470_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_477_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_487_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_547_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_i_cast1_fu_559_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_563_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_i_i_fu_577_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_569_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_i_cast_fu_583_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_587_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_599_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_fu_555_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_2_i_i_fu_603_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_3_i_i_fu_607_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_25_fu_619_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_i_fu_613_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_21_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_631_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_i_i_fu_649_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_654_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_ce : STD_LOGIC;
    signal tmp_12_fu_198_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component feature_extractor_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_extractor_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    feature_extractor_sitofp_32ns_32_6_U9 : component feature_extractor_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_194_p0,
        ce => grp_fu_194_ce,
        dout => grp_fu_194_p1);

    feature_extractor_fcmp_32ns_32ns_1_1_U10 : component feature_extractor_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_12_fu_198_p0,
        din1 => tmp_12_fu_198_p1,
        opcode => tmp_12_fu_198_opcode,
        dout => tmp_12_fu_198_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_124 assign process. --
    i_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond2_fu_329_p2)))) then 
                i_reg_124 <= i_2_reg_680;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_124 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_reg_135 assign process. --
    j_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_270_p2 = ap_const_lv1_0))) then 
                j_reg_135 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond1_fu_353_p2)))) then 
                j_reg_135 <= j_2_reg_698;
            end if; 
        end if;
    end process;

    -- k_reg_160 assign process. --
    k_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_427_p2)))) then 
                k_reg_160 <= k_2_reg_711;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_329_p2))) then 
                k_reg_160 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- l_reg_183 assign process. --
    l_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond1_fu_353_p2))) then 
                l_reg_183 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                l_reg_183 <= l_1_reg_724;
            end if; 
        end if;
    end process;

    -- max_1_reg_171 assign process. --
    max_1_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond1_fu_353_p2))) then 
                max_1_reg_171 <= max_reg_147;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                max_1_reg_171 <= max_2_fu_660_p3;
            end if; 
        end if;
    end process;

    -- max_reg_147 assign process. --
    max_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_427_p2)))) then 
                max_reg_147 <= max_1_reg_171;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_329_p2))) then 
                max_reg_147 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_2_reg_680 <= i_2_fu_276_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                input_mat_load_reg_739 <= input_mat_q0;
                tmp_8_reg_745 <= grp_fu_194_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_2_reg_698 <= j_2_fu_335_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                k_2_reg_711 <= k_2_fu_359_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                l_1_reg_724 <= l_1_fu_433_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                p_Result_s_reg_756 <= p_Val2_5_fu_457_p1(31 downto 31);
                p_Val2_8_reg_761 <= p_Val2_8_fu_641_p3;
                tmp_13_reg_751 <= tmp_13_fu_533_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond1_fu_353_p2))) then
                    p_addr2_reg_716(31 downto 3) <= p_addr2_fu_403_p2(31 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_427_p2))) then
                p_addr3_reg_729 <= p_addr3_fu_448_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    p_addr4_cast_reg_672(8 downto 2) <= p_addr4_cast_fu_266_p1(8 downto 2);
                    p_addr_cast_reg_667(9 downto 3) <= p_addr_cast_fu_232_p1(9 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_270_p2 = ap_const_lv1_0))) then
                    p_addr6_reg_690(31 downto 2) <= p_addr6_fu_323_p2(31 downto 2);
                    tmp_reg_685(4 downto 1) <= tmp_fu_282_p3(4 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_329_p2))) then
                    tmp_1_reg_703(4 downto 1) <= tmp_1_fu_341_p3(4 downto 1);
            end if;
        end if;
    end process;
    p_addr_cast_reg_667(2 downto 0) <= "000";
    p_addr4_cast_reg_672(1 downto 0) <= "00";
    tmp_reg_685(0) <= '0';
    p_addr6_reg_690(1 downto 0) <= "00";
    tmp_1_reg_703(0) <= '0';
    p_addr2_reg_716(2 downto 0) <= "000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond3_fu_270_p2, exitcond2_fu_329_p2, exitcond1_fu_353_p2, exitcond_fu_427_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond3_fu_270_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond2_fu_329_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_353_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = exitcond_fu_427_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond3_fu_270_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_270_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond3_fu_270_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_270_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_109 assign process. --
    ap_sig_bdd_109_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_109 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_123 assign process. --
    ap_sig_bdd_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_123 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_131 assign process. --
    ap_sig_bdd_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_131 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_155 assign process. --
    ap_sig_bdd_155_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_155 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_30 assign process. --
    ap_sig_bdd_30_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_30 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_64 assign process. --
    ap_sig_bdd_64_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_64 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_81 assign process. --
    ap_sig_bdd_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_81 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_95 assign process. --
    ap_sig_bdd_95_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_95 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_131)
    begin
        if (ap_sig_bdd_131) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_155)
    begin
        if (ap_sig_bdd_155) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_30)
    begin
        if (ap_sig_bdd_30) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_64)
    begin
        if (ap_sig_bdd_64) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_81)
    begin
        if (ap_sig_bdd_81) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_95)
    begin
        if (ap_sig_bdd_95) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_109)
    begin
        if (ap_sig_bdd_109) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_123)
    begin
        if (ap_sig_bdd_123) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_353_p2 <= "1" when (k_reg_160 = ap_const_lv2_2) else "0";
    exitcond2_fu_329_p2 <= "1" when (j_reg_135 = ap_const_lv4_C) else "0";
    exitcond3_fu_270_p2 <= "1" when (i_reg_124 = ap_const_lv4_C) else "0";
    exitcond_fu_427_p2 <= "1" when (l_reg_183 = ap_const_lv2_2) else "0";
    grp_fu_194_ce <= ap_const_logic_1;
    grp_fu_194_p0 <= max_1_reg_171;
    i_2_fu_276_p2 <= std_logic_vector(unsigned(i_reg_124) + unsigned(ap_const_lv4_1));
    input_mat_address0 <= tmp_20_fu_453_p1(12 - 1 downto 0);

    -- input_mat_ce0 assign process. --
    input_mat_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            input_mat_ce0 <= ap_const_logic_1;
        else 
            input_mat_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_569_p3 <= sh_assign_fu_563_p2(8 downto 8);
    j_2_fu_335_p2 <= std_logic_vector(unsigned(j_reg_135) + unsigned(ap_const_lv4_1));
    k_2_fu_359_p2 <= std_logic_vector(unsigned(k_reg_160) + unsigned(ap_const_lv2_1));
    k_cast3_fu_349_p1 <= std_logic_vector(resize(unsigned(k_reg_160),5));
    l_1_fu_433_p2 <= std_logic_vector(unsigned(l_reg_183) + unsigned(ap_const_lv2_1));
    l_cast2_fu_423_p1 <= std_logic_vector(resize(unsigned(l_reg_183),5));
    loc_V_2_fu_470_p1 <= p_Val2_5_fu_457_p1(23 - 1 downto 0);
    loc_V_fu_460_p4 <= p_Val2_5_fu_457_p1(30 downto 23);
    max_2_fu_660_p3 <= 
        p_Val2_s_fu_654_p3 when (tmp_13_reg_751(0) = '1') else 
        max_1_reg_171;
    notlhs1_fu_509_p2 <= "0" when (tmp_2_fu_477_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_491_p2 <= "0" when (loc_V_fu_460_p4 = ap_const_lv8_FF) else "1";
    notrhs2_fu_515_p2 <= "1" when (tmp_22_fu_487_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_497_p2 <= "1" when (loc_V_2_fu_470_p1 = ap_const_lv23_0) else "0";
    output_mat_address0 <= tmp_17_fu_418_p1(10 - 1 downto 0);

    -- output_mat_ce0 assign process. --
    output_mat_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            output_mat_ce0 <= ap_const_logic_1;
        else 
            output_mat_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_mat_d0 <= max_reg_147;

    -- output_mat_we0 assign process. --
    output_mat_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond1_fu_353_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond1_fu_353_p2))))) then 
            output_mat_we0 <= ap_const_logic_1;
        else 
            output_mat_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_2_fu_547_p3 <= (ap_const_lv1_1 & loc_V_2_fu_470_p1);
    p_Val2_5_fu_457_p1 <= input_mat_load_reg_739;
    p_Val2_7_i_i_fu_649_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_8_reg_761));
    p_Val2_8_fu_641_p3 <= 
        tmp_21_fu_627_p1 when (isNeg_fu_569_p3(0) = '1') else 
        tmp_23_fu_631_p4;
    p_Val2_s_fu_654_p3 <= 
        p_Val2_7_i_i_fu_649_p2 when (p_Result_s_reg_756(0) = '1') else 
        p_Val2_8_reg_761;
    p_addr1_fu_374_p2 <= std_logic_vector(signed(p_addr_cast_reg_667) + signed(tmp_5_trn_cast_fu_370_p1));
    p_addr2_fu_403_p2 <= std_logic_vector(signed(p_shl4_fu_387_p1) - signed(p_shl5_fu_399_p1));
    p_addr3_fu_448_p2 <= std_logic_vector(signed(p_addr2_reg_716) + signed(tmp_7_trn_fu_444_p1));
        p_addr4_cast_fu_266_p1 <= std_logic_vector(resize(signed(p_addr4_fu_260_p2),9));

    p_addr4_fu_260_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_244_p1) - unsigned(p_shl8_cast_fu_256_p1));
    p_addr5_fu_294_p2 <= std_logic_vector(unsigned(tmp_trn_cast_fu_290_p1) + unsigned(p_addr4_cast_reg_672));
    p_addr6_fu_323_p2 <= std_logic_vector(signed(p_shl2_fu_307_p1) - signed(p_shl3_fu_319_p1));
    p_addr7_fu_413_p2 <= std_logic_vector(signed(p_addr6_reg_690) + signed(tmp_2_trn_fu_409_p1));
        p_addr_cast_fu_232_p1 <= std_logic_vector(resize(signed(p_addr_fu_226_p2),10));

    p_addr_fu_226_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_210_p1) - unsigned(p_shl1_cast_fu_222_p1));
    p_shl1_cast_fu_222_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_214_p3),9));
        p_shl2_fu_307_p1 <= std_logic_vector(resize(signed(tmp_15_fu_299_p3),32));

        p_shl3_fu_319_p1 <= std_logic_vector(resize(signed(tmp_16_fu_311_p3),32));

        p_shl4_fu_387_p1 <= std_logic_vector(resize(signed(tmp_18_fu_379_p3),32));

        p_shl5_fu_399_p1 <= std_logic_vector(resize(signed(tmp_19_fu_391_p3),32));

    p_shl8_cast_fu_256_p1 <= std_logic_vector(resize(unsigned(tmp_14_fu_248_p3),8));
    p_shl9_cast_fu_210_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_202_p3),9));
    p_shl_cast_fu_244_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_236_p3),8));
        sh_assign_1_cast_cast_fu_599_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_587_p3),24));

        sh_assign_1_cast_fu_595_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_587_p3),32));

    sh_assign_1_fu_587_p3 <= 
        tmp_1_i_i_cast_fu_583_p1 when (isNeg_fu_569_p3(0) = '1') else 
        sh_assign_fu_563_p2;
    sh_assign_fu_563_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_cast1_fu_559_p1));
    tmp_10_fu_521_p2 <= (notrhs2_fu_515_p2 or notlhs1_fu_509_p2);
    tmp_11_fu_527_p2 <= (tmp_7_fu_503_p2 and tmp_10_fu_521_p2);
    tmp_12_fu_198_opcode <= ap_const_lv5_2;
    tmp_12_fu_198_p0 <= input_mat_load_reg_739;
    tmp_12_fu_198_p1 <= tmp_8_reg_745;
    tmp_13_fu_533_p2 <= (tmp_11_fu_527_p2 and tmp_12_fu_198_p2);
    tmp_14_fu_248_p3 <= (tmp_41 & ap_const_lv2_0);
    tmp_15_fu_299_p3 <= (p_addr5_fu_294_p2 & ap_const_lv4_0);
    tmp_16_fu_311_p3 <= (p_addr5_fu_294_p2 & ap_const_lv2_0);
    tmp_17_fu_418_p1 <= std_logic_vector(resize(unsigned(p_addr7_fu_413_p2),64));
    tmp_18_fu_379_p3 <= (p_addr1_fu_374_p2 & ap_const_lv5_0);
    tmp_19_fu_391_p3 <= (p_addr1_fu_374_p2 & ap_const_lv3_0);
    tmp_1_fu_341_p3 <= (j_reg_135 & ap_const_lv1_0);
        tmp_1_i_i_cast_fu_583_p1 <= std_logic_vector(resize(signed(tmp_1_i_i_fu_577_p2),9));

    tmp_1_i_i_fu_577_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_460_p4));
    tmp_20_fu_453_p1 <= std_logic_vector(resize(unsigned(p_addr3_reg_729),64));
    tmp_21_fu_627_p1 <= std_logic_vector(resize(unsigned(tmp_25_fu_619_p3),32));
    tmp_22_fu_487_p1 <= tmp_8_to_int_fu_474_p1(23 - 1 downto 0);
    tmp_23_fu_631_p4 <= tmp_5_i_i_fu_613_p2(54 downto 23);
    tmp_25_fu_619_p3 <= tmp_3_i_i_fu_607_p2(23 downto 23);
    tmp_2_fu_477_p4 <= tmp_8_to_int_fu_474_p1(30 downto 23);
    tmp_2_i_i_fu_603_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_595_p1),78));
    tmp_2_trn_fu_409_p1 <= std_logic_vector(resize(unsigned(j_reg_135),32));
    tmp_3_fu_365_p2 <= std_logic_vector(unsigned(k_cast3_fu_349_p1) + unsigned(tmp_reg_685));
    tmp_3_i_i_fu_607_p2 <= std_logic_vector(shift_right(unsigned(p_Result_2_fu_547_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_599_p1(24-1 downto 0)))));
    tmp_5_fu_214_p3 <= (tmp_4 & ap_const_lv3_0);
    tmp_5_i_i_fu_613_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_555_p1),to_integer(unsigned('0' & tmp_2_i_i_fu_603_p1(31-1 downto 0)))));
    tmp_5_trn_cast_fu_370_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_365_p2),10));
    tmp_6_fu_439_p2 <= std_logic_vector(unsigned(l_cast2_fu_423_p1) + unsigned(tmp_1_reg_703));
    tmp_7_fu_503_p2 <= (notrhs_fu_497_p2 or notlhs_fu_491_p2);
    tmp_7_trn_fu_444_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_439_p2),32));
    tmp_8_to_int_fu_474_p1 <= tmp_8_reg_745;
    tmp_9_fu_236_p3 <= (tmp_41 & ap_const_lv4_0);
    tmp_fu_282_p3 <= (i_reg_124 & ap_const_lv1_0);
    tmp_i_i_fu_555_p1 <= std_logic_vector(resize(unsigned(p_Result_2_fu_547_p3),78));
    tmp_i_i_i_cast1_fu_559_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_460_p4),9));
    tmp_s_fu_202_p3 <= (tmp_4 & ap_const_lv5_0);
    tmp_trn_cast_fu_290_p1 <= std_logic_vector(resize(unsigned(i_reg_124),9));
end behav;
