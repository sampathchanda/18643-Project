-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity feature_extractor is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    W_ce0 : OUT STD_LOGIC;
    W_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feature_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_ce0 : OUT STD_LOGIC;
    feature_we0 : OUT STD_LOGIC;
    feature_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of feature_extractor is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "feature_extractor,hls_ip_2015_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.412000,HLS_SYN_LAT=1761897,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=31,HLS_SYN_FF=4242,HLS_SYN_LUT=7568}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_55 : BOOLEAN;
    signal i_1_fu_218_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_525 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_88 : BOOLEAN;
    signal j_1_fu_230_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_533 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_97 : BOOLEAN;
    signal p_addr_cast_fu_266_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr_cast_reg_538 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_276_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_546 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_112 : BOOLEAN;
    signal p_addr2_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr2_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_i_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_327_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_559 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_126 : BOOLEAN;
    signal tmp_5_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_564 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_load_reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal tmp_11_i_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_i_reg_579 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_151 : BOOLEAN;
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_584 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_160 : BOOLEAN;
    signal p_Result_s_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_169 : BOOLEAN;
    signal p_Val2_4_fu_480_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_180 : BOOLEAN;
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_189 : BOOLEAN;
    signal grp_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_198 : BOOLEAN;
    signal grp_fu_504_ap_done : STD_LOGIC;
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_i_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_211 : BOOLEAN;
    signal k_1_fu_516_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_623 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_220 : BOOLEAN;
    signal C_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_ce0 : STD_LOGIC;
    signal C_we0 : STD_LOGIC;
    signal C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_we0 : STD_LOGIC;
    signal S_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_convolve_fu_177_ap_start : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_177_ap_done : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_177_ap_idle : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_177_ap_ready : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_177_A_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_feature_extractor_convolve_fu_177_A_ce0 : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_177_A_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_convolve_fu_177_B_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_feature_extractor_convolve_fu_177_B_ce0 : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_177_B_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_convolve_fu_177_tmp : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_feature_extractor_convolve_fu_177_conv_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_feature_extractor_convolve_fu_177_conv_ce0 : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_177_conv_we0 : STD_LOGIC;
    signal grp_feature_extractor_convolve_fu_177_conv_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_convolve_fu_177_conv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_convolve_fu_177_tmp1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_feature_extractor_maxpool_fu_190_ap_start : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_190_ap_done : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_190_ap_idle : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_190_ap_ready : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_190_input_mat_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_feature_extractor_maxpool_fu_190_input_mat_ce0 : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_190_input_mat_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_maxpool_fu_190_tmp_4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_feature_extractor_maxpool_fu_190_output_mat_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_feature_extractor_maxpool_fu_190_output_mat_ce0 : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_190_output_mat_we0 : STD_LOGIC;
    signal grp_feature_extractor_maxpool_fu_190_output_mat_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_feature_extractor_maxpool_fu_190_tmp_41 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_120 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_285 : BOOLEAN;
    signal j_reg_132 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_143 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_i_reg_154 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_310 : BOOLEAN;
    signal k_reg_165 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_319 : BOOLEAN;
    signal grp_feature_extractor_convolve_fu_177_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_feature_extractor_maxpool_fu_190_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal exitcond_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_342 : BOOLEAN;
    signal tmp_11_i_fu_204_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_352 : BOOLEAN;
    signal tmp_fu_236_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_248_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_244_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_256_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr_fu_260_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_trn_cast_fu_282_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr1_fu_286_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_291_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_fu_303_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl3_fu_311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_trn_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr3_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_to_int_i_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_neg_i_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_1_fu_382_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_1_fu_386_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal loc_V_fu_372_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast2_fu_398_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_402_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_14_fu_416_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_fu_422_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_426_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_i_cast_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i_i_cast_fu_442_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_i_fu_394_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_9_i_i_i_fu_438_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_10_i_i_i_fu_446_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_10_fu_458_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_i_i_i_fu_452_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_7_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_470_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_i_i_i_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_504_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_ce : STD_LOGIC;
    signal grp_fu_207_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_207_ce : STD_LOGIC;
    signal grp_fu_504_ap_start : STD_LOGIC;
    signal grp_fu_504_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);

    component feature_extractor_convolve IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp : IN STD_LOGIC_VECTOR (2 downto 0);
        conv_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_ce0 : OUT STD_LOGIC;
        conv_we0 : OUT STD_LOGIC;
        conv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp1 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component feature_extractor_maxpool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_mat_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_mat_ce0 : OUT STD_LOGIC;
        input_mat_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_4 : IN STD_LOGIC_VECTOR (2 downto 0);
        output_mat_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_mat_ce0 : OUT STD_LOGIC;
        output_mat_we0 : OUT STD_LOGIC;
        output_mat_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_41 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component feature_extractor_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_extractor_fpext_32ns_64_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component feature_extractor_dexp_64ns_64ns_64_18_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component feature_extractor_sdiv_3ns_32ns_32_7_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_extractor_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    C_U : component feature_extractor_C
    generic map (
        DataWidth => 32,
        AddressRange => 3456,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_address0,
        ce0 => C_ce0,
        we0 => C_we0,
        d0 => C_d0,
        q0 => C_q0);

    S_U : component feature_extractor_C
    generic map (
        DataWidth => 32,
        AddressRange => 3456,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        we0 => S_we0,
        d0 => S_d0,
        q0 => S_q0);

    grp_feature_extractor_convolve_fu_177 : component feature_extractor_convolve
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_feature_extractor_convolve_fu_177_ap_start,
        ap_done => grp_feature_extractor_convolve_fu_177_ap_done,
        ap_idle => grp_feature_extractor_convolve_fu_177_ap_idle,
        ap_ready => grp_feature_extractor_convolve_fu_177_ap_ready,
        A_address0 => grp_feature_extractor_convolve_fu_177_A_address0,
        A_ce0 => grp_feature_extractor_convolve_fu_177_A_ce0,
        A_q0 => grp_feature_extractor_convolve_fu_177_A_q0,
        B_address0 => grp_feature_extractor_convolve_fu_177_B_address0,
        B_ce0 => grp_feature_extractor_convolve_fu_177_B_ce0,
        B_q0 => grp_feature_extractor_convolve_fu_177_B_q0,
        tmp => grp_feature_extractor_convolve_fu_177_tmp,
        conv_address0 => grp_feature_extractor_convolve_fu_177_conv_address0,
        conv_ce0 => grp_feature_extractor_convolve_fu_177_conv_ce0,
        conv_we0 => grp_feature_extractor_convolve_fu_177_conv_we0,
        conv_d0 => grp_feature_extractor_convolve_fu_177_conv_d0,
        conv_q0 => grp_feature_extractor_convolve_fu_177_conv_q0,
        tmp1 => grp_feature_extractor_convolve_fu_177_tmp1);

    grp_feature_extractor_maxpool_fu_190 : component feature_extractor_maxpool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_feature_extractor_maxpool_fu_190_ap_start,
        ap_done => grp_feature_extractor_maxpool_fu_190_ap_done,
        ap_idle => grp_feature_extractor_maxpool_fu_190_ap_idle,
        ap_ready => grp_feature_extractor_maxpool_fu_190_ap_ready,
        input_mat_address0 => grp_feature_extractor_maxpool_fu_190_input_mat_address0,
        input_mat_ce0 => grp_feature_extractor_maxpool_fu_190_input_mat_ce0,
        input_mat_q0 => grp_feature_extractor_maxpool_fu_190_input_mat_q0,
        tmp_4 => grp_feature_extractor_maxpool_fu_190_tmp_4,
        output_mat_address0 => grp_feature_extractor_maxpool_fu_190_output_mat_address0,
        output_mat_ce0 => grp_feature_extractor_maxpool_fu_190_output_mat_ce0,
        output_mat_we0 => grp_feature_extractor_maxpool_fu_190_output_mat_we0,
        output_mat_d0 => grp_feature_extractor_maxpool_fu_190_output_mat_d0,
        tmp_41 => grp_feature_extractor_maxpool_fu_190_tmp_41);

    feature_extractor_sitofp_32ns_32_6_U15 : component feature_extractor_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_201_p0,
        ce => grp_fu_201_ce,
        dout => grp_fu_201_p1);

    feature_extractor_fpext_32ns_64_1_U16 : component feature_extractor_fpext_32ns_64_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_11_i_fu_204_p0,
        dout => tmp_11_i_fu_204_p1);

    feature_extractor_dexp_64ns_64ns_64_18_full_dsp_U17 : component feature_extractor_dexp_64ns_64ns_64_18_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_207_p0,
        din1 => grp_fu_207_p1,
        ce => grp_fu_207_ce,
        dout => grp_fu_207_p2);

    feature_extractor_sdiv_3ns_32ns_32_7_seq_U18 : component feature_extractor_sdiv_3ns_32ns_32_7_seq
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 3,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_504_ap_start,
        done => grp_fu_504_ap_done,
        din0 => grp_fu_504_p0,
        din1 => grp_fu_504_p1,
        ce => grp_fu_504_ce,
        dout => grp_fu_504_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_feature_extractor_convolve_fu_177_ap_start_ap_start_reg assign process. --
    grp_feature_extractor_convolve_fu_177_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_feature_extractor_convolve_fu_177_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_212_p2))) then 
                    grp_feature_extractor_convolve_fu_177_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_feature_extractor_convolve_fu_177_ap_ready)) then 
                    grp_feature_extractor_convolve_fu_177_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_feature_extractor_maxpool_fu_190_ap_start_ap_start_reg assign process. --
    grp_feature_extractor_maxpool_fu_190_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_feature_extractor_maxpool_fu_190_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) and (ap_const_lv1_0 = exitcond_fu_510_p2))) then 
                    grp_feature_extractor_maxpool_fu_190_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_feature_extractor_maxpool_fu_190_ap_ready)) then 
                    grp_feature_extractor_maxpool_fu_190_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_i_reg_143 assign process. --
    i_i_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond_i_fu_321_p2)))) then 
                i_i_reg_143 <= i_2_reg_546;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_224_p2 = ap_const_lv1_0))) then 
                i_i_reg_143 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- i_reg_120 assign process. --
    i_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = grp_feature_extractor_convolve_fu_177_ap_done)))) then 
                i_reg_120 <= i_1_reg_525;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_120 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- j_i_reg_154 assign process. --
    j_i_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_i_fu_270_p2))) then 
                j_i_reg_154 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
                j_i_reg_154 <= j_2_reg_559;
            end if; 
        end if;
    end process;

    -- j_reg_132 assign process. --
    j_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond1_i_fu_270_p2)))) then 
                j_reg_132 <= j_1_reg_533;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_212_p2)))) then 
                j_reg_132 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- k_reg_165 assign process. --
    k_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_224_p2 = ap_const_lv1_0)))) then 
                k_reg_165 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) and not((ap_const_logic_0 = grp_feature_extractor_maxpool_fu_190_ap_done)))) then 
                k_reg_165 <= k_1_reg_623;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                C_load_reg_574 <= C_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_525 <= i_1_fu_218_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                i_2_reg_546 <= i_2_fu_276_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_1_reg_533 <= j_1_fu_230_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                j_2_reg_559 <= j_2_fu_327_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then
                k_1_reg_623 <= k_1_fu_516_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then
                p_Result_s_reg_589 <= p_Val2_1_fu_361_p1(63 downto 63);
                p_Val2_4_reg_594 <= p_Val2_4_fu_480_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then
                p_Val2_s_reg_600 <= p_Val2_s_fu_493_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_i_fu_270_p2))) then
                    p_addr2_reg_551(31 downto 3) <= p_addr2_fu_315_p2(31 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_224_p2 = ap_const_lv1_0))) then
                    p_addr_cast_reg_538(9 downto 3) <= p_addr_cast_fu_266_p1(9 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_11_i_reg_579 <= tmp_11_i_fu_204_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_logic_0 = grp_fu_504_ap_done)))) then
                tmp_14_i_reg_610 <= grp_fu_504_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then
                tmp_15_i_reg_615 <= grp_fu_201_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond_i_fu_321_p2))) then
                    tmp_5_reg_564(31 downto 0) <= tmp_5_fu_342_p1(31 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                x_assign_reg_584 <= grp_fu_207_p2;
            end if;
        end if;
    end process;
    p_addr_cast_reg_538(2 downto 0) <= "000";
    p_addr2_reg_551(2 downto 0) <= "000";
    tmp_5_reg_564(63 downto 32) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_224_p2, exitcond1_i_fu_270_p2, exitcond_i_fu_321_p2, grp_fu_504_ap_done, grp_feature_extractor_convolve_fu_177_ap_done, grp_feature_extractor_maxpool_fu_190_ap_done, exitcond2_fu_212_p2, exitcond_fu_510_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_212_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_feature_extractor_convolve_fu_177_ap_done))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((exitcond1_fu_224_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st38_fsm_37;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = exitcond1_i_fu_270_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond_i_fu_321_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                if (not((ap_const_logic_0 = grp_fu_504_ap_done))) then
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                else
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                end if;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st38_fsm_37 => 
                if (not((ap_const_lv1_0 = exitcond_fu_510_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_38;
                end if;
            when ap_ST_st39_fsm_38 => 
                if (not((ap_const_logic_0 = grp_feature_extractor_maxpool_fu_190_ap_done))) then
                    ap_NS_fsm <= ap_ST_st38_fsm_37;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_38;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= grp_feature_extractor_convolve_fu_177_A_address0;

    -- A_ce0 assign process. --
    A_ce0_assign_proc : process(grp_feature_extractor_convolve_fu_177_A_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            A_ce0 <= grp_feature_extractor_convolve_fu_177_A_ce0;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C_address0 assign process. --
    C_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, tmp_5_fu_342_p1, grp_feature_extractor_convolve_fu_177_conv_address0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            C_address0 <= tmp_5_fu_342_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            C_address0 <= grp_feature_extractor_convolve_fu_177_conv_address0;
        else 
            C_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- C_ce0 assign process. --
    C_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, grp_feature_extractor_convolve_fu_177_conv_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            C_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            C_ce0 <= grp_feature_extractor_convolve_fu_177_conv_ce0;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= grp_feature_extractor_convolve_fu_177_conv_d0;

    -- C_we0 assign process. --
    C_we0_assign_proc : process(grp_feature_extractor_convolve_fu_177_conv_we0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            C_we0 <= grp_feature_extractor_convolve_fu_177_conv_we0;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- S_address0 assign process. --
    S_address0_assign_proc : process(tmp_5_reg_564, grp_feature_extractor_maxpool_fu_190_input_mat_address0, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            S_address0 <= tmp_5_reg_564(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            S_address0 <= grp_feature_extractor_maxpool_fu_190_input_mat_address0;
        else 
            S_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- S_ce0 assign process. --
    S_ce0_assign_proc : process(grp_feature_extractor_maxpool_fu_190_input_mat_ce0, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            S_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            S_ce0 <= grp_feature_extractor_maxpool_fu_190_input_mat_ce0;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_d0 <= tmp_15_i_reg_615;

    -- S_we0 assign process. --
    S_we0_assign_proc : process(ap_sig_cseq_ST_st37_fsm_36)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then 
            S_we0 <= ap_const_logic_1;
        else 
            S_we0 <= ap_const_logic_0;
        end if; 
    end process;

    W_address0 <= grp_feature_extractor_convolve_fu_177_B_address0;

    -- W_ce0 assign process. --
    W_ce0_assign_proc : process(grp_feature_extractor_convolve_fu_177_B_ce0, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            W_ce0 <= grp_feature_extractor_convolve_fu_177_B_ce0;
        else 
            W_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st38_fsm_37, exitcond_fu_510_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) and not((ap_const_lv1_0 = exitcond_fu_510_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st38_fsm_37, exitcond_fu_510_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) and not((ap_const_lv1_0 = exitcond_fu_510_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_112 assign process. --
    ap_sig_bdd_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_112 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_126 assign process. --
    ap_sig_bdd_126_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_126 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_151 assign process. --
    ap_sig_bdd_151_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_151 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_160 assign process. --
    ap_sig_bdd_160_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_160 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_169 assign process. --
    ap_sig_bdd_169_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_169 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_180 assign process. --
    ap_sig_bdd_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_180 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_189 assign process. --
    ap_sig_bdd_189_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_189 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_198 assign process. --
    ap_sig_bdd_198_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_198 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_211 assign process. --
    ap_sig_bdd_211_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_211 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_220 assign process. --
    ap_sig_bdd_220_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_220 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_285 assign process. --
    ap_sig_bdd_285_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_285 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_310 assign process. --
    ap_sig_bdd_310_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_310 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_319 assign process. --
    ap_sig_bdd_319_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_319 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_342 assign process. --
    ap_sig_bdd_342_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_342 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_352 assign process. --
    ap_sig_bdd_352_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_352 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_55 assign process. --
    ap_sig_bdd_55_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_55 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_88 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_97 assign process. --
    ap_sig_bdd_97_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_97 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_55)
    begin
        if (ap_sig_bdd_55) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_160)
    begin
        if (ap_sig_bdd_160) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_169)
    begin
        if (ap_sig_bdd_169) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_180)
    begin
        if (ap_sig_bdd_180) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_189)
    begin
        if (ap_sig_bdd_189) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_88)
    begin
        if (ap_sig_bdd_88) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_198)
    begin
        if (ap_sig_bdd_198) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_342)
    begin
        if (ap_sig_bdd_342) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_35 assign process. --
    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_bdd_211)
    begin
        if (ap_sig_bdd_211) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_310)
    begin
        if (ap_sig_bdd_310) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_220)
    begin
        if (ap_sig_bdd_220) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_38 assign process. --
    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_bdd_319)
    begin
        if (ap_sig_bdd_319) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_285)
    begin
        if (ap_sig_bdd_285) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_97)
    begin
        if (ap_sig_bdd_97) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_112)
    begin
        if (ap_sig_bdd_112) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_126)
    begin
        if (ap_sig_bdd_126) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_151)
    begin
        if (ap_sig_bdd_151) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_352)
    begin
        if (ap_sig_bdd_352) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_224_p2 <= "1" when (j_reg_132 = ap_const_lv3_6) else "0";
    exitcond1_i_fu_270_p2 <= "1" when (i_i_reg_143 = ap_const_lv5_18) else "0";
    exitcond2_fu_212_p2 <= "1" when (i_reg_120 = ap_const_lv3_6) else "0";
    exitcond_fu_510_p2 <= "1" when (k_reg_165 = ap_const_lv3_6) else "0";
    exitcond_i_fu_321_p2 <= "1" when (j_i_reg_154 = ap_const_lv5_18) else "0";
    feature_address0 <= grp_feature_extractor_maxpool_fu_190_output_mat_address0;

    -- feature_ce0 assign process. --
    feature_ce0_assign_proc : process(grp_feature_extractor_maxpool_fu_190_output_mat_ce0, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            feature_ce0 <= grp_feature_extractor_maxpool_fu_190_output_mat_ce0;
        else 
            feature_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    feature_d0 <= grp_feature_extractor_maxpool_fu_190_output_mat_d0;

    -- feature_we0 assign process. --
    feature_we0_assign_proc : process(grp_feature_extractor_maxpool_fu_190_output_mat_we0, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            feature_we0 <= grp_feature_extractor_maxpool_fu_190_output_mat_we0;
        else 
            feature_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_feature_extractor_convolve_fu_177_A_q0 <= A_q0;
    grp_feature_extractor_convolve_fu_177_B_q0 <= W_q0;
    grp_feature_extractor_convolve_fu_177_ap_start <= grp_feature_extractor_convolve_fu_177_ap_start_ap_start_reg;
    grp_feature_extractor_convolve_fu_177_conv_q0 <= C_q0;
    grp_feature_extractor_convolve_fu_177_tmp <= i_reg_120;
    grp_feature_extractor_convolve_fu_177_tmp1 <= i_reg_120;
    grp_feature_extractor_maxpool_fu_190_ap_start <= grp_feature_extractor_maxpool_fu_190_ap_start_ap_start_reg;
    grp_feature_extractor_maxpool_fu_190_input_mat_q0 <= S_q0;
    grp_feature_extractor_maxpool_fu_190_tmp_4 <= k_reg_165;
    grp_feature_extractor_maxpool_fu_190_tmp_41 <= k_reg_165;
    grp_fu_201_ce <= ap_const_logic_1;
    grp_fu_201_p0 <= tmp_14_i_reg_610;
    grp_fu_207_ce <= ap_const_logic_1;
    grp_fu_207_p0 <= ap_const_lv64_0;
    grp_fu_207_p1 <= tmp_11_i_reg_579;

    -- grp_fu_504_ap_start assign process. --
    grp_fu_504_ap_start_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            grp_fu_504_ap_start <= ap_const_logic_1;
        else 
            grp_fu_504_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_504_ce <= ap_const_logic_1;
    grp_fu_504_p0 <= ap_const_lv32_1(3 - 1 downto 0);
    grp_fu_504_p1 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Val2_s_reg_600));
    i_1_fu_218_p2 <= std_logic_vector(unsigned(i_reg_120) + unsigned(ap_const_lv3_1));
    i_2_fu_276_p2 <= std_logic_vector(unsigned(i_i_reg_143) + unsigned(ap_const_lv5_1));
    isNeg_fu_408_p3 <= sh_assign_fu_402_p2(11 downto 11);
    j_1_fu_230_p2 <= std_logic_vector(unsigned(j_reg_132) + unsigned(ap_const_lv3_1));
    j_2_fu_327_p2 <= std_logic_vector(unsigned(j_i_reg_154) + unsigned(ap_const_lv5_1));
    k_1_fu_516_p2 <= std_logic_vector(unsigned(k_reg_165) + unsigned(ap_const_lv3_1));
    loc_V_1_fu_382_p1 <= p_Val2_1_fu_361_p1(52 - 1 downto 0);
    loc_V_fu_372_p4 <= p_Val2_1_fu_361_p1(62 downto 52);
    p_Result_1_fu_386_p3 <= (ap_const_lv1_1 & loc_V_1_fu_382_p1);
    p_Val2_1_fu_361_p1 <= x_assign_reg_584;
    p_Val2_4_fu_480_p3 <= 
        tmp_7_fu_466_p1 when (isNeg_fu_408_p3(0) = '1') else 
        tmp_8_fu_470_p4;
    p_Val2_i_i_i_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_4_reg_594));
    p_Val2_s_fu_493_p3 <= 
        p_Val2_i_i_i_fu_488_p2 when (p_Result_s_reg_589(0) = '1') else 
        p_Val2_4_reg_594;
    p_addr1_fu_286_p2 <= std_logic_vector(signed(p_addr_cast_reg_538) + signed(tmp_i_trn_cast_fu_282_p1));
    p_addr2_fu_315_p2 <= std_logic_vector(signed(p_shl2_fu_299_p1) - signed(p_shl3_fu_311_p1));
    p_addr3_fu_337_p2 <= std_logic_vector(unsigned(tmp_i_trn_fu_333_p1) + unsigned(p_addr2_reg_551));
        p_addr_cast_fu_266_p1 <= std_logic_vector(resize(signed(p_addr_fu_260_p2),10));

    p_addr_fu_260_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_244_p1) - unsigned(p_shl1_cast_fu_256_p1));
    p_shl1_cast_fu_256_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_248_p3),9));
        p_shl2_fu_299_p1 <= std_logic_vector(resize(signed(tmp_2_fu_291_p3),32));

        p_shl3_fu_311_p1 <= std_logic_vector(resize(signed(tmp_3_fu_303_p3),32));

    p_shl_cast_fu_244_p1 <= std_logic_vector(resize(unsigned(tmp_fu_236_p3),9));
    sh_assign_1_fu_426_p3 <= 
        tmp_i_i_i_cast_fu_422_p1 when (isNeg_fu_408_p3(0) = '1') else 
        sh_assign_fu_402_p2;
        sh_assign_2_i_cast_fu_434_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_426_p3),32));

    sh_assign_fu_402_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast2_fu_398_p1));
    tmp_10_fu_458_p3 <= tmp_10_i_i_i_fu_446_p2(52 downto 52);
    tmp_10_i_i_i_fu_446_p2 <= std_logic_vector(shift_right(unsigned(p_Result_1_fu_386_p3),to_integer(unsigned('0' & tmp_9_i_i_i_cast_fu_442_p1(31-1 downto 0)))));
    tmp_11_i_fu_204_p0 <= tmp_12_neg_i_fu_350_p2;
    tmp_12_i_i_i_fu_452_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_fu_394_p1),to_integer(unsigned('0' & tmp_9_i_i_i_fu_438_p1(31-1 downto 0)))));
    tmp_12_neg_i_fu_350_p2 <= (tmp_12_to_int_i_fu_347_p1 xor ap_const_lv32_80000000);
    tmp_12_to_int_i_fu_347_p1 <= C_load_reg_574;
    tmp_1_fu_248_p3 <= (j_reg_132 & ap_const_lv3_0);
    tmp_2_fu_291_p3 <= (p_addr1_fu_286_p2 & ap_const_lv5_0);
    tmp_3_fu_303_p3 <= (p_addr1_fu_286_p2 & ap_const_lv3_0);
    tmp_5_fu_342_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_337_p2),64));
    tmp_7_fu_466_p1 <= std_logic_vector(resize(unsigned(tmp_10_fu_458_p3),32));
    tmp_8_fu_470_p4 <= tmp_12_i_i_i_fu_452_p2(83 downto 52);
    tmp_9_i_i_i_cast_fu_442_p1 <= std_logic_vector(resize(unsigned(sh_assign_2_i_cast_fu_434_p1),53));
    tmp_9_i_i_i_fu_438_p1 <= std_logic_vector(resize(unsigned(sh_assign_2_i_cast_fu_434_p1),136));
    tmp_fu_236_p3 <= (j_reg_132 & ap_const_lv5_0);
    tmp_i_i_i_14_fu_416_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_372_p4));
        tmp_i_i_i_cast_fu_422_p1 <= std_logic_vector(resize(signed(tmp_i_i_i_14_fu_416_p2),12));

    tmp_i_i_i_fu_394_p1 <= std_logic_vector(resize(unsigned(p_Result_1_fu_386_p3),136));
    tmp_i_i_i_i_cast2_fu_398_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_372_p4),12));
    tmp_i_trn_cast_fu_282_p1 <= std_logic_vector(resize(unsigned(i_i_reg_143),10));
    tmp_i_trn_fu_333_p1 <= std_logic_vector(resize(unsigned(j_i_reg_154),32));
end behav;
