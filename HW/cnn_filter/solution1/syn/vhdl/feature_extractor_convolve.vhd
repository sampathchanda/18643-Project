-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity feature_extractor_convolve is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp : IN STD_LOGIC_VECTOR (2 downto 0);
    conv_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_ce0 : OUT STD_LOGIC;
    conv_we0 : OUT STD_LOGIC;
    conv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp1 : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of feature_extractor_convolve is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_42 : BOOLEAN;
    signal p_addr10_cast_fu_224_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr10_cast_reg_558 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_1_fu_234_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_1_reg_567 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_83 : BOOLEAN;
    signal p_addr11_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr11_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr2_fu_293_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr2_reg_577 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_1_fu_305_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal tmp_6_fu_331_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_reg_593 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_111 : BOOLEAN;
    signal exitcond3_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr8_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr8_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_606 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_125 : BOOLEAN;
    signal exitcond2_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_addr_1_reg_611 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_2_fu_402_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_2_fu_418_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_2_reg_624 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_143 : BOOLEAN;
    signal p_addr_cast_fu_459_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr_cast_reg_629 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr4_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr4_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_494_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal l_1_fu_510_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_1_reg_647 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_163 : BOOLEAN;
    signal exitcond_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr5_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr5_reg_657 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_178 : BOOLEAN;
    signal grp_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_187 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_197 : BOOLEAN;
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_206 : BOOLEAN;
    signal conv_load_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_216 : BOOLEAN;
    signal s_reg_114 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_reg_125 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_136 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_148 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_160 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_reg_171 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_245 : BOOLEAN;
    signal tmp_31_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_258 : BOOLEAN;
    signal grp_fu_182_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_271 : BOOLEAN;
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_281 : BOOLEAN;
    signal tmp_24_fu_194_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_206_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_202_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_cast_fu_214_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_addr6_fu_218_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_trn_cast_fu_240_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr10_fu_244_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_fu_249_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_fu_261_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl1_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_282_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_trn_cast_fu_279_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl9_cast_fu_289_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_trn_fu_311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr12_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_trn_cast_fu_337_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_addr7_fu_341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_29_fu_346_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_30_fu_358_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl3_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_trn_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr9_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast4_fu_408_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_fu_424_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_33_fu_429_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_fu_441_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl14_cast_fu_437_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl15_cast_fu_449_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_addr_fu_453_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_trn_cast_fu_463_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr3_fu_467_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_35_fu_476_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr3_cast_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl4_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_cast2_fu_500_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_fu_516_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_trn_cast_fu_521_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr1_fu_525_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_addr1_cast_fu_530_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_trn_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_ce : STD_LOGIC;
    signal grp_fu_186_ce : STD_LOGIC;
    signal grp_fu_191_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component feature_extractor_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_extractor_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_extractor_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    feature_extractor_fadd_32ns_32ns_32_5_full_dsp_U1 : component feature_extractor_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_182_p0,
        din1 => grp_fu_182_p1,
        ce => grp_fu_182_ce,
        dout => grp_fu_182_p2);

    feature_extractor_fmul_32ns_32ns_32_4_max_dsp_U2 : component feature_extractor_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_186_p0,
        din1 => grp_fu_186_p1,
        ce => grp_fu_186_ce,
        dout => grp_fu_186_p2);

    feature_extractor_sitofp_32ns_32_6_U3 : component feature_extractor_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_191_p0,
        ce => grp_fu_191_ce,
        dout => grp_fu_191_p1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_136 assign process. --
    i_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond5_fu_228_p2 = ap_const_lv1_0)))) then 
                i_reg_136 <= ap_const_lv5_2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_376_p2)))) then 
                i_reg_136 <= i_2_fu_402_p2;
            end if; 
        end if;
    end process;

    -- j_reg_148 assign process. --
    j_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond3_fu_325_p2))) then 
                j_reg_148 <= ap_const_lv5_2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond1_fu_412_p2)))) then 
                j_reg_148 <= j_2_fu_494_p2;
            end if; 
        end if;
    end process;

    -- k_reg_160 assign process. --
    k_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond_fu_504_p2)))) then 
                k_reg_160 <= k_2_reg_624;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_376_p2))) then 
                k_reg_160 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- l_reg_171 assign process. --
    l_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_412_p2))) then 
                l_reg_171 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
                l_reg_171 <= l_1_reg_647;
            end if; 
        end if;
    end process;

    -- s_reg_114 assign process. --
    s_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond4_fu_299_p2)))) then 
                s_reg_114 <= s_1_reg_567;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                s_reg_114 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- t_reg_125 assign process. --
    t_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond5_fu_228_p2 = ap_const_lv1_0))) then 
                t_reg_125 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond4_fu_299_p2))) then 
                t_reg_125 <= t_1_fu_305_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                A_load_reg_662 <= A_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_376_p2))) then
                conv_addr_1_reg_611 <= tmp_32_fu_397_p1(12 - 1 downto 0);
                tmp_s_reg_606 <= tmp_s_fu_382_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then
                conv_load_reg_687 <= conv_q0;
                tmp_10_reg_682 <= grp_fu_186_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                k_2_reg_624 <= k_2_fu_418_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                l_1_reg_647 <= l_1_fu_510_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    p_addr10_cast_reg_558(9 downto 3) <= p_addr10_cast_fu_224_p1(9 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond5_fu_228_p2 = ap_const_lv1_0))) then
                    p_addr11_reg_572(31 downto 3) <= p_addr11_fu_273_p2(31 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond5_fu_228_p2 = ap_const_lv1_0)))) then
                p_addr2_reg_577 <= p_addr2_fu_293_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_412_p2))) then
                p_addr4_reg_634 <= p_addr4_fu_488_p2;
                    p_addr_cast_reg_629(11 downto 2) <= p_addr_cast_fu_459_p1(11 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond_fu_504_p2))) then
                p_addr5_reg_657 <= p_addr5_fu_543_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond3_fu_325_p2))) then
                    p_addr8_reg_598(31 downto 3) <= p_addr8_fu_370_p2(31 downto 3);
                tmp_6_reg_593 <= tmp_6_fu_331_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                s_1_reg_567 <= s_1_fu_234_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                tmp_11_reg_692 <= grp_fu_182_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                tmp_5_reg_667 <= grp_fu_191_p1;
            end if;
        end if;
    end process;
    p_addr10_cast_reg_558(2 downto 0) <= "000";
    p_addr11_reg_572(2 downto 0) <= "000";
    p_addr8_reg_598(2 downto 0) <= "000";
    p_addr_cast_reg_629(1 downto 0) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond5_fu_228_p2, exitcond3_fu_325_p2, exitcond2_fu_376_p2, exitcond1_fu_412_p2, exitcond_fu_504_p2, exitcond4_fu_299_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond5_fu_228_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond4_fu_299_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_325_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_376_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_412_p2))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = exitcond_fu_504_p2)) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= tmp_36_fu_534_p1(10 - 1 downto 0);

    -- A_ce0 assign process. --
    A_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_37_fu_548_p1(8 - 1 downto 0);

    -- B_ce0 assign process. --
    B_ce0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st4_fsm_3, exitcond3_fu_325_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond3_fu_325_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond3_fu_325_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond3_fu_325_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_111 assign process. --
    ap_sig_bdd_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_111 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_125 assign process. --
    ap_sig_bdd_125_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_125 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_143 assign process. --
    ap_sig_bdd_143_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_143 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_163 assign process. --
    ap_sig_bdd_163_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_163 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_178 assign process. --
    ap_sig_bdd_178_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_178 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_187 assign process. --
    ap_sig_bdd_187_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_187 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_197 assign process. --
    ap_sig_bdd_197_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_197 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_206 assign process. --
    ap_sig_bdd_206_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_206 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_216 assign process. --
    ap_sig_bdd_216_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_216 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_245 assign process. --
    ap_sig_bdd_245_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_245 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_258 assign process. --
    ap_sig_bdd_258_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_258 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_271 assign process. --
    ap_sig_bdd_271_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_271 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_281 assign process. --
    ap_sig_bdd_281_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_281 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_42 assign process. --
    ap_sig_bdd_42_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_42 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_83 assign process. --
    ap_sig_bdd_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_83 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_187)
    begin
        if (ap_sig_bdd_187) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_197)
    begin
        if (ap_sig_bdd_197) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_258)
    begin
        if (ap_sig_bdd_258) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_206)
    begin
        if (ap_sig_bdd_206) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_271)
    begin
        if (ap_sig_bdd_271) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_42)
    begin
        if (ap_sig_bdd_42) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_216)
    begin
        if (ap_sig_bdd_216) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_245)
    begin
        if (ap_sig_bdd_245) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_83)
    begin
        if (ap_sig_bdd_83) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_111)
    begin
        if (ap_sig_bdd_111) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_125)
    begin
        if (ap_sig_bdd_125) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_143)
    begin
        if (ap_sig_bdd_143) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_163)
    begin
        if (ap_sig_bdd_163) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_178)
    begin
        if (ap_sig_bdd_178) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_281)
    begin
        if (ap_sig_bdd_281) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- conv_address0 assign process. --
    conv_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, conv_addr_1_reg_611, ap_sig_cseq_ST_st24_fsm_23, tmp_31_fu_320_p1, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            conv_address0 <= tmp_31_fu_320_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            conv_address0 <= conv_addr_1_reg_611;
        else 
            conv_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- conv_ce0 assign process. --
    conv_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            conv_ce0 <= ap_const_logic_1;
        else 
            conv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- conv_d0 assign process. --
    conv_d0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_11_reg_692, ap_sig_cseq_ST_st24_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            conv_d0 <= tmp_11_reg_692;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            conv_d0 <= ap_const_lv32_0;
        else 
            conv_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- conv_we0 assign process. --
    conv_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond4_fu_299_p2, ap_sig_cseq_ST_st24_fsm_23)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond4_fu_299_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            conv_we0 <= ap_const_logic_1;
        else 
            conv_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_412_p2 <= "1" when (k_reg_160 = ap_const_lv3_5) else "0";
    exitcond2_fu_376_p2 <= "1" when (j_reg_148 = ap_const_lv5_1A) else "0";
    exitcond3_fu_325_p2 <= "1" when (i_reg_136 = ap_const_lv5_1A) else "0";
    exitcond4_fu_299_p2 <= "1" when (t_reg_125 = ap_const_lv5_18) else "0";
    exitcond5_fu_228_p2 <= "1" when (s_reg_114 = ap_const_lv5_18) else "0";
    exitcond_fu_504_p2 <= "1" when (l_reg_171 = ap_const_lv3_5) else "0";
    grp_fu_182_ce <= ap_const_logic_1;
    grp_fu_182_p0 <= conv_load_reg_687;
    grp_fu_182_p1 <= tmp_10_reg_682;
    grp_fu_186_ce <= ap_const_logic_1;
    grp_fu_186_p0 <= tmp_5_reg_667;
    grp_fu_186_p1 <= B_q0;
    grp_fu_191_ce <= ap_const_logic_1;
    grp_fu_191_p0 <= A_load_reg_662;
    i_2_fu_402_p2 <= std_logic_vector(unsigned(i_reg_136) + unsigned(ap_const_lv5_1));
    j_2_fu_494_p2 <= std_logic_vector(unsigned(j_reg_148) + unsigned(ap_const_lv5_1));
    k_2_fu_418_p2 <= std_logic_vector(unsigned(k_reg_160) + unsigned(ap_const_lv3_1));
    k_cast4_fu_408_p1 <= std_logic_vector(resize(unsigned(k_reg_160),5));
    l_1_fu_510_p2 <= std_logic_vector(unsigned(l_reg_171) + unsigned(ap_const_lv3_1));
    l_cast2_fu_500_p1 <= std_logic_vector(resize(unsigned(l_reg_171),5));
        p_addr10_cast_fu_224_p1 <= std_logic_vector(resize(signed(p_addr6_fu_218_p2),10));

    p_addr10_fu_244_p2 <= std_logic_vector(signed(p_addr10_cast_reg_558) + signed(tmp2_trn_cast_fu_240_p1));
    p_addr11_fu_273_p2 <= std_logic_vector(signed(p_shl_fu_257_p1) - signed(p_shl1_fu_269_p1));
    p_addr12_fu_315_p2 <= std_logic_vector(signed(p_addr11_reg_572) + signed(tmp_9_trn_fu_311_p1));
        p_addr1_cast_fu_530_p1 <= std_logic_vector(resize(signed(p_addr1_fu_525_p2),32));

    p_addr1_fu_525_p2 <= std_logic_vector(unsigned(tmp_4_trn_cast_fu_521_p1) + unsigned(p_addr_cast_reg_629));
    p_addr2_fu_293_p2 <= std_logic_vector(unsigned(tmp_cast_trn_cast_fu_279_p1) + unsigned(p_shl9_cast_fu_289_p1));
    p_addr3_cast_fu_472_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_467_p2),32));
    p_addr3_fu_467_p2 <= std_logic_vector(unsigned(p_addr2_reg_577) + unsigned(tmp_3_trn_cast_fu_463_p1));
    p_addr4_fu_488_p2 <= std_logic_vector(unsigned(p_addr3_cast_fu_472_p1) + unsigned(p_shl4_fu_484_p1));
    p_addr5_fu_543_p2 <= std_logic_vector(unsigned(tmp_8_trn_fu_539_p1) + unsigned(p_addr4_reg_634));
    p_addr6_fu_218_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_202_p1) - unsigned(p_shl6_cast_fu_214_p1));
    p_addr7_fu_341_p2 <= std_logic_vector(signed(p_addr10_cast_reg_558) + signed(tmp_7_trn_cast_fu_337_p1));
    p_addr8_fu_370_p2 <= std_logic_vector(signed(p_shl2_fu_354_p1) - signed(p_shl3_fu_366_p1));
    p_addr9_fu_392_p2 <= std_logic_vector(signed(p_addr8_reg_598) + signed(tmp_1_trn_fu_388_p1));
        p_addr_cast_fu_459_p1 <= std_logic_vector(resize(signed(p_addr_fu_453_p2),12));

    p_addr_fu_453_p2 <= std_logic_vector(unsigned(p_shl14_cast_fu_437_p1) - unsigned(p_shl15_cast_fu_449_p1));
    p_shl14_cast_fu_437_p1 <= std_logic_vector(resize(unsigned(tmp_33_fu_429_p3),11));
    p_shl15_cast_fu_449_p1 <= std_logic_vector(resize(unsigned(tmp_34_fu_441_p3),11));
        p_shl1_fu_269_p1 <= std_logic_vector(resize(signed(tmp_28_fu_261_p3),32));

        p_shl2_fu_354_p1 <= std_logic_vector(resize(signed(tmp_29_fu_346_p3),32));

        p_shl3_fu_366_p1 <= std_logic_vector(resize(signed(tmp_30_fu_358_p3),32));

    p_shl4_fu_484_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_476_p3),32));
    p_shl6_cast_fu_214_p1 <= std_logic_vector(resize(unsigned(tmp_25_fu_206_p3),9));
    p_shl9_cast_fu_289_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_282_p3),6));
    p_shl_cast_fu_202_p1 <= std_logic_vector(resize(unsigned(tmp_24_fu_194_p3),9));
        p_shl_fu_257_p1 <= std_logic_vector(resize(signed(tmp_27_fu_249_p3),32));

    s_1_fu_234_p2 <= std_logic_vector(unsigned(s_reg_114) + unsigned(ap_const_lv5_1));
    t_1_fu_305_p2 <= std_logic_vector(unsigned(t_reg_125) + unsigned(ap_const_lv5_1));
    tmp2_trn_cast_fu_240_p1 <= std_logic_vector(resize(unsigned(s_reg_114),10));
    tmp_1_trn_fu_388_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_382_p2),32));
    tmp_24_fu_194_p3 <= (tmp1 & ap_const_lv5_0);
    tmp_25_fu_206_p3 <= (tmp1 & ap_const_lv3_0);
    tmp_26_fu_282_p3 <= (tmp & ap_const_lv2_0);
    tmp_27_fu_249_p3 <= (p_addr10_fu_244_p2 & ap_const_lv5_0);
    tmp_28_fu_261_p3 <= (p_addr10_fu_244_p2 & ap_const_lv3_0);
    tmp_29_fu_346_p3 <= (p_addr7_fu_341_p2 & ap_const_lv5_0);
    tmp_30_fu_358_p3 <= (p_addr7_fu_341_p2 & ap_const_lv3_0);
    tmp_31_fu_320_p1 <= std_logic_vector(resize(unsigned(p_addr12_fu_315_p2),64));
    tmp_32_fu_397_p1 <= std_logic_vector(resize(unsigned(p_addr9_fu_392_p2),64));
    tmp_33_fu_429_p3 <= (x_fu_424_p2 & ap_const_lv5_0);
    tmp_34_fu_441_p3 <= (x_fu_424_p2 & ap_const_lv2_0);
    tmp_35_fu_476_p3 <= (p_addr3_fu_467_p2 & ap_const_lv2_0);
    tmp_36_fu_534_p1 <= std_logic_vector(resize(unsigned(p_addr1_cast_fu_530_p1),64));
    tmp_37_fu_548_p1 <= std_logic_vector(resize(unsigned(p_addr5_reg_657),64));
    tmp_3_trn_cast_fu_463_p1 <= std_logic_vector(resize(unsigned(k_reg_160),6));
    tmp_4_trn_cast_fu_521_p1 <= std_logic_vector(resize(unsigned(y_fu_516_p2),12));
    tmp_6_fu_331_p2 <= std_logic_vector(unsigned(i_reg_136) + unsigned(ap_const_lv5_1E));
    tmp_7_trn_cast_fu_337_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_331_p2),10));
    tmp_8_trn_fu_539_p1 <= std_logic_vector(resize(unsigned(l_reg_171),32));
    tmp_9_trn_fu_311_p1 <= std_logic_vector(resize(unsigned(t_reg_125),32));
    tmp_cast_trn_cast_fu_279_p1 <= std_logic_vector(resize(unsigned(tmp),6));
    tmp_s_fu_382_p2 <= std_logic_vector(unsigned(j_reg_148) + unsigned(ap_const_lv5_1E));
    x_fu_424_p2 <= std_logic_vector(unsigned(k_cast4_fu_408_p1) + unsigned(tmp_6_reg_593));
    y_fu_516_p2 <= std_logic_vector(signed(tmp_s_reg_606) + signed(l_cast2_fu_500_p1));
end behav;
