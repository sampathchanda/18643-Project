// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module feature_extractor_convolve (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        tmp,
        conv_address0,
        conv_ce0,
        conv_we0,
        conv_d0,
        conv_q0,
        tmp1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 24'b1;
parameter    ap_ST_st2_fsm_1 = 24'b10;
parameter    ap_ST_st3_fsm_2 = 24'b100;
parameter    ap_ST_st4_fsm_3 = 24'b1000;
parameter    ap_ST_st5_fsm_4 = 24'b10000;
parameter    ap_ST_st6_fsm_5 = 24'b100000;
parameter    ap_ST_st7_fsm_6 = 24'b1000000;
parameter    ap_ST_st8_fsm_7 = 24'b10000000;
parameter    ap_ST_st9_fsm_8 = 24'b100000000;
parameter    ap_ST_st10_fsm_9 = 24'b1000000000;
parameter    ap_ST_st11_fsm_10 = 24'b10000000000;
parameter    ap_ST_st12_fsm_11 = 24'b100000000000;
parameter    ap_ST_st13_fsm_12 = 24'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 24'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 24'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 24'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 24'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 24'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 24'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 24'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 24'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 24'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 24'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 24'b100000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv5_18 = 5'b11000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv5_1A = 5'b11010;
parameter    ap_const_lv5_1E = 5'b11110;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [7:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
input  [2:0] tmp;
output  [11:0] conv_address0;
output   conv_ce0;
output   conv_we0;
output  [31:0] conv_d0;
input  [31:0] conv_q0;
input  [2:0] tmp1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg[11:0] conv_address0;
reg conv_ce0;
reg conv_we0;
reg[31:0] conv_d0;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm = 24'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_42;
wire  signed [9:0] p_addr10_cast_fu_224_p1;
reg  signed [9:0] p_addr10_cast_reg_558;
wire   [4:0] s_1_fu_234_p2;
reg   [4:0] s_1_reg_567;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_83;
wire  signed [31:0] p_addr11_fu_273_p2;
reg  signed [31:0] p_addr11_reg_572;
wire   [0:0] exitcond5_fu_228_p2;
wire   [5:0] p_addr2_fu_293_p2;
reg   [5:0] p_addr2_reg_577;
wire   [4:0] t_1_fu_305_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_102;
wire  signed [4:0] tmp_6_fu_331_p2;
reg  signed [4:0] tmp_6_reg_593;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_111;
wire   [0:0] exitcond3_fu_325_p2;
wire  signed [31:0] p_addr8_fu_370_p2;
reg  signed [31:0] p_addr8_reg_598;
wire  signed [4:0] tmp_s_fu_382_p2;
reg  signed [4:0] tmp_s_reg_606;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_125;
wire   [0:0] exitcond2_fu_376_p2;
reg   [11:0] conv_addr_1_reg_611;
wire   [4:0] i_2_fu_402_p2;
wire   [2:0] k_2_fu_418_p2;
reg   [2:0] k_2_reg_624;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_143;
wire  signed [11:0] p_addr_cast_fu_459_p1;
reg  signed [11:0] p_addr_cast_reg_629;
wire   [0:0] exitcond1_fu_412_p2;
wire   [31:0] p_addr4_fu_488_p2;
reg   [31:0] p_addr4_reg_634;
wire   [4:0] j_2_fu_494_p2;
wire   [2:0] l_1_fu_510_p2;
reg   [2:0] l_1_reg_647;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_163;
wire   [0:0] exitcond_fu_504_p2;
wire   [31:0] p_addr5_fu_543_p2;
reg   [31:0] p_addr5_reg_657;
reg   [31:0] A_load_reg_662;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_178;
wire   [31:0] grp_fu_191_p1;
reg   [31:0] tmp_5_reg_667;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_187;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_197;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] tmp_10_reg_682;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_bdd_206;
reg   [31:0] conv_load_reg_687;
wire   [31:0] grp_fu_182_p2;
reg   [31:0] tmp_11_reg_692;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_bdd_216;
reg   [4:0] s_reg_114;
wire   [0:0] exitcond4_fu_299_p2;
reg   [4:0] t_reg_125;
reg   [4:0] i_reg_136;
reg   [4:0] j_reg_148;
reg   [2:0] k_reg_160;
reg   [2:0] l_reg_171;
reg    ap_sig_cseq_ST_st24_fsm_23;
reg    ap_sig_bdd_245;
wire   [63:0] tmp_31_fu_320_p1;
wire   [63:0] tmp_32_fu_397_p1;
wire   [63:0] tmp_36_fu_534_p1;
wire   [63:0] tmp_37_fu_548_p1;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_bdd_258;
wire   [31:0] grp_fu_182_p0;
wire   [31:0] grp_fu_182_p1;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_bdd_271;
wire   [31:0] grp_fu_186_p0;
wire   [31:0] grp_fu_186_p1;
wire   [31:0] grp_fu_191_p0;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_281;
wire   [7:0] tmp_24_fu_194_p3;
wire   [5:0] tmp_25_fu_206_p3;
wire   [8:0] p_shl_cast_fu_202_p1;
wire   [8:0] p_shl6_cast_fu_214_p1;
wire   [8:0] p_addr6_fu_218_p2;
wire   [9:0] tmp2_trn_cast_fu_240_p1;
wire  signed [9:0] p_addr10_fu_244_p2;
wire   [14:0] tmp_27_fu_249_p3;
wire   [12:0] tmp_28_fu_261_p3;
wire  signed [31:0] p_shl_fu_257_p1;
wire  signed [31:0] p_shl1_fu_269_p1;
wire   [4:0] tmp_26_fu_282_p3;
wire   [5:0] tmp_cast_trn_cast_fu_279_p1;
wire   [5:0] p_shl9_cast_fu_289_p1;
wire   [31:0] tmp_9_trn_fu_311_p1;
wire  signed [31:0] p_addr12_fu_315_p2;
wire   [9:0] tmp_7_trn_cast_fu_337_p1;
wire  signed [9:0] p_addr7_fu_341_p2;
wire   [14:0] tmp_29_fu_346_p3;
wire   [12:0] tmp_30_fu_358_p3;
wire  signed [31:0] p_shl2_fu_354_p1;
wire  signed [31:0] p_shl3_fu_366_p1;
wire   [31:0] tmp_1_trn_fu_388_p1;
wire  signed [31:0] p_addr9_fu_392_p2;
wire   [4:0] k_cast4_fu_408_p1;
wire  signed [4:0] x_fu_424_p2;
wire   [9:0] tmp_33_fu_429_p3;
wire   [6:0] tmp_34_fu_441_p3;
wire   [10:0] p_shl14_cast_fu_437_p1;
wire   [10:0] p_shl15_cast_fu_449_p1;
wire   [10:0] p_addr_fu_453_p2;
wire   [5:0] tmp_3_trn_cast_fu_463_p1;
wire   [5:0] p_addr3_fu_467_p2;
wire   [7:0] tmp_35_fu_476_p3;
wire   [31:0] p_addr3_cast_fu_472_p1;
wire   [31:0] p_shl4_fu_484_p1;
wire   [4:0] l_cast2_fu_500_p1;
wire  signed [4:0] y_fu_516_p2;
wire   [11:0] tmp_4_trn_cast_fu_521_p1;
wire  signed [11:0] p_addr1_fu_525_p2;
wire  signed [31:0] p_addr1_cast_fu_530_p1;
wire   [31:0] tmp_8_trn_fu_539_p1;
wire    grp_fu_182_ce;
wire    grp_fu_186_ce;
wire    grp_fu_191_ce;
reg   [23:0] ap_NS_fsm;


feature_extractor_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractor_fadd_32ns_32ns_32_5_full_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_182_p0 ),
    .din1( grp_fu_182_p1 ),
    .ce( grp_fu_182_ce ),
    .dout( grp_fu_182_p2 )
);

feature_extractor_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractor_fmul_32ns_32ns_32_4_max_dsp_U2(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_186_p0 ),
    .din1( grp_fu_186_p1 ),
    .ce( grp_fu_186_ce ),
    .dout( grp_fu_186_p2 )
);

feature_extractor_sitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractor_sitofp_32ns_32_6_U3(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_191_p0 ),
    .ce( grp_fu_191_ce ),
    .dout( grp_fu_191_p1 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond5_fu_228_p2 == ap_const_lv1_0))) begin
        i_reg_136 <= ap_const_lv5_2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond2_fu_376_p2))) begin
        i_reg_136 <= i_2_fu_402_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond3_fu_325_p2))) begin
        j_reg_148 <= ap_const_lv5_2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == exitcond1_fu_412_p2))) begin
        j_reg_148 <= j_2_fu_494_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_lv1_0 == exitcond_fu_504_p2))) begin
        k_reg_160 <= k_2_reg_624;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond2_fu_376_p2))) begin
        k_reg_160 <= ap_const_lv3_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == exitcond1_fu_412_p2))) begin
        l_reg_171 <= ap_const_lv3_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        l_reg_171 <= l_1_reg_647;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond4_fu_299_p2))) begin
        s_reg_114 <= s_1_reg_567;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        s_reg_114 <= ap_const_lv5_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond5_fu_228_p2 == ap_const_lv1_0))) begin
        t_reg_125 <= ap_const_lv5_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond4_fu_299_p2))) begin
        t_reg_125 <= t_1_fu_305_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        A_load_reg_662 <= A_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond2_fu_376_p2))) begin
        conv_addr_1_reg_611 <= tmp_32_fu_397_p1;
        tmp_s_reg_606 <= tmp_s_fu_382_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        conv_load_reg_687 <= conv_q0;
        tmp_10_reg_682 <= grp_fu_186_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        k_2_reg_624 <= k_2_fu_418_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        l_1_reg_647 <= l_1_fu_510_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        p_addr10_cast_reg_558[9 : 3] <= p_addr10_cast_fu_224_p1[9 : 3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond5_fu_228_p2 == ap_const_lv1_0))) begin
        p_addr11_reg_572[31 : 3] <= p_addr11_fu_273_p2[31 : 3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond5_fu_228_p2 == ap_const_lv1_0))) begin
        p_addr2_reg_577 <= p_addr2_fu_293_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == exitcond1_fu_412_p2))) begin
        p_addr4_reg_634 <= p_addr4_fu_488_p2;
        p_addr_cast_reg_629[11 : 2] <= p_addr_cast_fu_459_p1[11 : 2];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == exitcond_fu_504_p2))) begin
        p_addr5_reg_657 <= p_addr5_fu_543_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond3_fu_325_p2))) begin
        p_addr8_reg_598[31 : 3] <= p_addr8_fu_370_p2[31 : 3];
        tmp_6_reg_593 <= tmp_6_fu_331_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        s_1_reg_567 <= s_1_fu_234_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        tmp_11_reg_692 <= grp_fu_182_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        tmp_5_reg_667 <= grp_fu_191_p1;
    end
end

/// A_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        A_ce0 = ap_const_logic_1;
    end else begin
        A_ce0 = ap_const_logic_0;
    end
end

/// B_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        B_ce0 = ap_const_logic_1;
    end else begin
        B_ce0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st4_fsm_3 or exitcond3_fu_325_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond3_fu_325_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or exitcond3_fu_325_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond3_fu_325_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_187)
begin
    if (ap_sig_bdd_187) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_197)
begin
    if (ap_sig_bdd_197) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_16 assign process. ///
always @ (ap_sig_bdd_258)
begin
    if (ap_sig_bdd_258) begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st18_fsm_17 assign process. ///
always @ (ap_sig_bdd_206)
begin
    if (ap_sig_bdd_206) begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st19_fsm_18 assign process. ///
always @ (ap_sig_bdd_271)
begin
    if (ap_sig_bdd_271) begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_42)
begin
    if (ap_sig_bdd_42) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st23_fsm_22 assign process. ///
always @ (ap_sig_bdd_216)
begin
    if (ap_sig_bdd_216) begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st24_fsm_23 assign process. ///
always @ (ap_sig_bdd_245)
begin
    if (ap_sig_bdd_245) begin
        ap_sig_cseq_ST_st24_fsm_23 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st24_fsm_23 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_83)
begin
    if (ap_sig_bdd_83) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_102)
begin
    if (ap_sig_bdd_102) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_111)
begin
    if (ap_sig_bdd_111) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_125)
begin
    if (ap_sig_bdd_125) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_143)
begin
    if (ap_sig_bdd_143) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_163)
begin
    if (ap_sig_bdd_163) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_178)
begin
    if (ap_sig_bdd_178) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_281)
begin
    if (ap_sig_bdd_281) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// conv_address0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or conv_addr_1_reg_611 or ap_sig_cseq_ST_st24_fsm_23 or tmp_31_fu_320_p1 or ap_sig_cseq_ST_st17_fsm_16)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        conv_address0 = tmp_31_fu_320_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23) | (ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16))) begin
        conv_address0 = conv_addr_1_reg_611;
    end else begin
        conv_address0 = 'bx;
    end
end

/// conv_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st24_fsm_23 or ap_sig_cseq_ST_st17_fsm_16)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23) | (ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16))) begin
        conv_ce0 = ap_const_logic_1;
    end else begin
        conv_ce0 = ap_const_logic_0;
    end
end

/// conv_d0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or tmp_11_reg_692 or ap_sig_cseq_ST_st24_fsm_23)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        conv_d0 = tmp_11_reg_692;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        conv_d0 = ap_const_lv32_0;
    end else begin
        conv_d0 = 'bx;
    end
end

/// conv_we0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond4_fu_299_p2 or ap_sig_cseq_ST_st24_fsm_23)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond4_fu_299_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        conv_we0 = ap_const_logic_1;
    end else begin
        conv_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond5_fu_228_p2 or exitcond3_fu_325_p2 or exitcond2_fu_376_p2 or exitcond1_fu_412_p2 or exitcond_fu_504_p2 or exitcond4_fu_299_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond5_fu_228_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((ap_const_lv1_0 == exitcond4_fu_299_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond3_fu_325_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (~(ap_const_lv1_0 == exitcond2_fu_376_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_412_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : 
        begin
            if ((ap_const_lv1_0 == exitcond_fu_504_p2)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_36_fu_534_p1;
assign B_address0 = tmp_37_fu_548_p1;

/// ap_sig_bdd_102 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_102 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_111 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_111 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_125 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_125 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_143 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_143 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_163 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_163 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_178 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_178 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_187 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_187 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_197 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_197 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_206 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_206 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_11]);
end

/// ap_sig_bdd_216 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_216 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_16]);
end

/// ap_sig_bdd_245 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_245 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_17]);
end

/// ap_sig_bdd_258 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_258 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end

/// ap_sig_bdd_271 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_271 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_12]);
end

/// ap_sig_bdd_281 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_281 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_42 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_42 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_83 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_83 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign exitcond1_fu_412_p2 = (k_reg_160 == ap_const_lv3_5? 1'b1: 1'b0);
assign exitcond2_fu_376_p2 = (j_reg_148 == ap_const_lv5_1A? 1'b1: 1'b0);
assign exitcond3_fu_325_p2 = (i_reg_136 == ap_const_lv5_1A? 1'b1: 1'b0);
assign exitcond4_fu_299_p2 = (t_reg_125 == ap_const_lv5_18? 1'b1: 1'b0);
assign exitcond5_fu_228_p2 = (s_reg_114 == ap_const_lv5_18? 1'b1: 1'b0);
assign exitcond_fu_504_p2 = (l_reg_171 == ap_const_lv3_5? 1'b1: 1'b0);
assign grp_fu_182_ce = ap_const_logic_1;
assign grp_fu_182_p0 = conv_load_reg_687;
assign grp_fu_182_p1 = tmp_10_reg_682;
assign grp_fu_186_ce = ap_const_logic_1;
assign grp_fu_186_p0 = tmp_5_reg_667;
assign grp_fu_186_p1 = B_q0;
assign grp_fu_191_ce = ap_const_logic_1;
assign grp_fu_191_p0 = A_load_reg_662;
assign i_2_fu_402_p2 = (i_reg_136 + ap_const_lv5_1);
assign j_2_fu_494_p2 = (j_reg_148 + ap_const_lv5_1);
assign k_2_fu_418_p2 = (k_reg_160 + ap_const_lv3_1);
assign k_cast4_fu_408_p1 = k_reg_160;
assign l_1_fu_510_p2 = (l_reg_171 + ap_const_lv3_1);
assign l_cast2_fu_500_p1 = l_reg_171;
assign p_addr10_cast_fu_224_p1 = $signed(p_addr6_fu_218_p2);
assign p_addr10_fu_244_p2 = ($signed(p_addr10_cast_reg_558) + $signed(tmp2_trn_cast_fu_240_p1));
assign p_addr11_fu_273_p2 = ($signed(p_shl_fu_257_p1) - $signed(p_shl1_fu_269_p1));
assign p_addr12_fu_315_p2 = ($signed(p_addr11_reg_572) + $signed(tmp_9_trn_fu_311_p1));
assign p_addr1_cast_fu_530_p1 = p_addr1_fu_525_p2;
assign p_addr1_fu_525_p2 = ($signed(tmp_4_trn_cast_fu_521_p1) + $signed(p_addr_cast_reg_629));
assign p_addr2_fu_293_p2 = (tmp_cast_trn_cast_fu_279_p1 + p_shl9_cast_fu_289_p1);
assign p_addr3_cast_fu_472_p1 = p_addr3_fu_467_p2;
assign p_addr3_fu_467_p2 = (p_addr2_reg_577 + tmp_3_trn_cast_fu_463_p1);
assign p_addr4_fu_488_p2 = (p_addr3_cast_fu_472_p1 + p_shl4_fu_484_p1);
assign p_addr5_fu_543_p2 = (tmp_8_trn_fu_539_p1 + p_addr4_reg_634);
assign p_addr6_fu_218_p2 = (p_shl_cast_fu_202_p1 - p_shl6_cast_fu_214_p1);
assign p_addr7_fu_341_p2 = ($signed(p_addr10_cast_reg_558) + $signed(tmp_7_trn_cast_fu_337_p1));
assign p_addr8_fu_370_p2 = ($signed(p_shl2_fu_354_p1) - $signed(p_shl3_fu_366_p1));
assign p_addr9_fu_392_p2 = ($signed(p_addr8_reg_598) + $signed(tmp_1_trn_fu_388_p1));
assign p_addr_cast_fu_459_p1 = $signed(p_addr_fu_453_p2);
assign p_addr_fu_453_p2 = (p_shl14_cast_fu_437_p1 - p_shl15_cast_fu_449_p1);
assign p_shl14_cast_fu_437_p1 = tmp_33_fu_429_p3;
assign p_shl15_cast_fu_449_p1 = tmp_34_fu_441_p3;
assign p_shl1_fu_269_p1 = $signed(tmp_28_fu_261_p3);
assign p_shl2_fu_354_p1 = $signed(tmp_29_fu_346_p3);
assign p_shl3_fu_366_p1 = $signed(tmp_30_fu_358_p3);
assign p_shl4_fu_484_p1 = tmp_35_fu_476_p3;
assign p_shl6_cast_fu_214_p1 = tmp_25_fu_206_p3;
assign p_shl9_cast_fu_289_p1 = tmp_26_fu_282_p3;
assign p_shl_cast_fu_202_p1 = tmp_24_fu_194_p3;
assign p_shl_fu_257_p1 = $signed(tmp_27_fu_249_p3);
assign s_1_fu_234_p2 = (s_reg_114 + ap_const_lv5_1);
assign t_1_fu_305_p2 = (t_reg_125 + ap_const_lv5_1);
assign tmp2_trn_cast_fu_240_p1 = s_reg_114;
assign tmp_1_trn_fu_388_p1 = $unsigned(tmp_s_fu_382_p2);
assign tmp_24_fu_194_p3 = {{tmp1}, {ap_const_lv5_0}};
assign tmp_25_fu_206_p3 = {{tmp1}, {ap_const_lv3_0}};
assign tmp_26_fu_282_p3 = {{tmp}, {ap_const_lv2_0}};
assign tmp_27_fu_249_p3 = {{p_addr10_fu_244_p2}, {ap_const_lv5_0}};
assign tmp_28_fu_261_p3 = {{p_addr10_fu_244_p2}, {ap_const_lv3_0}};
assign tmp_29_fu_346_p3 = {{p_addr7_fu_341_p2}, {ap_const_lv5_0}};
assign tmp_30_fu_358_p3 = {{p_addr7_fu_341_p2}, {ap_const_lv3_0}};
assign tmp_31_fu_320_p1 = $unsigned(p_addr12_fu_315_p2);
assign tmp_32_fu_397_p1 = $unsigned(p_addr9_fu_392_p2);
assign tmp_33_fu_429_p3 = {{x_fu_424_p2}, {ap_const_lv5_0}};
assign tmp_34_fu_441_p3 = {{x_fu_424_p2}, {ap_const_lv2_0}};
assign tmp_35_fu_476_p3 = {{p_addr3_fu_467_p2}, {ap_const_lv2_0}};
assign tmp_36_fu_534_p1 = $unsigned(p_addr1_cast_fu_530_p1);
assign tmp_37_fu_548_p1 = p_addr5_reg_657;
assign tmp_3_trn_cast_fu_463_p1 = k_reg_160;
assign tmp_4_trn_cast_fu_521_p1 = $unsigned(y_fu_516_p2);
assign tmp_6_fu_331_p2 = ($signed(i_reg_136) + $signed(ap_const_lv5_1E));
assign tmp_7_trn_cast_fu_337_p1 = $unsigned(tmp_6_fu_331_p2);
assign tmp_8_trn_fu_539_p1 = l_reg_171;
assign tmp_9_trn_fu_311_p1 = t_reg_125;
assign tmp_cast_trn_cast_fu_279_p1 = tmp;
assign tmp_s_fu_382_p2 = ($signed(j_reg_148) + $signed(ap_const_lv5_1E));
assign x_fu_424_p2 = ($signed(k_cast4_fu_408_p1) + $signed(tmp_6_reg_593));
assign y_fu_516_p2 = ($signed(tmp_s_reg_606) + $signed(l_cast2_fu_500_p1));
always @ (posedge ap_clk)
begin
    p_addr10_cast_reg_558[2:0] <= 3'b000;
    p_addr11_reg_572[2:0] <= 3'b000;
    p_addr8_reg_598[2:0] <= 3'b000;
    p_addr_cast_reg_629[1:0] <= 2'b00;
end



endmodule //feature_extractor_convolve

