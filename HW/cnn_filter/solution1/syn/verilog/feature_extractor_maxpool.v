// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module feature_extractor_maxpool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_mat_address0,
        input_mat_ce0,
        input_mat_q0,
        tmp_4,
        output_mat_address0,
        output_mat_ce0,
        output_mat_we0,
        output_mat_d0,
        tmp_41
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 12'b1;
parameter    ap_ST_st2_fsm_1 = 12'b10;
parameter    ap_ST_st3_fsm_2 = 12'b100;
parameter    ap_ST_st4_fsm_3 = 12'b1000;
parameter    ap_ST_st5_fsm_4 = 12'b10000;
parameter    ap_ST_st6_fsm_5 = 12'b100000;
parameter    ap_ST_st7_fsm_6 = 12'b1000000;
parameter    ap_ST_st8_fsm_7 = 12'b10000000;
parameter    ap_ST_st9_fsm_8 = 12'b100000000;
parameter    ap_ST_st10_fsm_9 = 12'b1000000000;
parameter    ap_ST_st11_fsm_10 = 12'b10000000000;
parameter    ap_ST_st12_fsm_11 = 12'b100000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_C = 4'b1100;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv9_181 = 9'b110000001;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv32_36 = 32'b110110;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_mat_address0;
output   input_mat_ce0;
input  [31:0] input_mat_q0;
input  [2:0] tmp_4;
output  [9:0] output_mat_address0;
output   output_mat_ce0;
output   output_mat_we0;
output  [31:0] output_mat_d0;
input  [2:0] tmp_41;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_mat_ce0;
reg output_mat_ce0;
reg output_mat_we0;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm = 12'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_30;
wire  signed [9:0] p_addr_cast_fu_232_p1;
reg  signed [9:0] p_addr_cast_reg_667;
wire  signed [8:0] p_addr4_cast_fu_266_p1;
reg  signed [8:0] p_addr4_cast_reg_672;
wire   [3:0] i_2_fu_276_p2;
reg   [3:0] i_2_reg_680;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_64;
wire   [4:0] tmp_fu_282_p3;
reg   [4:0] tmp_reg_685;
wire   [0:0] exitcond3_fu_270_p2;
wire  signed [31:0] p_addr6_fu_323_p2;
reg  signed [31:0] p_addr6_reg_690;
wire   [3:0] j_2_fu_335_p2;
reg   [3:0] j_2_reg_698;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_81;
wire   [4:0] tmp_1_fu_341_p3;
reg   [4:0] tmp_1_reg_703;
wire   [0:0] exitcond2_fu_329_p2;
wire   [1:0] k_2_fu_359_p2;
reg   [1:0] k_2_reg_711;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_95;
wire  signed [31:0] p_addr2_fu_403_p2;
reg  signed [31:0] p_addr2_reg_716;
wire   [0:0] exitcond1_fu_353_p2;
wire   [1:0] l_1_fu_433_p2;
reg   [1:0] l_1_reg_724;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_109;
wire  signed [31:0] p_addr3_fu_448_p2;
reg  signed [31:0] p_addr3_reg_729;
wire   [0:0] exitcond_fu_427_p2;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_123;
reg   [31:0] input_mat_load_reg_739;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_131;
wire   [31:0] grp_fu_194_p1;
reg   [31:0] tmp_8_reg_745;
wire   [0:0] tmp_13_fu_533_p2;
reg   [0:0] tmp_13_reg_751;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_142;
reg   [0:0] p_Result_s_reg_756;
wire   [31:0] p_Val2_8_fu_641_p3;
reg   [31:0] p_Val2_8_reg_761;
wire   [31:0] max_2_fu_660_p3;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_155;
reg   [3:0] i_reg_124;
reg   [3:0] j_reg_135;
reg   [31:0] max_reg_147;
reg   [1:0] k_reg_160;
reg   [31:0] max_1_reg_171;
reg   [1:0] l_reg_183;
wire   [63:0] tmp_17_fu_418_p1;
wire   [63:0] tmp_20_fu_453_p1;
wire   [31:0] grp_fu_194_p0;
wire   [31:0] tmp_12_fu_198_p0;
wire   [31:0] tmp_12_fu_198_p1;
wire   [7:0] tmp_s_fu_202_p3;
wire   [5:0] tmp_5_fu_214_p3;
wire   [8:0] p_shl9_cast_fu_210_p1;
wire   [8:0] p_shl1_cast_fu_222_p1;
wire   [8:0] p_addr_fu_226_p2;
wire   [6:0] tmp_9_fu_236_p3;
wire   [4:0] tmp_14_fu_248_p3;
wire   [7:0] p_shl_cast_fu_244_p1;
wire   [7:0] p_shl8_cast_fu_256_p1;
wire   [7:0] p_addr4_fu_260_p2;
wire   [8:0] tmp_trn_cast_fu_290_p1;
wire  signed [8:0] p_addr5_fu_294_p2;
wire   [12:0] tmp_15_fu_299_p3;
wire   [10:0] tmp_16_fu_311_p3;
wire  signed [31:0] p_shl2_fu_307_p1;
wire  signed [31:0] p_shl3_fu_319_p1;
wire   [4:0] k_cast3_fu_349_p1;
wire   [4:0] tmp_3_fu_365_p2;
wire   [9:0] tmp_5_trn_cast_fu_370_p1;
wire  signed [9:0] p_addr1_fu_374_p2;
wire   [14:0] tmp_18_fu_379_p3;
wire   [12:0] tmp_19_fu_391_p3;
wire  signed [31:0] p_shl4_fu_387_p1;
wire  signed [31:0] p_shl5_fu_399_p1;
wire   [31:0] tmp_2_trn_fu_409_p1;
wire  signed [31:0] p_addr7_fu_413_p2;
wire   [4:0] l_cast2_fu_423_p1;
wire   [4:0] tmp_6_fu_439_p2;
wire   [31:0] tmp_7_trn_fu_444_p1;
wire   [31:0] p_Val2_5_fu_457_p1;
wire   [31:0] tmp_8_to_int_fu_474_p1;
wire   [7:0] loc_V_fu_460_p4;
wire   [22:0] loc_V_2_fu_470_p1;
wire   [0:0] notrhs_fu_497_p2;
wire   [0:0] notlhs_fu_491_p2;
wire   [7:0] tmp_2_fu_477_p4;
wire   [22:0] tmp_22_fu_487_p1;
wire   [0:0] notrhs2_fu_515_p2;
wire   [0:0] notlhs1_fu_509_p2;
wire   [0:0] tmp_7_fu_503_p2;
wire   [0:0] tmp_10_fu_521_p2;
wire   [0:0] tmp_11_fu_527_p2;
wire   [0:0] tmp_12_fu_198_p2;
wire   [23:0] p_Result_2_fu_547_p3;
wire   [8:0] tmp_i_i_i_cast1_fu_559_p1;
wire  signed [8:0] sh_assign_fu_563_p2;
wire   [7:0] tmp_1_i_i_fu_577_p2;
wire   [0:0] isNeg_fu_569_p3;
wire  signed [8:0] tmp_1_i_i_cast_fu_583_p1;
wire   [8:0] sh_assign_1_fu_587_p3;
wire  signed [31:0] sh_assign_1_cast_fu_595_p1;
wire  signed [23:0] sh_assign_1_cast_cast_fu_599_p1;
wire   [77:0] tmp_i_i_fu_555_p1;
wire   [77:0] tmp_2_i_i_fu_603_p1;
wire   [23:0] tmp_3_i_i_fu_607_p2;
wire   [0:0] tmp_25_fu_619_p3;
wire   [77:0] tmp_5_i_i_fu_613_p2;
wire   [31:0] tmp_21_fu_627_p1;
wire   [31:0] tmp_23_fu_631_p4;
wire   [31:0] p_Val2_7_i_i_fu_649_p2;
wire   [31:0] p_Val2_s_fu_654_p3;
wire    grp_fu_194_ce;
wire   [4:0] tmp_12_fu_198_opcode;
reg   [11:0] ap_NS_fsm;


feature_extractor_sitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractor_sitofp_32ns_32_6_U9(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_194_p0 ),
    .ce( grp_fu_194_ce ),
    .dout( grp_fu_194_p1 )
);

feature_extractor_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
feature_extractor_fcmp_32ns_32ns_1_1_U10(
    .din0( tmp_12_fu_198_p0 ),
    .din1( tmp_12_fu_198_p1 ),
    .opcode( tmp_12_fu_198_opcode ),
    .dout( tmp_12_fu_198_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond2_fu_329_p2))) begin
        i_reg_124 <= i_2_reg_680;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_124 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond3_fu_270_p2 == ap_const_lv1_0))) begin
        j_reg_135 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond1_fu_353_p2))) begin
        j_reg_135 <= j_2_reg_698;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond_fu_427_p2))) begin
        k_reg_160 <= k_2_reg_711;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_329_p2))) begin
        k_reg_160 <= ap_const_lv2_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond1_fu_353_p2))) begin
        l_reg_183 <= ap_const_lv2_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        l_reg_183 <= l_1_reg_724;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond1_fu_353_p2))) begin
        max_1_reg_171 <= max_reg_147;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        max_1_reg_171 <= max_2_fu_660_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond_fu_427_p2))) begin
        max_reg_147 <= max_1_reg_171;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_329_p2))) begin
        max_reg_147 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_2_reg_680 <= i_2_fu_276_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        input_mat_load_reg_739 <= input_mat_q0;
        tmp_8_reg_745 <= grp_fu_194_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_2_reg_698 <= j_2_fu_335_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        k_2_reg_711 <= k_2_fu_359_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        l_1_reg_724 <= l_1_fu_433_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        p_Result_s_reg_756 <= p_Val2_5_fu_457_p1[ap_const_lv32_1F];
        p_Val2_8_reg_761 <= p_Val2_8_fu_641_p3;
        tmp_13_reg_751 <= tmp_13_fu_533_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond1_fu_353_p2))) begin
        p_addr2_reg_716[31 : 3] <= p_addr2_fu_403_p2[31 : 3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond_fu_427_p2))) begin
        p_addr3_reg_729 <= p_addr3_fu_448_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        p_addr4_cast_reg_672[8 : 2] <= p_addr4_cast_fu_266_p1[8 : 2];
        p_addr_cast_reg_667[9 : 3] <= p_addr_cast_fu_232_p1[9 : 3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond3_fu_270_p2 == ap_const_lv1_0))) begin
        p_addr6_reg_690[31 : 2] <= p_addr6_fu_323_p2[31 : 2];
        tmp_reg_685[4 : 1] <= tmp_fu_282_p3[4 : 1];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_329_p2))) begin
        tmp_1_reg_703[4 : 1] <= tmp_1_fu_341_p3[4 : 1];
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond3_fu_270_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond3_fu_270_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond3_fu_270_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond3_fu_270_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_131)
begin
    if (ap_sig_bdd_131) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_142)
begin
    if (ap_sig_bdd_142) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_155)
begin
    if (ap_sig_bdd_155) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_30)
begin
    if (ap_sig_bdd_30) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_64)
begin
    if (ap_sig_bdd_64) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_81)
begin
    if (ap_sig_bdd_81) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_95)
begin
    if (ap_sig_bdd_95) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_109)
begin
    if (ap_sig_bdd_109) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_123)
begin
    if (ap_sig_bdd_123) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// input_mat_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_8)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        input_mat_ce0 = ap_const_logic_1;
    end else begin
        input_mat_ce0 = ap_const_logic_0;
    end
end

/// output_mat_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        output_mat_ce0 = ap_const_logic_1;
    end else begin
        output_mat_ce0 = ap_const_logic_0;
    end
end

/// output_mat_we0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or exitcond1_fu_353_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond1_fu_353_p2))) begin
        output_mat_we0 = ap_const_logic_1;
    end else begin
        output_mat_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond3_fu_270_p2 or exitcond2_fu_329_p2 or exitcond1_fu_353_p2 or exitcond_fu_427_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond3_fu_270_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((ap_const_lv1_0 == exitcond2_fu_329_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_353_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            if ((ap_const_lv1_0 == exitcond_fu_427_p2)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_109 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_109 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_123 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_123 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_131 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_131 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_142 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_142 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_155 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_155 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_30 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_30 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_64 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_64 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_81 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_81 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_95 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_95 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end
assign exitcond1_fu_353_p2 = (k_reg_160 == ap_const_lv2_2? 1'b1: 1'b0);
assign exitcond2_fu_329_p2 = (j_reg_135 == ap_const_lv4_C? 1'b1: 1'b0);
assign exitcond3_fu_270_p2 = (i_reg_124 == ap_const_lv4_C? 1'b1: 1'b0);
assign exitcond_fu_427_p2 = (l_reg_183 == ap_const_lv2_2? 1'b1: 1'b0);
assign grp_fu_194_ce = ap_const_logic_1;
assign grp_fu_194_p0 = max_1_reg_171;
assign i_2_fu_276_p2 = (i_reg_124 + ap_const_lv4_1);
assign input_mat_address0 = tmp_20_fu_453_p1;
assign isNeg_fu_569_p3 = sh_assign_fu_563_p2[ap_const_lv32_8];
assign j_2_fu_335_p2 = (j_reg_135 + ap_const_lv4_1);
assign k_2_fu_359_p2 = (k_reg_160 + ap_const_lv2_1);
assign k_cast3_fu_349_p1 = k_reg_160;
assign l_1_fu_433_p2 = (l_reg_183 + ap_const_lv2_1);
assign l_cast2_fu_423_p1 = l_reg_183;
assign loc_V_2_fu_470_p1 = p_Val2_5_fu_457_p1[22:0];
assign loc_V_fu_460_p4 = {{p_Val2_5_fu_457_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
assign max_2_fu_660_p3 = ((tmp_13_reg_751[0:0]===1'b1)? p_Val2_s_fu_654_p3: max_1_reg_171);
assign notlhs1_fu_509_p2 = (tmp_2_fu_477_p4 != ap_const_lv8_FF? 1'b1: 1'b0);
assign notlhs_fu_491_p2 = (loc_V_fu_460_p4 != ap_const_lv8_FF? 1'b1: 1'b0);
assign notrhs2_fu_515_p2 = (tmp_22_fu_487_p1 == ap_const_lv23_0? 1'b1: 1'b0);
assign notrhs_fu_497_p2 = (loc_V_2_fu_470_p1 == ap_const_lv23_0? 1'b1: 1'b0);
assign output_mat_address0 = tmp_17_fu_418_p1;
assign output_mat_d0 = max_reg_147;
assign p_Result_2_fu_547_p3 = {{ap_const_lv1_1}, {loc_V_2_fu_470_p1}};
assign p_Val2_5_fu_457_p1 = input_mat_load_reg_739;
assign p_Val2_7_i_i_fu_649_p2 = (ap_const_lv32_0 - p_Val2_8_reg_761);
assign p_Val2_8_fu_641_p3 = ((isNeg_fu_569_p3[0:0]===1'b1)? tmp_21_fu_627_p1: tmp_23_fu_631_p4);
assign p_Val2_s_fu_654_p3 = ((p_Result_s_reg_756[0:0]===1'b1)? p_Val2_7_i_i_fu_649_p2: p_Val2_8_reg_761);
assign p_addr1_fu_374_p2 = ($signed(p_addr_cast_reg_667) + $signed(tmp_5_trn_cast_fu_370_p1));
assign p_addr2_fu_403_p2 = ($signed(p_shl4_fu_387_p1) - $signed(p_shl5_fu_399_p1));
assign p_addr3_fu_448_p2 = ($signed(p_addr2_reg_716) + $signed(tmp_7_trn_fu_444_p1));
assign p_addr4_cast_fu_266_p1 = $signed(p_addr4_fu_260_p2);
assign p_addr4_fu_260_p2 = (p_shl_cast_fu_244_p1 - p_shl8_cast_fu_256_p1);
assign p_addr5_fu_294_p2 = ($signed(tmp_trn_cast_fu_290_p1) + $signed(p_addr4_cast_reg_672));
assign p_addr6_fu_323_p2 = ($signed(p_shl2_fu_307_p1) - $signed(p_shl3_fu_319_p1));
assign p_addr7_fu_413_p2 = ($signed(p_addr6_reg_690) + $signed(tmp_2_trn_fu_409_p1));
assign p_addr_cast_fu_232_p1 = $signed(p_addr_fu_226_p2);
assign p_addr_fu_226_p2 = (p_shl9_cast_fu_210_p1 - p_shl1_cast_fu_222_p1);
assign p_shl1_cast_fu_222_p1 = tmp_5_fu_214_p3;
assign p_shl2_fu_307_p1 = $signed(tmp_15_fu_299_p3);
assign p_shl3_fu_319_p1 = $signed(tmp_16_fu_311_p3);
assign p_shl4_fu_387_p1 = $signed(tmp_18_fu_379_p3);
assign p_shl5_fu_399_p1 = $signed(tmp_19_fu_391_p3);
assign p_shl8_cast_fu_256_p1 = tmp_14_fu_248_p3;
assign p_shl9_cast_fu_210_p1 = tmp_s_fu_202_p3;
assign p_shl_cast_fu_244_p1 = tmp_9_fu_236_p3;
assign sh_assign_1_cast_cast_fu_599_p1 = $signed(sh_assign_1_fu_587_p3);
assign sh_assign_1_cast_fu_595_p1 = $signed(sh_assign_1_fu_587_p3);
assign sh_assign_1_fu_587_p3 = ((isNeg_fu_569_p3[0:0]===1'b1)? tmp_1_i_i_cast_fu_583_p1: sh_assign_fu_563_p2);
assign sh_assign_fu_563_p2 = ($signed(ap_const_lv9_181) + $signed(tmp_i_i_i_cast1_fu_559_p1));
assign tmp_10_fu_521_p2 = (notrhs2_fu_515_p2 | notlhs1_fu_509_p2);
assign tmp_11_fu_527_p2 = (tmp_7_fu_503_p2 & tmp_10_fu_521_p2);
assign tmp_12_fu_198_opcode = ap_const_lv5_2;
assign tmp_12_fu_198_p0 = input_mat_load_reg_739;
assign tmp_12_fu_198_p1 = tmp_8_reg_745;
assign tmp_13_fu_533_p2 = (tmp_11_fu_527_p2 & tmp_12_fu_198_p2);
assign tmp_14_fu_248_p3 = {{tmp_41}, {ap_const_lv2_0}};
assign tmp_15_fu_299_p3 = {{p_addr5_fu_294_p2}, {ap_const_lv4_0}};
assign tmp_16_fu_311_p3 = {{p_addr5_fu_294_p2}, {ap_const_lv2_0}};
assign tmp_17_fu_418_p1 = $unsigned(p_addr7_fu_413_p2);
assign tmp_18_fu_379_p3 = {{p_addr1_fu_374_p2}, {ap_const_lv5_0}};
assign tmp_19_fu_391_p3 = {{p_addr1_fu_374_p2}, {ap_const_lv3_0}};
assign tmp_1_fu_341_p3 = {{j_reg_135}, {ap_const_lv1_0}};
assign tmp_1_i_i_cast_fu_583_p1 = $signed(tmp_1_i_i_fu_577_p2);
assign tmp_1_i_i_fu_577_p2 = (ap_const_lv8_7F - loc_V_fu_460_p4);
assign tmp_20_fu_453_p1 = $unsigned(p_addr3_reg_729);
assign tmp_21_fu_627_p1 = tmp_25_fu_619_p3;
assign tmp_22_fu_487_p1 = tmp_8_to_int_fu_474_p1[22:0];
assign tmp_23_fu_631_p4 = {{tmp_5_i_i_fu_613_p2[ap_const_lv32_36 : ap_const_lv32_17]}};
assign tmp_25_fu_619_p3 = tmp_3_i_i_fu_607_p2[ap_const_lv32_17];
assign tmp_2_fu_477_p4 = {{tmp_8_to_int_fu_474_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
assign tmp_2_i_i_fu_603_p1 = $unsigned(sh_assign_1_cast_fu_595_p1);
assign tmp_2_trn_fu_409_p1 = j_reg_135;
assign tmp_3_fu_365_p2 = (k_cast3_fu_349_p1 + tmp_reg_685);
assign tmp_3_i_i_fu_607_p2 = p_Result_2_fu_547_p3 >> sh_assign_1_cast_cast_fu_599_p1;
assign tmp_5_fu_214_p3 = {{tmp_4}, {ap_const_lv3_0}};
assign tmp_5_i_i_fu_613_p2 = tmp_i_i_fu_555_p1 << tmp_2_i_i_fu_603_p1;
assign tmp_5_trn_cast_fu_370_p1 = tmp_3_fu_365_p2;
assign tmp_6_fu_439_p2 = (l_cast2_fu_423_p1 + tmp_1_reg_703);
assign tmp_7_fu_503_p2 = (notrhs_fu_497_p2 | notlhs_fu_491_p2);
assign tmp_7_trn_fu_444_p1 = tmp_6_fu_439_p2;
assign tmp_8_to_int_fu_474_p1 = tmp_8_reg_745;
assign tmp_9_fu_236_p3 = {{tmp_41}, {ap_const_lv4_0}};
assign tmp_fu_282_p3 = {{i_reg_124}, {ap_const_lv1_0}};
assign tmp_i_i_fu_555_p1 = p_Result_2_fu_547_p3;
assign tmp_i_i_i_cast1_fu_559_p1 = loc_V_fu_460_p4;
assign tmp_s_fu_202_p3 = {{tmp_4}, {ap_const_lv5_0}};
assign tmp_trn_cast_fu_290_p1 = i_reg_124;
always @ (posedge ap_clk)
begin
    p_addr_cast_reg_667[2:0] <= 3'b000;
    p_addr4_cast_reg_672[1:0] <= 2'b00;
    tmp_reg_685[0] <= 1'b0;
    p_addr6_reg_690[1:0] <= 2'b00;
    tmp_1_reg_703[0] <= 1'b0;
    p_addr2_reg_716[2:0] <= 3'b000;
end



endmodule //feature_extractor_maxpool

