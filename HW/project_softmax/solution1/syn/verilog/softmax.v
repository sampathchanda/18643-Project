// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="softmax,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.621000,HLS_SYN_LAT=206,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=31,HLS_SYN_FF=7066,HLS_SYN_LUT=9881}" *)

module softmax (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        inp_Addr_A,
        inp_EN_A,
        inp_WEN_A,
        inp_Din_A,
        inp_Dout_A,
        inp_Clk_A,
        inp_Rst_A,
        out_r_Addr_A,
        out_r_EN_A,
        out_r_WEN_A,
        out_r_Din_A,
        out_r_Dout_A,
        out_r_Clk_A,
        out_r_Rst_A,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 102'b1;
parameter    ap_ST_st2_fsm_1 = 102'b10;
parameter    ap_ST_st3_fsm_2 = 102'b100;
parameter    ap_ST_st4_fsm_3 = 102'b1000;
parameter    ap_ST_st5_fsm_4 = 102'b10000;
parameter    ap_ST_st6_fsm_5 = 102'b100000;
parameter    ap_ST_st7_fsm_6 = 102'b1000000;
parameter    ap_ST_st8_fsm_7 = 102'b10000000;
parameter    ap_ST_st9_fsm_8 = 102'b100000000;
parameter    ap_ST_st10_fsm_9 = 102'b1000000000;
parameter    ap_ST_st11_fsm_10 = 102'b10000000000;
parameter    ap_ST_st12_fsm_11 = 102'b100000000000;
parameter    ap_ST_st13_fsm_12 = 102'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 102'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 102'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 102'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 102'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 102'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 102'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 102'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 102'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 102'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 102'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 102'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 102'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 102'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 102'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 102'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 102'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 102'b100000000000000000000000000000;
parameter    ap_ST_st31_fsm_30 = 102'b1000000000000000000000000000000;
parameter    ap_ST_st32_fsm_31 = 102'b10000000000000000000000000000000;
parameter    ap_ST_st33_fsm_32 = 102'b100000000000000000000000000000000;
parameter    ap_ST_st34_fsm_33 = 102'b1000000000000000000000000000000000;
parameter    ap_ST_st35_fsm_34 = 102'b10000000000000000000000000000000000;
parameter    ap_ST_st36_fsm_35 = 102'b100000000000000000000000000000000000;
parameter    ap_ST_st37_fsm_36 = 102'b1000000000000000000000000000000000000;
parameter    ap_ST_st38_fsm_37 = 102'b10000000000000000000000000000000000000;
parameter    ap_ST_st39_fsm_38 = 102'b100000000000000000000000000000000000000;
parameter    ap_ST_st40_fsm_39 = 102'b1000000000000000000000000000000000000000;
parameter    ap_ST_st41_fsm_40 = 102'b10000000000000000000000000000000000000000;
parameter    ap_ST_st42_fsm_41 = 102'b100000000000000000000000000000000000000000;
parameter    ap_ST_st43_fsm_42 = 102'b1000000000000000000000000000000000000000000;
parameter    ap_ST_st44_fsm_43 = 102'b10000000000000000000000000000000000000000000;
parameter    ap_ST_st45_fsm_44 = 102'b100000000000000000000000000000000000000000000;
parameter    ap_ST_st46_fsm_45 = 102'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_st47_fsm_46 = 102'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_st48_fsm_47 = 102'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_st49_fsm_48 = 102'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_st50_fsm_49 = 102'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_st51_fsm_50 = 102'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_st52_fsm_51 = 102'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st53_fsm_52 = 102'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st54_fsm_53 = 102'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st55_fsm_54 = 102'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st56_fsm_55 = 102'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st57_fsm_56 = 102'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st58_fsm_57 = 102'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st59_fsm_58 = 102'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st60_fsm_59 = 102'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st61_fsm_60 = 102'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st62_fsm_61 = 102'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st63_fsm_62 = 102'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st64_fsm_63 = 102'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st65_fsm_64 = 102'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st66_fsm_65 = 102'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st67_fsm_66 = 102'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st68_fsm_67 = 102'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st69_fsm_68 = 102'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st70_fsm_69 = 102'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st71_fsm_70 = 102'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st72_fsm_71 = 102'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st73_fsm_72 = 102'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st74_fsm_73 = 102'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st75_fsm_74 = 102'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st76_fsm_75 = 102'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st77_fsm_76 = 102'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st78_fsm_77 = 102'b100000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st79_fsm_78 = 102'b1000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st80_fsm_79 = 102'b10000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st81_fsm_80 = 102'b100000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st82_fsm_81 = 102'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st83_fsm_82 = 102'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st84_fsm_83 = 102'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st85_fsm_84 = 102'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st86_fsm_85 = 102'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st87_fsm_86 = 102'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st88_fsm_87 = 102'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st89_fsm_88 = 102'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st90_fsm_89 = 102'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st91_fsm_90 = 102'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st92_fsm_91 = 102'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st93_fsm_92 = 102'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st94_fsm_93 = 102'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st95_fsm_94 = 102'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st96_fsm_95 = 102'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st97_fsm_96 = 102'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st98_fsm_97 = 102'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st99_fsm_98 = 102'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st100_fsm_99 = 102'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st101_fsm_100 = 102'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st102_fsm_101 = 102'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv32_44 = 32'b1000100;
parameter    ap_const_lv32_31 = 32'b110001;
parameter    ap_const_lv32_64 = 32'b1100100;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_32 = 32'b110010;
parameter    ap_const_lv32_63 = 32'b1100011;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_65 = 32'b1100101;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_2C = 32'b101100;
parameter    ap_const_lv32_45 = 32'b1000101;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_33 = 32'b110011;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_CONTROL_WSTRB_WIDTH = (C_S_AXI_CONTROL_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1 : 0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1 : 0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1 : 0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1 : 0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1 : 0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
output  [31:0] inp_Addr_A;
output   inp_EN_A;
output  [3:0] inp_WEN_A;
output  [31:0] inp_Din_A;
input  [31:0] inp_Dout_A;
output   inp_Clk_A;
output   inp_Rst_A;
output  [31:0] out_r_Addr_A;
output   out_r_EN_A;
output  [3:0] out_r_WEN_A;
output  [31:0] out_r_Din_A;
input  [31:0] out_r_Dout_A;
output   out_r_Clk_A;
output   out_r_Rst_A;
output   interrupt;

reg inp_EN_A;
reg out_r_EN_A;
reg[3:0] out_r_WEN_A;
reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [101:0] ap_CS_fsm = 102'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_143;
reg    ap_ready;
wire    softmax_control_s_axi_U_ap_dummy_ce;
reg   [31:0] reg_207;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_189;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_196;
wire   [63:0] grp_fu_189_p1;
reg   [63:0] reg_213;
reg    ap_sig_cseq_ST_st26_fsm_25;
reg    ap_sig_bdd_206;
wire   [0:0] exitcond1_fu_284_p2;
reg    ap_sig_cseq_ST_st44_fsm_43;
reg    ap_sig_bdd_220;
wire   [63:0] grp_fu_202_p2;
reg   [63:0] reg_220;
reg    ap_sig_cseq_ST_st69_fsm_68;
reg    ap_sig_bdd_230;
wire   [31:0] grp_fu_186_p1;
reg   [31:0] reg_226;
reg    ap_sig_cseq_ST_st50_fsm_49;
reg    ap_sig_bdd_240;
reg    ap_sig_cseq_ST_st101_fsm_100;
reg    ap_sig_bdd_247;
wire   [1:0] i_1_fu_238_p2;
reg   [1:0] i_1_reg_342;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_257;
wire   [0:0] exitcond3_fu_232_p2;
wire   [31:0] grp_fu_175_p2;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_271;
wire   [1:0] i_2_fu_255_p2;
reg   [1:0] i_2_reg_360;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_280;
wire   [0:0] exitcond2_fu_249_p2;
wire   [0:0] tmp_11_fu_266_p1;
reg   [0:0] tmp_11_reg_370;
wire   [31:0] temp_1_1_fu_270_p3;
reg    ap_sig_cseq_ST_st25_fsm_24;
reg    ap_sig_bdd_296;
wire   [31:0] temp_1_2_fu_277_p3;
wire   [1:0] i_3_fu_290_p2;
reg   [1:0] i_3_reg_389;
wire   [63:0] grp_fu_194_p2;
reg   [63:0] tmp_1_reg_394;
reg    ap_sig_cseq_ST_st49_fsm_48;
reg    ap_sig_bdd_309;
wire   [1:0] i_4_fu_315_p2;
reg   [1:0] i_4_reg_402;
reg    ap_sig_cseq_ST_st51_fsm_50;
reg    ap_sig_bdd_318;
reg   [63:0] tmp_5_reg_407;
wire   [0:0] exitcond_fu_309_p2;
wire   [63:0] grp_fu_198_p2;
reg   [63:0] tmp_7_reg_412;
reg    ap_sig_cseq_ST_st100_fsm_99;
reg    ap_sig_bdd_331;
reg   [1:0] i_reg_82;
reg   [31:0] sum_reg_93;
reg   [31:0] temp_1_s_reg_105;
reg   [31:0] temp_0_s_reg_117;
reg   [1:0] i1_reg_129;
wire   [31:0] sum_1_phi_fu_144_p4;
reg   [31:0] sum_1_reg_140;
reg   [1:0] i2_reg_152;
reg   [1:0] i3_reg_163;
reg    ap_sig_cseq_ST_st102_fsm_101;
reg    ap_sig_bdd_362;
wire   [63:0] tmp_fu_244_p1;
wire   [63:0] tmp_3_fu_261_p1;
wire   [63:0] tmp_2_fu_334_p1;
reg   [31:0] inp_Addr_A_orig;
wire   [31:0] out_r_Addr_A_orig;
wire   [31:0] grp_fu_175_p0;
wire   [31:0] grp_fu_175_p1;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_383;
wire   [31:0] grp_fu_180_p0;
wire   [31:0] grp_fu_180_p1;
reg   [63:0] grp_fu_186_p0;
reg   [31:0] grp_fu_189_p0;
wire   [31:0] temp_load_phi_fu_300_p3;
wire   [31:0] temp_load_1_phi_fu_325_p3;
wire   [63:0] grp_fu_194_p0;
wire   [63:0] grp_fu_194_p1;
reg    ap_sig_cseq_ST_st45_fsm_44;
reg    ap_sig_bdd_398;
wire   [63:0] grp_fu_198_p0;
wire   [63:0] grp_fu_198_p1;
reg    ap_sig_cseq_ST_st70_fsm_69;
reg    ap_sig_bdd_407;
reg   [63:0] grp_fu_202_p1;
reg    ap_sig_cseq_ST_st27_fsm_26;
reg    ap_sig_bdd_415;
reg    ap_sig_cseq_ST_st52_fsm_51;
reg    ap_sig_bdd_422;
wire   [31:0] grp_fu_180_p2;
wire   [0:0] tmp_12_fu_296_p1;
wire   [0:0] tmp_13_fu_321_p1;
wire    grp_fu_175_ce;
wire    grp_fu_180_ce;
wire    grp_fu_194_ce;
wire    grp_fu_198_ce;
wire   [63:0] grp_fu_202_p0;
wire    grp_fu_202_ce;
reg   [101:0] ap_NS_fsm;


softmax_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
softmax_control_s_axi_U(
    .AWVALID( s_axi_control_AWVALID ),
    .AWREADY( s_axi_control_AWREADY ),
    .AWADDR( s_axi_control_AWADDR ),
    .WVALID( s_axi_control_WVALID ),
    .WREADY( s_axi_control_WREADY ),
    .WDATA( s_axi_control_WDATA ),
    .WSTRB( s_axi_control_WSTRB ),
    .ARVALID( s_axi_control_ARVALID ),
    .ARREADY( s_axi_control_ARREADY ),
    .ARADDR( s_axi_control_ARADDR ),
    .RVALID( s_axi_control_RVALID ),
    .RREADY( s_axi_control_RREADY ),
    .RDATA( s_axi_control_RDATA ),
    .RRESP( s_axi_control_RRESP ),
    .BVALID( s_axi_control_BVALID ),
    .BREADY( s_axi_control_BREADY ),
    .BRESP( s_axi_control_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( softmax_control_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle )
);

softmax_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
softmax_fadd_32ns_32ns_32_5_full_dsp_U0(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_175_p0 ),
    .din1( grp_fu_175_p1 ),
    .ce( grp_fu_175_ce ),
    .dout( grp_fu_175_p2 )
);

softmax_fdiv_32ns_32ns_32_16 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
softmax_fdiv_32ns_32ns_32_16_U1(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_180_p0 ),
    .din1( grp_fu_180_p1 ),
    .ce( grp_fu_180_ce ),
    .dout( grp_fu_180_p2 )
);

softmax_fptrunc_64ns_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
softmax_fptrunc_64ns_32_1_U2(
    .din0( grp_fu_186_p0 ),
    .dout( grp_fu_186_p1 )
);

softmax_fpext_32ns_64_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
softmax_fpext_32ns_64_1_U3(
    .din0( grp_fu_189_p0 ),
    .dout( grp_fu_189_p1 )
);

softmax_dadd_64ns_64ns_64_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
softmax_dadd_64ns_64ns_64_5_full_dsp_U4(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_194_p0 ),
    .din1( grp_fu_194_p1 ),
    .ce( grp_fu_194_ce ),
    .dout( grp_fu_194_p2 )
);

softmax_ddiv_64ns_64ns_64_31 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
softmax_ddiv_64ns_64ns_64_31_U5(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_198_p0 ),
    .din1( grp_fu_198_p1 ),
    .ce( grp_fu_198_ce ),
    .dout( grp_fu_198_p2 )
);

softmax_dexp_64ns_64ns_64_18_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
softmax_dexp_64ns_64ns_64_18_full_dsp_U6(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_202_p0 ),
    .din1( grp_fu_202_p1 ),
    .ce( grp_fu_202_ce ),
    .dout( grp_fu_202_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond3_fu_232_p2))) begin
        i1_reg_129 <= ap_const_lv2_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24)) begin
        i1_reg_129 <= i_2_reg_360;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & ~(ap_const_lv1_0 == exitcond2_fu_249_p2))) begin
        i2_reg_152 <= ap_const_lv2_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st50_fsm_49)) begin
        i2_reg_152 <= i_3_reg_389;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st26_fsm_25) & ~(exitcond1_fu_284_p2 == ap_const_lv1_0))) begin
        i3_reg_163 <= ap_const_lv2_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st102_fsm_101)) begin
        i3_reg_163 <= i_4_reg_402;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        i_reg_82 <= i_1_reg_342;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_82 <= ap_const_lv2_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & ~(ap_const_lv1_0 == exitcond2_fu_249_p2))) begin
        sum_1_reg_140 <= ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st50_fsm_49)) begin
        sum_1_reg_140 <= grp_fu_186_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        sum_reg_93 <= grp_fu_175_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        sum_reg_93 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_342 <= i_1_fu_238_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        i_2_reg_360 <= i_2_fu_255_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st26_fsm_25)) begin
        i_3_reg_389 <= i_3_fu_290_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st51_fsm_50)) begin
        i_4_reg_402 <= i_4_fu_315_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9))) begin
        reg_207 <= inp_Dout_A;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st26_fsm_25) & (exitcond1_fu_284_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st26_fsm_25) & ~(exitcond1_fu_284_p2 == ap_const_lv1_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st44_fsm_43))) begin
        reg_213 <= grp_fu_189_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st44_fsm_43) | (ap_const_logic_1 == ap_sig_cseq_ST_st69_fsm_68))) begin
        reg_220 <= grp_fu_202_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st50_fsm_49) | (ap_const_logic_1 == ap_sig_cseq_ST_st101_fsm_100))) begin
        reg_226 <= grp_fu_186_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24)) begin
        temp_0_s_reg_117 <= temp_1_2_fu_277_p3;
        temp_1_s_reg_105 <= temp_1_1_fu_270_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & (ap_const_lv1_0 == exitcond2_fu_249_p2))) begin
        tmp_11_reg_370 <= tmp_11_fu_266_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st49_fsm_48)) begin
        tmp_1_reg_394 <= grp_fu_194_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st51_fsm_50) & (ap_const_lv1_0 == exitcond_fu_309_p2))) begin
        tmp_5_reg_407 <= grp_fu_189_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st100_fsm_99)) begin
        tmp_7_reg_412 <= grp_fu_198_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st51_fsm_50 or exitcond_fu_309_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st51_fsm_50) & ~(ap_const_lv1_0 == exitcond_fu_309_p2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st51_fsm_50 or exitcond_fu_309_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st51_fsm_50) & ~(ap_const_lv1_0 == exitcond_fu_309_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st100_fsm_99 assign process. ///
always @ (ap_sig_bdd_331)
begin
    if (ap_sig_bdd_331) begin
        ap_sig_cseq_ST_st100_fsm_99 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st100_fsm_99 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st101_fsm_100 assign process. ///
always @ (ap_sig_bdd_247)
begin
    if (ap_sig_bdd_247) begin
        ap_sig_cseq_ST_st101_fsm_100 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st101_fsm_100 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st102_fsm_101 assign process. ///
always @ (ap_sig_bdd_362)
begin
    if (ap_sig_bdd_362) begin
        ap_sig_cseq_ST_st102_fsm_101 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st102_fsm_101 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_196)
begin
    if (ap_sig_bdd_196) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_143)
begin
    if (ap_sig_bdd_143) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st25_fsm_24 assign process. ///
always @ (ap_sig_bdd_296)
begin
    if (ap_sig_bdd_296) begin
        ap_sig_cseq_ST_st25_fsm_24 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st25_fsm_24 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st26_fsm_25 assign process. ///
always @ (ap_sig_bdd_206)
begin
    if (ap_sig_bdd_206) begin
        ap_sig_cseq_ST_st26_fsm_25 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st26_fsm_25 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st27_fsm_26 assign process. ///
always @ (ap_sig_bdd_415)
begin
    if (ap_sig_bdd_415) begin
        ap_sig_cseq_ST_st27_fsm_26 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st27_fsm_26 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_257)
begin
    if (ap_sig_bdd_257) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_189)
begin
    if (ap_sig_bdd_189) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st44_fsm_43 assign process. ///
always @ (ap_sig_bdd_220)
begin
    if (ap_sig_bdd_220) begin
        ap_sig_cseq_ST_st44_fsm_43 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st44_fsm_43 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st45_fsm_44 assign process. ///
always @ (ap_sig_bdd_398)
begin
    if (ap_sig_bdd_398) begin
        ap_sig_cseq_ST_st45_fsm_44 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st45_fsm_44 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st49_fsm_48 assign process. ///
always @ (ap_sig_bdd_309)
begin
    if (ap_sig_bdd_309) begin
        ap_sig_cseq_ST_st49_fsm_48 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st49_fsm_48 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_383)
begin
    if (ap_sig_bdd_383) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st50_fsm_49 assign process. ///
always @ (ap_sig_bdd_240)
begin
    if (ap_sig_bdd_240) begin
        ap_sig_cseq_ST_st50_fsm_49 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st50_fsm_49 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st51_fsm_50 assign process. ///
always @ (ap_sig_bdd_318)
begin
    if (ap_sig_bdd_318) begin
        ap_sig_cseq_ST_st51_fsm_50 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st51_fsm_50 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st52_fsm_51 assign process. ///
always @ (ap_sig_bdd_422)
begin
    if (ap_sig_bdd_422) begin
        ap_sig_cseq_ST_st52_fsm_51 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st52_fsm_51 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st69_fsm_68 assign process. ///
always @ (ap_sig_bdd_230)
begin
    if (ap_sig_bdd_230) begin
        ap_sig_cseq_ST_st69_fsm_68 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st69_fsm_68 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st70_fsm_69 assign process. ///
always @ (ap_sig_bdd_407)
begin
    if (ap_sig_bdd_407) begin
        ap_sig_cseq_ST_st70_fsm_69 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st70_fsm_69 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_271)
begin
    if (ap_sig_bdd_271) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_280)
begin
    if (ap_sig_bdd_280) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// grp_fu_186_p0 assign process. ///
always @ (ap_sig_cseq_ST_st50_fsm_49 or ap_sig_cseq_ST_st101_fsm_100 or tmp_1_reg_394 or tmp_7_reg_412)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st101_fsm_100)) begin
        grp_fu_186_p0 = tmp_7_reg_412;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st50_fsm_49)) begin
        grp_fu_186_p0 = tmp_1_reg_394;
    end else begin
        grp_fu_186_p0 = 'bx;
    end
end

/// grp_fu_189_p0 assign process. ///
always @ (ap_sig_cseq_ST_st26_fsm_25 or exitcond1_fu_284_p2 or ap_sig_cseq_ST_st44_fsm_43 or ap_sig_cseq_ST_st51_fsm_50 or sum_1_phi_fu_144_p4 or sum_1_reg_140 or temp_load_phi_fu_300_p3 or temp_load_1_phi_fu_325_p3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st51_fsm_50)) begin
        grp_fu_189_p0 = temp_load_1_phi_fu_325_p3;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st44_fsm_43)) begin
        grp_fu_189_p0 = sum_1_reg_140;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st26_fsm_25) & ~(exitcond1_fu_284_p2 == ap_const_lv1_0))) begin
        grp_fu_189_p0 = sum_1_phi_fu_144_p4;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st26_fsm_25) & (exitcond1_fu_284_p2 == ap_const_lv1_0))) begin
        grp_fu_189_p0 = temp_load_phi_fu_300_p3;
    end else begin
        grp_fu_189_p0 = 'bx;
    end
end

/// grp_fu_202_p1 assign process. ///
always @ (reg_213 or tmp_5_reg_407 or ap_sig_cseq_ST_st27_fsm_26 or ap_sig_cseq_ST_st52_fsm_51)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st52_fsm_51)) begin
        grp_fu_202_p1 = tmp_5_reg_407;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st27_fsm_26)) begin
        grp_fu_202_p1 = reg_213;
    end else begin
        grp_fu_202_p1 = 'bx;
    end
end

/// inp_Addr_A_orig assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st9_fsm_8 or tmp_fu_244_p1 or tmp_3_fu_261_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        inp_Addr_A_orig = tmp_3_fu_261_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        inp_Addr_A_orig = tmp_fu_244_p1;
    end else begin
        inp_Addr_A_orig = 'bx;
    end
end

/// inp_EN_A assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st9_fsm_8)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        inp_EN_A = ap_const_logic_1;
    end else begin
        inp_EN_A = ap_const_logic_0;
    end
end

/// out_r_EN_A assign process. ///
always @ (ap_sig_cseq_ST_st102_fsm_101)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st102_fsm_101)) begin
        out_r_EN_A = ap_const_logic_1;
    end else begin
        out_r_EN_A = ap_const_logic_0;
    end
end

/// out_r_WEN_A assign process. ///
always @ (ap_sig_cseq_ST_st102_fsm_101)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st102_fsm_101)) begin
        out_r_WEN_A = ap_const_lv4_F;
    end else begin
        out_r_WEN_A = ap_const_lv4_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond1_fu_284_p2 or exitcond3_fu_232_p2 or exitcond2_fu_249_p2 or exitcond_fu_309_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_lv1_0 == exitcond3_fu_232_p2)) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st9_fsm_8 : 
        begin
            if (~(ap_const_lv1_0 == exitcond2_fu_249_p2)) begin
                ap_NS_fsm = ap_ST_st26_fsm_25;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st26_fsm_25 : 
        begin
            if (~(exitcond1_fu_284_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st51_fsm_50;
            end else begin
                ap_NS_fsm = ap_ST_st27_fsm_26;
            end
        end
        ap_ST_st27_fsm_26 : 
        begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : 
        begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : 
        begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : 
        begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : 
        begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : 
        begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : 
        begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : 
        begin
            ap_NS_fsm = ap_ST_st35_fsm_34;
        end
        ap_ST_st35_fsm_34 : 
        begin
            ap_NS_fsm = ap_ST_st36_fsm_35;
        end
        ap_ST_st36_fsm_35 : 
        begin
            ap_NS_fsm = ap_ST_st37_fsm_36;
        end
        ap_ST_st37_fsm_36 : 
        begin
            ap_NS_fsm = ap_ST_st38_fsm_37;
        end
        ap_ST_st38_fsm_37 : 
        begin
            ap_NS_fsm = ap_ST_st39_fsm_38;
        end
        ap_ST_st39_fsm_38 : 
        begin
            ap_NS_fsm = ap_ST_st40_fsm_39;
        end
        ap_ST_st40_fsm_39 : 
        begin
            ap_NS_fsm = ap_ST_st41_fsm_40;
        end
        ap_ST_st41_fsm_40 : 
        begin
            ap_NS_fsm = ap_ST_st42_fsm_41;
        end
        ap_ST_st42_fsm_41 : 
        begin
            ap_NS_fsm = ap_ST_st43_fsm_42;
        end
        ap_ST_st43_fsm_42 : 
        begin
            ap_NS_fsm = ap_ST_st44_fsm_43;
        end
        ap_ST_st44_fsm_43 : 
        begin
            ap_NS_fsm = ap_ST_st45_fsm_44;
        end
        ap_ST_st45_fsm_44 : 
        begin
            ap_NS_fsm = ap_ST_st46_fsm_45;
        end
        ap_ST_st46_fsm_45 : 
        begin
            ap_NS_fsm = ap_ST_st47_fsm_46;
        end
        ap_ST_st47_fsm_46 : 
        begin
            ap_NS_fsm = ap_ST_st48_fsm_47;
        end
        ap_ST_st48_fsm_47 : 
        begin
            ap_NS_fsm = ap_ST_st49_fsm_48;
        end
        ap_ST_st49_fsm_48 : 
        begin
            ap_NS_fsm = ap_ST_st50_fsm_49;
        end
        ap_ST_st50_fsm_49 : 
        begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st51_fsm_50 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_309_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st52_fsm_51;
            end
        end
        ap_ST_st52_fsm_51 : 
        begin
            ap_NS_fsm = ap_ST_st53_fsm_52;
        end
        ap_ST_st53_fsm_52 : 
        begin
            ap_NS_fsm = ap_ST_st54_fsm_53;
        end
        ap_ST_st54_fsm_53 : 
        begin
            ap_NS_fsm = ap_ST_st55_fsm_54;
        end
        ap_ST_st55_fsm_54 : 
        begin
            ap_NS_fsm = ap_ST_st56_fsm_55;
        end
        ap_ST_st56_fsm_55 : 
        begin
            ap_NS_fsm = ap_ST_st57_fsm_56;
        end
        ap_ST_st57_fsm_56 : 
        begin
            ap_NS_fsm = ap_ST_st58_fsm_57;
        end
        ap_ST_st58_fsm_57 : 
        begin
            ap_NS_fsm = ap_ST_st59_fsm_58;
        end
        ap_ST_st59_fsm_58 : 
        begin
            ap_NS_fsm = ap_ST_st60_fsm_59;
        end
        ap_ST_st60_fsm_59 : 
        begin
            ap_NS_fsm = ap_ST_st61_fsm_60;
        end
        ap_ST_st61_fsm_60 : 
        begin
            ap_NS_fsm = ap_ST_st62_fsm_61;
        end
        ap_ST_st62_fsm_61 : 
        begin
            ap_NS_fsm = ap_ST_st63_fsm_62;
        end
        ap_ST_st63_fsm_62 : 
        begin
            ap_NS_fsm = ap_ST_st64_fsm_63;
        end
        ap_ST_st64_fsm_63 : 
        begin
            ap_NS_fsm = ap_ST_st65_fsm_64;
        end
        ap_ST_st65_fsm_64 : 
        begin
            ap_NS_fsm = ap_ST_st66_fsm_65;
        end
        ap_ST_st66_fsm_65 : 
        begin
            ap_NS_fsm = ap_ST_st67_fsm_66;
        end
        ap_ST_st67_fsm_66 : 
        begin
            ap_NS_fsm = ap_ST_st68_fsm_67;
        end
        ap_ST_st68_fsm_67 : 
        begin
            ap_NS_fsm = ap_ST_st69_fsm_68;
        end
        ap_ST_st69_fsm_68 : 
        begin
            ap_NS_fsm = ap_ST_st70_fsm_69;
        end
        ap_ST_st70_fsm_69 : 
        begin
            ap_NS_fsm = ap_ST_st71_fsm_70;
        end
        ap_ST_st71_fsm_70 : 
        begin
            ap_NS_fsm = ap_ST_st72_fsm_71;
        end
        ap_ST_st72_fsm_71 : 
        begin
            ap_NS_fsm = ap_ST_st73_fsm_72;
        end
        ap_ST_st73_fsm_72 : 
        begin
            ap_NS_fsm = ap_ST_st74_fsm_73;
        end
        ap_ST_st74_fsm_73 : 
        begin
            ap_NS_fsm = ap_ST_st75_fsm_74;
        end
        ap_ST_st75_fsm_74 : 
        begin
            ap_NS_fsm = ap_ST_st76_fsm_75;
        end
        ap_ST_st76_fsm_75 : 
        begin
            ap_NS_fsm = ap_ST_st77_fsm_76;
        end
        ap_ST_st77_fsm_76 : 
        begin
            ap_NS_fsm = ap_ST_st78_fsm_77;
        end
        ap_ST_st78_fsm_77 : 
        begin
            ap_NS_fsm = ap_ST_st79_fsm_78;
        end
        ap_ST_st79_fsm_78 : 
        begin
            ap_NS_fsm = ap_ST_st80_fsm_79;
        end
        ap_ST_st80_fsm_79 : 
        begin
            ap_NS_fsm = ap_ST_st81_fsm_80;
        end
        ap_ST_st81_fsm_80 : 
        begin
            ap_NS_fsm = ap_ST_st82_fsm_81;
        end
        ap_ST_st82_fsm_81 : 
        begin
            ap_NS_fsm = ap_ST_st83_fsm_82;
        end
        ap_ST_st83_fsm_82 : 
        begin
            ap_NS_fsm = ap_ST_st84_fsm_83;
        end
        ap_ST_st84_fsm_83 : 
        begin
            ap_NS_fsm = ap_ST_st85_fsm_84;
        end
        ap_ST_st85_fsm_84 : 
        begin
            ap_NS_fsm = ap_ST_st86_fsm_85;
        end
        ap_ST_st86_fsm_85 : 
        begin
            ap_NS_fsm = ap_ST_st87_fsm_86;
        end
        ap_ST_st87_fsm_86 : 
        begin
            ap_NS_fsm = ap_ST_st88_fsm_87;
        end
        ap_ST_st88_fsm_87 : 
        begin
            ap_NS_fsm = ap_ST_st89_fsm_88;
        end
        ap_ST_st89_fsm_88 : 
        begin
            ap_NS_fsm = ap_ST_st90_fsm_89;
        end
        ap_ST_st90_fsm_89 : 
        begin
            ap_NS_fsm = ap_ST_st91_fsm_90;
        end
        ap_ST_st91_fsm_90 : 
        begin
            ap_NS_fsm = ap_ST_st92_fsm_91;
        end
        ap_ST_st92_fsm_91 : 
        begin
            ap_NS_fsm = ap_ST_st93_fsm_92;
        end
        ap_ST_st93_fsm_92 : 
        begin
            ap_NS_fsm = ap_ST_st94_fsm_93;
        end
        ap_ST_st94_fsm_93 : 
        begin
            ap_NS_fsm = ap_ST_st95_fsm_94;
        end
        ap_ST_st95_fsm_94 : 
        begin
            ap_NS_fsm = ap_ST_st96_fsm_95;
        end
        ap_ST_st96_fsm_95 : 
        begin
            ap_NS_fsm = ap_ST_st97_fsm_96;
        end
        ap_ST_st97_fsm_96 : 
        begin
            ap_NS_fsm = ap_ST_st98_fsm_97;
        end
        ap_ST_st98_fsm_97 : 
        begin
            ap_NS_fsm = ap_ST_st99_fsm_98;
        end
        ap_ST_st99_fsm_98 : 
        begin
            ap_NS_fsm = ap_ST_st100_fsm_99;
        end
        ap_ST_st100_fsm_99 : 
        begin
            ap_NS_fsm = ap_ST_st101_fsm_100;
        end
        ap_ST_st101_fsm_100 : 
        begin
            ap_NS_fsm = ap_ST_st102_fsm_101;
        end
        ap_ST_st102_fsm_101 : 
        begin
            ap_NS_fsm = ap_ST_st51_fsm_50;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_143 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_143 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_189 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_189 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_196 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_196 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_206 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_206 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_19]);
end

/// ap_sig_bdd_220 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_220 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2B]);
end

/// ap_sig_bdd_230 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_230 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_44]);
end

/// ap_sig_bdd_240 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_240 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_31]);
end

/// ap_sig_bdd_247 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_247 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_64]);
end

/// ap_sig_bdd_257 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_257 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_271 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_271 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_280 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_280 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_296 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_296 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_18]);
end

/// ap_sig_bdd_309 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_309 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_30]);
end

/// ap_sig_bdd_318 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_318 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_32]);
end

/// ap_sig_bdd_331 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_331 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_63]);
end

/// ap_sig_bdd_362 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_362 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_65]);
end

/// ap_sig_bdd_383 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_383 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_398 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_398 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2C]);
end

/// ap_sig_bdd_407 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_407 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_45]);
end

/// ap_sig_bdd_415 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_415 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1A]);
end

/// ap_sig_bdd_422 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_422 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_33]);
end
assign exitcond1_fu_284_p2 = (i2_reg_152 == ap_const_lv2_2? 1'b1: 1'b0);
assign exitcond2_fu_249_p2 = (i1_reg_129 == ap_const_lv2_2? 1'b1: 1'b0);
assign exitcond3_fu_232_p2 = (i_reg_82 == ap_const_lv2_2? 1'b1: 1'b0);
assign exitcond_fu_309_p2 = (i3_reg_163 == ap_const_lv2_2? 1'b1: 1'b0);
assign grp_fu_175_ce = ap_const_logic_1;
assign grp_fu_175_p0 = sum_reg_93;
assign grp_fu_175_p1 = reg_207;
assign grp_fu_180_ce = ap_const_logic_1;
assign grp_fu_180_p0 = inp_Dout_A;
assign grp_fu_180_p1 = sum_reg_93;
assign grp_fu_194_ce = ap_const_logic_1;
assign grp_fu_194_p0 = reg_213;
assign grp_fu_194_p1 = reg_220;
assign grp_fu_198_ce = ap_const_logic_1;
assign grp_fu_198_p0 = reg_220;
assign grp_fu_198_p1 = reg_213;
assign grp_fu_202_ce = ap_const_logic_1;
assign grp_fu_202_p0 = ap_const_lv64_0;
assign i_1_fu_238_p2 = (i_reg_82 + ap_const_lv2_1);
assign i_2_fu_255_p2 = (i1_reg_129 + ap_const_lv2_1);
assign i_3_fu_290_p2 = (i2_reg_152 + ap_const_lv2_1);
assign i_4_fu_315_p2 = (i3_reg_163 + ap_const_lv2_1);
assign inp_Addr_A = inp_Addr_A_orig << ap_const_lv32_2;
assign inp_Clk_A = ap_clk;
assign inp_Din_A = ap_const_lv32_0;
assign inp_Rst_A = ap_rst_n_inv;
assign inp_WEN_A = ap_const_lv4_0;
assign out_r_Addr_A = out_r_Addr_A_orig << ap_const_lv32_2;
assign out_r_Addr_A_orig = tmp_2_fu_334_p1;
assign out_r_Clk_A = ap_clk;
assign out_r_Din_A = reg_226;
assign out_r_Rst_A = ap_rst_n_inv;
assign softmax_control_s_axi_U_ap_dummy_ce = ap_const_logic_1;
assign sum_1_phi_fu_144_p4 = sum_1_reg_140;
assign temp_1_1_fu_270_p3 = ((tmp_11_reg_370[0:0]===1'b1)? grp_fu_180_p2: temp_1_s_reg_105);
assign temp_1_2_fu_277_p3 = ((tmp_11_reg_370[0:0]===1'b1)? temp_0_s_reg_117: grp_fu_180_p2);
assign temp_load_1_phi_fu_325_p3 = ((tmp_13_fu_321_p1[0:0]===1'b1)? temp_1_s_reg_105: temp_0_s_reg_117);
assign temp_load_phi_fu_300_p3 = ((tmp_12_fu_296_p1[0:0]===1'b1)? temp_1_s_reg_105: temp_0_s_reg_117);
assign tmp_11_fu_266_p1 = i1_reg_129[0:0];
assign tmp_12_fu_296_p1 = i2_reg_152[0:0];
assign tmp_13_fu_321_p1 = i3_reg_163[0:0];
assign tmp_2_fu_334_p1 = i3_reg_163;
assign tmp_3_fu_261_p1 = i1_reg_129;
assign tmp_fu_244_p1 = i_reg_82;


endmodule //softmax

