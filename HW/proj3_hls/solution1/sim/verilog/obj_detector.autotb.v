// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      obj_detector
`define AUTOTB_DUT_INST AESL_inst_obj_detector
`define AUTOTB_TOP      apatb_obj_detector_top
`define AUTOTB_LAT_RESULT_FILE "obj_detector.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "obj_detector.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_obj_detector_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_TRANSACTION_NUM  1
`define AUTOTB_CLOCK_PERIOD 10.000000
`define LENGTH_HP0 784
`define LENGTH_HP1 150
`define LENGTH_HP2 1728
`define LENGTH_HP3 2
`define LENGTH_A 1
`define LENGTH_W0 1
`define LENGTH_W1 1
`define LENGTH_res 1

`define   AESL_DEPTH_HP0 1
`define   AESL_DEPTH_HP1 1
`define   AESL_DEPTH_HP2 1
`define   AESL_DEPTH_HP3 1
`define   AESL_DEPTH_A 1
`define   AESL_DEPTH_W0 1
`define   AESL_DEPTH_W1 1
`define   AESL_DEPTH_res 1
`define AUTOTB_TVIN_HP0  "../tv/cdatafile/c.obj_detector.autotvin_HP0.dat"
`define AUTOTB_TVIN_HP1  "../tv/cdatafile/c.obj_detector.autotvin_HP1.dat"
`define AUTOTB_TVIN_HP2  "../tv/cdatafile/c.obj_detector.autotvin_HP2.dat"
`define AUTOTB_TVIN_A  "../tv/cdatafile/c.obj_detector.autotvin_A.dat"
`define AUTOTB_TVIN_W0  "../tv/cdatafile/c.obj_detector.autotvin_W0.dat"
`define AUTOTB_TVIN_W1  "../tv/cdatafile/c.obj_detector.autotvin_W1.dat"
`define AUTOTB_TVIN_res  "../tv/cdatafile/c.obj_detector.autotvin_res.dat"
`define AUTOTB_TVIN_HP0_out_wrapc  "../tv/rtldatafile/rtl.obj_detector.autotvin_HP0.dat"
`define AUTOTB_TVIN_HP1_out_wrapc  "../tv/rtldatafile/rtl.obj_detector.autotvin_HP1.dat"
`define AUTOTB_TVIN_HP2_out_wrapc  "../tv/rtldatafile/rtl.obj_detector.autotvin_HP2.dat"
`define AUTOTB_TVIN_A_out_wrapc  "../tv/rtldatafile/rtl.obj_detector.autotvin_A.dat"
`define AUTOTB_TVIN_W0_out_wrapc  "../tv/rtldatafile/rtl.obj_detector.autotvin_W0.dat"
`define AUTOTB_TVIN_W1_out_wrapc  "../tv/rtldatafile/rtl.obj_detector.autotvin_W1.dat"
`define AUTOTB_TVIN_res_out_wrapc  "../tv/rtldatafile/rtl.obj_detector.autotvin_res.dat"
`define AUTOTB_TVOUT_HP3  "../tv/cdatafile/c.obj_detector.autotvout_HP3.dat"
`define AUTOTB_TVOUT_HP3_out_wrapc  "../tv/rtldatafile/rtl.obj_detector.autotvout_HP3.dat"

module `AUTOTB_TOP;
task read_token;
    input integer fp;
    output reg [199 : 0] token;
    reg [7:0] c;
    reg intoken;
    reg done;
    begin
        token = "";
        intoken = 0;
        done = 0;
        while (!done) begin
            c = $fgetc(fp);
            if (c == 8'hff) begin   // EOF
                done = 1;
            end
            else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
                if (intoken) begin
                    done = 1;
                end
            end
            else begin              // valid character
                intoken = 1;
                token = (token << 8) | c;
            end
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
reg [31 : 0] AESL_mLatCnterIn [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterIn_addr;
reg [31 : 0] AESL_mLatCnterOut [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterOut_addr ;
reg [31 : 0] AESL_clk_counter ;
reg [17 - 1 : 0] AESL_clk_ready[0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [17 - 1 : 0] AESL_clk_done[0 : `AUTOTB_TRANSACTION_NUM + 1];

reg reported_stuck = 0;
reg reported_stuck_cnt = 0;
wire  s_axi_AXILiteS_AWVALID;
wire  s_axi_AXILiteS_AWREADY;
wire [5 : 0] s_axi_AXILiteS_AWADDR;
wire  s_axi_AXILiteS_WVALID;
wire  s_axi_AXILiteS_WREADY;
wire [31 : 0] s_axi_AXILiteS_WDATA;
wire [3 : 0] s_axi_AXILiteS_WSTRB;
wire  s_axi_AXILiteS_ARVALID;
wire  s_axi_AXILiteS_ARREADY;
wire [5 : 0] s_axi_AXILiteS_ARADDR;
wire  s_axi_AXILiteS_RVALID;
wire  s_axi_AXILiteS_RREADY;
wire [31 : 0] s_axi_AXILiteS_RDATA;
wire [1 : 0] s_axi_AXILiteS_RRESP;
wire  s_axi_AXILiteS_BVALID;
wire  s_axi_AXILiteS_BREADY;
wire [1 : 0] s_axi_AXILiteS_BRESP;
wire  s_axi_control_AWVALID;
wire  s_axi_control_AWREADY;
wire [4 : 0] s_axi_control_AWADDR;
wire  s_axi_control_WVALID;
wire  s_axi_control_WREADY;
wire [31 : 0] s_axi_control_WDATA;
wire [3 : 0] s_axi_control_WSTRB;
wire  s_axi_control_ARVALID;
wire  s_axi_control_ARREADY;
wire [4 : 0] s_axi_control_ARADDR;
wire  s_axi_control_RVALID;
wire  s_axi_control_RREADY;
wire [31 : 0] s_axi_control_RDATA;
wire [1 : 0] s_axi_control_RRESP;
wire  s_axi_control_BVALID;
wire  s_axi_control_BREADY;
wire [1 : 0] s_axi_control_BRESP;
wire ap_clk;
wire ap_rst_n;
wire  m_axi_HP0_AWVALID;
wire  m_axi_HP0_AWREADY;
wire [31 : 0] m_axi_HP0_AWADDR;
wire [0 : 0] m_axi_HP0_AWID;
wire [7 : 0] m_axi_HP0_AWLEN;
wire [2 : 0] m_axi_HP0_AWSIZE;
wire [1 : 0] m_axi_HP0_AWBURST;
wire [1 : 0] m_axi_HP0_AWLOCK;
wire [3 : 0] m_axi_HP0_AWCACHE;
wire [2 : 0] m_axi_HP0_AWPROT;
wire [3 : 0] m_axi_HP0_AWQOS;
wire [3 : 0] m_axi_HP0_AWREGION;
wire [0 : 0] m_axi_HP0_AWUSER;
wire  m_axi_HP0_WVALID;
wire  m_axi_HP0_WREADY;
wire [31 : 0] m_axi_HP0_WDATA;
wire [3 : 0] m_axi_HP0_WSTRB;
wire  m_axi_HP0_WLAST;
wire [0 : 0] m_axi_HP0_WID;
wire [0 : 0] m_axi_HP0_WUSER;
wire  m_axi_HP0_ARVALID;
wire  m_axi_HP0_ARREADY;
wire [31 : 0] m_axi_HP0_ARADDR;
wire [0 : 0] m_axi_HP0_ARID;
wire [7 : 0] m_axi_HP0_ARLEN;
wire [2 : 0] m_axi_HP0_ARSIZE;
wire [1 : 0] m_axi_HP0_ARBURST;
wire [1 : 0] m_axi_HP0_ARLOCK;
wire [3 : 0] m_axi_HP0_ARCACHE;
wire [2 : 0] m_axi_HP0_ARPROT;
wire [3 : 0] m_axi_HP0_ARQOS;
wire [3 : 0] m_axi_HP0_ARREGION;
wire [0 : 0] m_axi_HP0_ARUSER;
wire  m_axi_HP0_RVALID;
wire  m_axi_HP0_RREADY;
wire [31 : 0] m_axi_HP0_RDATA;
wire  m_axi_HP0_RLAST;
wire [0 : 0] m_axi_HP0_RID;
wire [0 : 0] m_axi_HP0_RUSER;
wire [1 : 0] m_axi_HP0_RRESP;
wire  m_axi_HP0_BVALID;
wire  m_axi_HP0_BREADY;
wire [1 : 0] m_axi_HP0_BRESP;
wire [0 : 0] m_axi_HP0_BID;
wire [0 : 0] m_axi_HP0_BUSER;
wire  m_axi_HP1_AWVALID;
wire  m_axi_HP1_AWREADY;
wire [31 : 0] m_axi_HP1_AWADDR;
wire [0 : 0] m_axi_HP1_AWID;
wire [7 : 0] m_axi_HP1_AWLEN;
wire [2 : 0] m_axi_HP1_AWSIZE;
wire [1 : 0] m_axi_HP1_AWBURST;
wire [1 : 0] m_axi_HP1_AWLOCK;
wire [3 : 0] m_axi_HP1_AWCACHE;
wire [2 : 0] m_axi_HP1_AWPROT;
wire [3 : 0] m_axi_HP1_AWQOS;
wire [3 : 0] m_axi_HP1_AWREGION;
wire [0 : 0] m_axi_HP1_AWUSER;
wire  m_axi_HP1_WVALID;
wire  m_axi_HP1_WREADY;
wire [31 : 0] m_axi_HP1_WDATA;
wire [3 : 0] m_axi_HP1_WSTRB;
wire  m_axi_HP1_WLAST;
wire [0 : 0] m_axi_HP1_WID;
wire [0 : 0] m_axi_HP1_WUSER;
wire  m_axi_HP1_ARVALID;
wire  m_axi_HP1_ARREADY;
wire [31 : 0] m_axi_HP1_ARADDR;
wire [0 : 0] m_axi_HP1_ARID;
wire [7 : 0] m_axi_HP1_ARLEN;
wire [2 : 0] m_axi_HP1_ARSIZE;
wire [1 : 0] m_axi_HP1_ARBURST;
wire [1 : 0] m_axi_HP1_ARLOCK;
wire [3 : 0] m_axi_HP1_ARCACHE;
wire [2 : 0] m_axi_HP1_ARPROT;
wire [3 : 0] m_axi_HP1_ARQOS;
wire [3 : 0] m_axi_HP1_ARREGION;
wire [0 : 0] m_axi_HP1_ARUSER;
wire  m_axi_HP1_RVALID;
wire  m_axi_HP1_RREADY;
wire [31 : 0] m_axi_HP1_RDATA;
wire  m_axi_HP1_RLAST;
wire [0 : 0] m_axi_HP1_RID;
wire [0 : 0] m_axi_HP1_RUSER;
wire [1 : 0] m_axi_HP1_RRESP;
wire  m_axi_HP1_BVALID;
wire  m_axi_HP1_BREADY;
wire [1 : 0] m_axi_HP1_BRESP;
wire [0 : 0] m_axi_HP1_BID;
wire [0 : 0] m_axi_HP1_BUSER;
wire  m_axi_HP2_AWVALID;
wire  m_axi_HP2_AWREADY;
wire [31 : 0] m_axi_HP2_AWADDR;
wire [0 : 0] m_axi_HP2_AWID;
wire [7 : 0] m_axi_HP2_AWLEN;
wire [2 : 0] m_axi_HP2_AWSIZE;
wire [1 : 0] m_axi_HP2_AWBURST;
wire [1 : 0] m_axi_HP2_AWLOCK;
wire [3 : 0] m_axi_HP2_AWCACHE;
wire [2 : 0] m_axi_HP2_AWPROT;
wire [3 : 0] m_axi_HP2_AWQOS;
wire [3 : 0] m_axi_HP2_AWREGION;
wire [0 : 0] m_axi_HP2_AWUSER;
wire  m_axi_HP2_WVALID;
wire  m_axi_HP2_WREADY;
wire [31 : 0] m_axi_HP2_WDATA;
wire [3 : 0] m_axi_HP2_WSTRB;
wire  m_axi_HP2_WLAST;
wire [0 : 0] m_axi_HP2_WID;
wire [0 : 0] m_axi_HP2_WUSER;
wire  m_axi_HP2_ARVALID;
wire  m_axi_HP2_ARREADY;
wire [31 : 0] m_axi_HP2_ARADDR;
wire [0 : 0] m_axi_HP2_ARID;
wire [7 : 0] m_axi_HP2_ARLEN;
wire [2 : 0] m_axi_HP2_ARSIZE;
wire [1 : 0] m_axi_HP2_ARBURST;
wire [1 : 0] m_axi_HP2_ARLOCK;
wire [3 : 0] m_axi_HP2_ARCACHE;
wire [2 : 0] m_axi_HP2_ARPROT;
wire [3 : 0] m_axi_HP2_ARQOS;
wire [3 : 0] m_axi_HP2_ARREGION;
wire [0 : 0] m_axi_HP2_ARUSER;
wire  m_axi_HP2_RVALID;
wire  m_axi_HP2_RREADY;
wire [31 : 0] m_axi_HP2_RDATA;
wire  m_axi_HP2_RLAST;
wire [0 : 0] m_axi_HP2_RID;
wire [0 : 0] m_axi_HP2_RUSER;
wire [1 : 0] m_axi_HP2_RRESP;
wire  m_axi_HP2_BVALID;
wire  m_axi_HP2_BREADY;
wire [1 : 0] m_axi_HP2_BRESP;
wire [0 : 0] m_axi_HP2_BID;
wire [0 : 0] m_axi_HP2_BUSER;
wire  m_axi_HP3_AWVALID;
wire  m_axi_HP3_AWREADY;
wire [31 : 0] m_axi_HP3_AWADDR;
wire [0 : 0] m_axi_HP3_AWID;
wire [7 : 0] m_axi_HP3_AWLEN;
wire [2 : 0] m_axi_HP3_AWSIZE;
wire [1 : 0] m_axi_HP3_AWBURST;
wire [1 : 0] m_axi_HP3_AWLOCK;
wire [3 : 0] m_axi_HP3_AWCACHE;
wire [2 : 0] m_axi_HP3_AWPROT;
wire [3 : 0] m_axi_HP3_AWQOS;
wire [3 : 0] m_axi_HP3_AWREGION;
wire [0 : 0] m_axi_HP3_AWUSER;
wire  m_axi_HP3_WVALID;
wire  m_axi_HP3_WREADY;
wire [31 : 0] m_axi_HP3_WDATA;
wire [3 : 0] m_axi_HP3_WSTRB;
wire  m_axi_HP3_WLAST;
wire [0 : 0] m_axi_HP3_WID;
wire [0 : 0] m_axi_HP3_WUSER;
wire  m_axi_HP3_ARVALID;
wire  m_axi_HP3_ARREADY;
wire [31 : 0] m_axi_HP3_ARADDR;
wire [0 : 0] m_axi_HP3_ARID;
wire [7 : 0] m_axi_HP3_ARLEN;
wire [2 : 0] m_axi_HP3_ARSIZE;
wire [1 : 0] m_axi_HP3_ARBURST;
wire [1 : 0] m_axi_HP3_ARLOCK;
wire [3 : 0] m_axi_HP3_ARCACHE;
wire [2 : 0] m_axi_HP3_ARPROT;
wire [3 : 0] m_axi_HP3_ARQOS;
wire [3 : 0] m_axi_HP3_ARREGION;
wire [0 : 0] m_axi_HP3_ARUSER;
wire  m_axi_HP3_RVALID;
wire  m_axi_HP3_RREADY;
wire [31 : 0] m_axi_HP3_RDATA;
wire  m_axi_HP3_RLAST;
wire [0 : 0] m_axi_HP3_RID;
wire [0 : 0] m_axi_HP3_RUSER;
wire [1 : 0] m_axi_HP3_RRESP;
wire  m_axi_HP3_BVALID;
wire  m_axi_HP3_BREADY;
wire [1 : 0] m_axi_HP3_BRESP;
wire [0 : 0] m_axi_HP3_BID;
wire [0 : 0] m_axi_HP3_BUSER;
wire  interrupt;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;
wire AXILiteS_write_data_finish;
wire AESL_slave_start;
wire AESL_slave_write_start_in;
wire AESL_slave_write_start_finish;
reg AESL_slave_ready;
wire AESL_slave_output_done;
reg ready_rise = 0;
reg start_rise = 0;
reg slave_start_status = 0;
reg slave_done_status = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
.s_axi_AXILiteS_AWVALID(s_axi_AXILiteS_AWVALID),
.s_axi_AXILiteS_AWREADY(s_axi_AXILiteS_AWREADY),
.s_axi_AXILiteS_AWADDR(s_axi_AXILiteS_AWADDR),
.s_axi_AXILiteS_WVALID(s_axi_AXILiteS_WVALID),
.s_axi_AXILiteS_WREADY(s_axi_AXILiteS_WREADY),
.s_axi_AXILiteS_WDATA(s_axi_AXILiteS_WDATA),
.s_axi_AXILiteS_WSTRB(s_axi_AXILiteS_WSTRB),
.s_axi_AXILiteS_ARVALID(s_axi_AXILiteS_ARVALID),
.s_axi_AXILiteS_ARREADY(s_axi_AXILiteS_ARREADY),
.s_axi_AXILiteS_ARADDR(s_axi_AXILiteS_ARADDR),
.s_axi_AXILiteS_RVALID(s_axi_AXILiteS_RVALID),
.s_axi_AXILiteS_RREADY(s_axi_AXILiteS_RREADY),
.s_axi_AXILiteS_RDATA(s_axi_AXILiteS_RDATA),
.s_axi_AXILiteS_RRESP(s_axi_AXILiteS_RRESP),
.s_axi_AXILiteS_BVALID(s_axi_AXILiteS_BVALID),
.s_axi_AXILiteS_BREADY(s_axi_AXILiteS_BREADY),
.s_axi_AXILiteS_BRESP(s_axi_AXILiteS_BRESP),
.s_axi_control_AWVALID(s_axi_control_AWVALID),
.s_axi_control_AWREADY(s_axi_control_AWREADY),
.s_axi_control_AWADDR(s_axi_control_AWADDR),
.s_axi_control_WVALID(s_axi_control_WVALID),
.s_axi_control_WREADY(s_axi_control_WREADY),
.s_axi_control_WDATA(s_axi_control_WDATA),
.s_axi_control_WSTRB(s_axi_control_WSTRB),
.s_axi_control_ARVALID(s_axi_control_ARVALID),
.s_axi_control_ARREADY(s_axi_control_ARREADY),
.s_axi_control_ARADDR(s_axi_control_ARADDR),
.s_axi_control_RVALID(s_axi_control_RVALID),
.s_axi_control_RREADY(s_axi_control_RREADY),
.s_axi_control_RDATA(s_axi_control_RDATA),
.s_axi_control_RRESP(s_axi_control_RRESP),
.s_axi_control_BVALID(s_axi_control_BVALID),
.s_axi_control_BREADY(s_axi_control_BREADY),
.s_axi_control_BRESP(s_axi_control_BRESP),
.ap_clk(ap_clk),
.ap_rst_n(ap_rst_n),
.m_axi_HP0_AWVALID(m_axi_HP0_AWVALID),
.m_axi_HP0_AWREADY(m_axi_HP0_AWREADY),
.m_axi_HP0_AWADDR(m_axi_HP0_AWADDR),
.m_axi_HP0_AWID(m_axi_HP0_AWID),
.m_axi_HP0_AWLEN(m_axi_HP0_AWLEN),
.m_axi_HP0_AWSIZE(m_axi_HP0_AWSIZE),
.m_axi_HP0_AWBURST(m_axi_HP0_AWBURST),
.m_axi_HP0_AWLOCK(m_axi_HP0_AWLOCK),
.m_axi_HP0_AWCACHE(m_axi_HP0_AWCACHE),
.m_axi_HP0_AWPROT(m_axi_HP0_AWPROT),
.m_axi_HP0_AWQOS(m_axi_HP0_AWQOS),
.m_axi_HP0_AWREGION(m_axi_HP0_AWREGION),
.m_axi_HP0_AWUSER(m_axi_HP0_AWUSER),
.m_axi_HP0_WVALID(m_axi_HP0_WVALID),
.m_axi_HP0_WREADY(m_axi_HP0_WREADY),
.m_axi_HP0_WDATA(m_axi_HP0_WDATA),
.m_axi_HP0_WSTRB(m_axi_HP0_WSTRB),
.m_axi_HP0_WLAST(m_axi_HP0_WLAST),
.m_axi_HP0_WID(m_axi_HP0_WID),
.m_axi_HP0_WUSER(m_axi_HP0_WUSER),
.m_axi_HP0_ARVALID(m_axi_HP0_ARVALID),
.m_axi_HP0_ARREADY(m_axi_HP0_ARREADY),
.m_axi_HP0_ARADDR(m_axi_HP0_ARADDR),
.m_axi_HP0_ARID(m_axi_HP0_ARID),
.m_axi_HP0_ARLEN(m_axi_HP0_ARLEN),
.m_axi_HP0_ARSIZE(m_axi_HP0_ARSIZE),
.m_axi_HP0_ARBURST(m_axi_HP0_ARBURST),
.m_axi_HP0_ARLOCK(m_axi_HP0_ARLOCK),
.m_axi_HP0_ARCACHE(m_axi_HP0_ARCACHE),
.m_axi_HP0_ARPROT(m_axi_HP0_ARPROT),
.m_axi_HP0_ARQOS(m_axi_HP0_ARQOS),
.m_axi_HP0_ARREGION(m_axi_HP0_ARREGION),
.m_axi_HP0_ARUSER(m_axi_HP0_ARUSER),
.m_axi_HP0_RVALID(m_axi_HP0_RVALID),
.m_axi_HP0_RREADY(m_axi_HP0_RREADY),
.m_axi_HP0_RDATA(m_axi_HP0_RDATA),
.m_axi_HP0_RLAST(m_axi_HP0_RLAST),
.m_axi_HP0_RID(m_axi_HP0_RID),
.m_axi_HP0_RUSER(m_axi_HP0_RUSER),
.m_axi_HP0_RRESP(m_axi_HP0_RRESP),
.m_axi_HP0_BVALID(m_axi_HP0_BVALID),
.m_axi_HP0_BREADY(m_axi_HP0_BREADY),
.m_axi_HP0_BRESP(m_axi_HP0_BRESP),
.m_axi_HP0_BID(m_axi_HP0_BID),
.m_axi_HP0_BUSER(m_axi_HP0_BUSER),
.m_axi_HP1_AWVALID(m_axi_HP1_AWVALID),
.m_axi_HP1_AWREADY(m_axi_HP1_AWREADY),
.m_axi_HP1_AWADDR(m_axi_HP1_AWADDR),
.m_axi_HP1_AWID(m_axi_HP1_AWID),
.m_axi_HP1_AWLEN(m_axi_HP1_AWLEN),
.m_axi_HP1_AWSIZE(m_axi_HP1_AWSIZE),
.m_axi_HP1_AWBURST(m_axi_HP1_AWBURST),
.m_axi_HP1_AWLOCK(m_axi_HP1_AWLOCK),
.m_axi_HP1_AWCACHE(m_axi_HP1_AWCACHE),
.m_axi_HP1_AWPROT(m_axi_HP1_AWPROT),
.m_axi_HP1_AWQOS(m_axi_HP1_AWQOS),
.m_axi_HP1_AWREGION(m_axi_HP1_AWREGION),
.m_axi_HP1_AWUSER(m_axi_HP1_AWUSER),
.m_axi_HP1_WVALID(m_axi_HP1_WVALID),
.m_axi_HP1_WREADY(m_axi_HP1_WREADY),
.m_axi_HP1_WDATA(m_axi_HP1_WDATA),
.m_axi_HP1_WSTRB(m_axi_HP1_WSTRB),
.m_axi_HP1_WLAST(m_axi_HP1_WLAST),
.m_axi_HP1_WID(m_axi_HP1_WID),
.m_axi_HP1_WUSER(m_axi_HP1_WUSER),
.m_axi_HP1_ARVALID(m_axi_HP1_ARVALID),
.m_axi_HP1_ARREADY(m_axi_HP1_ARREADY),
.m_axi_HP1_ARADDR(m_axi_HP1_ARADDR),
.m_axi_HP1_ARID(m_axi_HP1_ARID),
.m_axi_HP1_ARLEN(m_axi_HP1_ARLEN),
.m_axi_HP1_ARSIZE(m_axi_HP1_ARSIZE),
.m_axi_HP1_ARBURST(m_axi_HP1_ARBURST),
.m_axi_HP1_ARLOCK(m_axi_HP1_ARLOCK),
.m_axi_HP1_ARCACHE(m_axi_HP1_ARCACHE),
.m_axi_HP1_ARPROT(m_axi_HP1_ARPROT),
.m_axi_HP1_ARQOS(m_axi_HP1_ARQOS),
.m_axi_HP1_ARREGION(m_axi_HP1_ARREGION),
.m_axi_HP1_ARUSER(m_axi_HP1_ARUSER),
.m_axi_HP1_RVALID(m_axi_HP1_RVALID),
.m_axi_HP1_RREADY(m_axi_HP1_RREADY),
.m_axi_HP1_RDATA(m_axi_HP1_RDATA),
.m_axi_HP1_RLAST(m_axi_HP1_RLAST),
.m_axi_HP1_RID(m_axi_HP1_RID),
.m_axi_HP1_RUSER(m_axi_HP1_RUSER),
.m_axi_HP1_RRESP(m_axi_HP1_RRESP),
.m_axi_HP1_BVALID(m_axi_HP1_BVALID),
.m_axi_HP1_BREADY(m_axi_HP1_BREADY),
.m_axi_HP1_BRESP(m_axi_HP1_BRESP),
.m_axi_HP1_BID(m_axi_HP1_BID),
.m_axi_HP1_BUSER(m_axi_HP1_BUSER),
.m_axi_HP2_AWVALID(m_axi_HP2_AWVALID),
.m_axi_HP2_AWREADY(m_axi_HP2_AWREADY),
.m_axi_HP2_AWADDR(m_axi_HP2_AWADDR),
.m_axi_HP2_AWID(m_axi_HP2_AWID),
.m_axi_HP2_AWLEN(m_axi_HP2_AWLEN),
.m_axi_HP2_AWSIZE(m_axi_HP2_AWSIZE),
.m_axi_HP2_AWBURST(m_axi_HP2_AWBURST),
.m_axi_HP2_AWLOCK(m_axi_HP2_AWLOCK),
.m_axi_HP2_AWCACHE(m_axi_HP2_AWCACHE),
.m_axi_HP2_AWPROT(m_axi_HP2_AWPROT),
.m_axi_HP2_AWQOS(m_axi_HP2_AWQOS),
.m_axi_HP2_AWREGION(m_axi_HP2_AWREGION),
.m_axi_HP2_AWUSER(m_axi_HP2_AWUSER),
.m_axi_HP2_WVALID(m_axi_HP2_WVALID),
.m_axi_HP2_WREADY(m_axi_HP2_WREADY),
.m_axi_HP2_WDATA(m_axi_HP2_WDATA),
.m_axi_HP2_WSTRB(m_axi_HP2_WSTRB),
.m_axi_HP2_WLAST(m_axi_HP2_WLAST),
.m_axi_HP2_WID(m_axi_HP2_WID),
.m_axi_HP2_WUSER(m_axi_HP2_WUSER),
.m_axi_HP2_ARVALID(m_axi_HP2_ARVALID),
.m_axi_HP2_ARREADY(m_axi_HP2_ARREADY),
.m_axi_HP2_ARADDR(m_axi_HP2_ARADDR),
.m_axi_HP2_ARID(m_axi_HP2_ARID),
.m_axi_HP2_ARLEN(m_axi_HP2_ARLEN),
.m_axi_HP2_ARSIZE(m_axi_HP2_ARSIZE),
.m_axi_HP2_ARBURST(m_axi_HP2_ARBURST),
.m_axi_HP2_ARLOCK(m_axi_HP2_ARLOCK),
.m_axi_HP2_ARCACHE(m_axi_HP2_ARCACHE),
.m_axi_HP2_ARPROT(m_axi_HP2_ARPROT),
.m_axi_HP2_ARQOS(m_axi_HP2_ARQOS),
.m_axi_HP2_ARREGION(m_axi_HP2_ARREGION),
.m_axi_HP2_ARUSER(m_axi_HP2_ARUSER),
.m_axi_HP2_RVALID(m_axi_HP2_RVALID),
.m_axi_HP2_RREADY(m_axi_HP2_RREADY),
.m_axi_HP2_RDATA(m_axi_HP2_RDATA),
.m_axi_HP2_RLAST(m_axi_HP2_RLAST),
.m_axi_HP2_RID(m_axi_HP2_RID),
.m_axi_HP2_RUSER(m_axi_HP2_RUSER),
.m_axi_HP2_RRESP(m_axi_HP2_RRESP),
.m_axi_HP2_BVALID(m_axi_HP2_BVALID),
.m_axi_HP2_BREADY(m_axi_HP2_BREADY),
.m_axi_HP2_BRESP(m_axi_HP2_BRESP),
.m_axi_HP2_BID(m_axi_HP2_BID),
.m_axi_HP2_BUSER(m_axi_HP2_BUSER),
.m_axi_HP3_AWVALID(m_axi_HP3_AWVALID),
.m_axi_HP3_AWREADY(m_axi_HP3_AWREADY),
.m_axi_HP3_AWADDR(m_axi_HP3_AWADDR),
.m_axi_HP3_AWID(m_axi_HP3_AWID),
.m_axi_HP3_AWLEN(m_axi_HP3_AWLEN),
.m_axi_HP3_AWSIZE(m_axi_HP3_AWSIZE),
.m_axi_HP3_AWBURST(m_axi_HP3_AWBURST),
.m_axi_HP3_AWLOCK(m_axi_HP3_AWLOCK),
.m_axi_HP3_AWCACHE(m_axi_HP3_AWCACHE),
.m_axi_HP3_AWPROT(m_axi_HP3_AWPROT),
.m_axi_HP3_AWQOS(m_axi_HP3_AWQOS),
.m_axi_HP3_AWREGION(m_axi_HP3_AWREGION),
.m_axi_HP3_AWUSER(m_axi_HP3_AWUSER),
.m_axi_HP3_WVALID(m_axi_HP3_WVALID),
.m_axi_HP3_WREADY(m_axi_HP3_WREADY),
.m_axi_HP3_WDATA(m_axi_HP3_WDATA),
.m_axi_HP3_WSTRB(m_axi_HP3_WSTRB),
.m_axi_HP3_WLAST(m_axi_HP3_WLAST),
.m_axi_HP3_WID(m_axi_HP3_WID),
.m_axi_HP3_WUSER(m_axi_HP3_WUSER),
.m_axi_HP3_ARVALID(m_axi_HP3_ARVALID),
.m_axi_HP3_ARREADY(m_axi_HP3_ARREADY),
.m_axi_HP3_ARADDR(m_axi_HP3_ARADDR),
.m_axi_HP3_ARID(m_axi_HP3_ARID),
.m_axi_HP3_ARLEN(m_axi_HP3_ARLEN),
.m_axi_HP3_ARSIZE(m_axi_HP3_ARSIZE),
.m_axi_HP3_ARBURST(m_axi_HP3_ARBURST),
.m_axi_HP3_ARLOCK(m_axi_HP3_ARLOCK),
.m_axi_HP3_ARCACHE(m_axi_HP3_ARCACHE),
.m_axi_HP3_ARPROT(m_axi_HP3_ARPROT),
.m_axi_HP3_ARQOS(m_axi_HP3_ARQOS),
.m_axi_HP3_ARREGION(m_axi_HP3_ARREGION),
.m_axi_HP3_ARUSER(m_axi_HP3_ARUSER),
.m_axi_HP3_RVALID(m_axi_HP3_RVALID),
.m_axi_HP3_RREADY(m_axi_HP3_RREADY),
.m_axi_HP3_RDATA(m_axi_HP3_RDATA),
.m_axi_HP3_RLAST(m_axi_HP3_RLAST),
.m_axi_HP3_RID(m_axi_HP3_RID),
.m_axi_HP3_RUSER(m_axi_HP3_RUSER),
.m_axi_HP3_RRESP(m_axi_HP3_RRESP),
.m_axi_HP3_BVALID(m_axi_HP3_BVALID),
.m_axi_HP3_BREADY(m_axi_HP3_BREADY),
.m_axi_HP3_BRESP(m_axi_HP3_BRESP),
.m_axi_HP3_BID(m_axi_HP3_BID),
.m_axi_HP3_BUSER(m_axi_HP3_BUSER),
.interrupt(interrupt)
);

// Assignment for control signal
  assign ap_clk = AESL_clock;
  assign ap_rst_n = AESL_reset;
  assign ap_rst_n_n = ~AESL_reset;
  assign AESL_reset = rst;
  assign AESL_start = start;
  assign AESL_ce = ce;
  assign AESL_continue = continue;
  assign AESL_slave_write_start_in = slave_start_status  & AXILiteS_write_data_finish;
  assign AESL_slave_start = AESL_slave_write_start_finish;
  assign AESL_done = slave_done_status ;

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        slave_start_status <= 1;
    end
    else begin
        if (AESL_start == 1 ) begin
            start_rise = 1;
        end
        if (start_rise == 1 && AESL_done == 1 ) begin
            slave_start_status <= 1;
        end
        if (AESL_slave_write_start_in == 1) begin 
            slave_start_status <= 0;
            start_rise = 0;
        end
    end
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        AESL_slave_ready <= 0;
        ready_rise = 0;
    end
    else begin
        if (AESL_ready == 1 ) begin
            ready_rise = 1;
        end
        if (ready_rise == 1 && AESL_done_delay == 1 ) begin
            AESL_slave_ready <= 1;
        end
        if (AESL_slave_ready == 1) begin 
            AESL_slave_ready <= 0;
            ready_rise = 0;
        end
    end
end

always @ (posedge AESL_clock)
begin
    if (AESL_done == 1) begin
        slave_done_status <= 0;
    end
    else if (AESL_slave_output_done == 1 ) begin
        slave_done_status <= 1;
    end
end








wire	AESL_axi_master_HP0_ready;
wire	AESL_axi_master_HP0_done;
wire [32 - 1 : 0] A;
AESL_axi_master_HP0 AESL_AXI_MASTER_HP0(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_HP0_AWVALID (m_axi_HP0_AWVALID),
    .TRAN_HP0_AWREADY (m_axi_HP0_AWREADY),
    .TRAN_HP0_AWADDR (m_axi_HP0_AWADDR),
    .TRAN_HP0_AWID (m_axi_HP0_AWID),
    .TRAN_HP0_AWLEN (m_axi_HP0_AWLEN),
    .TRAN_HP0_AWSIZE (m_axi_HP0_AWSIZE),
    .TRAN_HP0_AWBURST (m_axi_HP0_AWBURST),
    .TRAN_HP0_AWLOCK (m_axi_HP0_AWLOCK),
    .TRAN_HP0_AWCACHE (m_axi_HP0_AWCACHE),
    .TRAN_HP0_AWPROT (m_axi_HP0_AWPROT),
    .TRAN_HP0_AWQOS (m_axi_HP0_AWQOS),
    .TRAN_HP0_AWREGION (m_axi_HP0_AWREGION),
    .TRAN_HP0_AWUSER (m_axi_HP0_AWUSER),
    .TRAN_HP0_WVALID (m_axi_HP0_WVALID),
    .TRAN_HP0_WREADY (m_axi_HP0_WREADY),
    .TRAN_HP0_WDATA (m_axi_HP0_WDATA),
    .TRAN_HP0_WSTRB (m_axi_HP0_WSTRB),
    .TRAN_HP0_WLAST (m_axi_HP0_WLAST),
    .TRAN_HP0_WID (m_axi_HP0_WID),
    .TRAN_HP0_WUSER (m_axi_HP0_WUSER),
    .TRAN_HP0_ARVALID (m_axi_HP0_ARVALID),
    .TRAN_HP0_ARREADY (m_axi_HP0_ARREADY),
    .TRAN_HP0_ARADDR (m_axi_HP0_ARADDR),
    .TRAN_HP0_ARID (m_axi_HP0_ARID),
    .TRAN_HP0_ARLEN (m_axi_HP0_ARLEN),
    .TRAN_HP0_ARSIZE (m_axi_HP0_ARSIZE),
    .TRAN_HP0_ARBURST (m_axi_HP0_ARBURST),
    .TRAN_HP0_ARLOCK (m_axi_HP0_ARLOCK),
    .TRAN_HP0_ARCACHE (m_axi_HP0_ARCACHE),
    .TRAN_HP0_ARPROT (m_axi_HP0_ARPROT),
    .TRAN_HP0_ARQOS (m_axi_HP0_ARQOS),
    .TRAN_HP0_ARREGION (m_axi_HP0_ARREGION),
    .TRAN_HP0_ARUSER (m_axi_HP0_ARUSER),
    .TRAN_HP0_RVALID (m_axi_HP0_RVALID),
    .TRAN_HP0_RREADY (m_axi_HP0_RREADY),
    .TRAN_HP0_RDATA (m_axi_HP0_RDATA),
    .TRAN_HP0_RLAST (m_axi_HP0_RLAST),
    .TRAN_HP0_RID (m_axi_HP0_RID),
    .TRAN_HP0_RUSER (m_axi_HP0_RUSER),
    .TRAN_HP0_RRESP (m_axi_HP0_RRESP),
    .TRAN_HP0_BVALID (m_axi_HP0_BVALID),
    .TRAN_HP0_BREADY (m_axi_HP0_BREADY),
    .TRAN_HP0_BRESP (m_axi_HP0_BRESP),
    .TRAN_HP0_BID (m_axi_HP0_BID),
    .TRAN_HP0_BUSER (m_axi_HP0_BUSER),
    .TRAN_HP0_A (A),
    .ready (AESL_axi_master_HP0_ready),
    .done  (AESL_axi_master_HP0_done)
);
assign	AESL_axi_master_HP0_ready	=   ready;
assign	AESL_axi_master_HP0_done	=   AESL_done_delay;
wire	AESL_axi_master_HP1_ready;
wire	AESL_axi_master_HP1_done;
wire [32 - 1 : 0] W0;
AESL_axi_master_HP1 AESL_AXI_MASTER_HP1(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_HP1_AWVALID (m_axi_HP1_AWVALID),
    .TRAN_HP1_AWREADY (m_axi_HP1_AWREADY),
    .TRAN_HP1_AWADDR (m_axi_HP1_AWADDR),
    .TRAN_HP1_AWID (m_axi_HP1_AWID),
    .TRAN_HP1_AWLEN (m_axi_HP1_AWLEN),
    .TRAN_HP1_AWSIZE (m_axi_HP1_AWSIZE),
    .TRAN_HP1_AWBURST (m_axi_HP1_AWBURST),
    .TRAN_HP1_AWLOCK (m_axi_HP1_AWLOCK),
    .TRAN_HP1_AWCACHE (m_axi_HP1_AWCACHE),
    .TRAN_HP1_AWPROT (m_axi_HP1_AWPROT),
    .TRAN_HP1_AWQOS (m_axi_HP1_AWQOS),
    .TRAN_HP1_AWREGION (m_axi_HP1_AWREGION),
    .TRAN_HP1_AWUSER (m_axi_HP1_AWUSER),
    .TRAN_HP1_WVALID (m_axi_HP1_WVALID),
    .TRAN_HP1_WREADY (m_axi_HP1_WREADY),
    .TRAN_HP1_WDATA (m_axi_HP1_WDATA),
    .TRAN_HP1_WSTRB (m_axi_HP1_WSTRB),
    .TRAN_HP1_WLAST (m_axi_HP1_WLAST),
    .TRAN_HP1_WID (m_axi_HP1_WID),
    .TRAN_HP1_WUSER (m_axi_HP1_WUSER),
    .TRAN_HP1_ARVALID (m_axi_HP1_ARVALID),
    .TRAN_HP1_ARREADY (m_axi_HP1_ARREADY),
    .TRAN_HP1_ARADDR (m_axi_HP1_ARADDR),
    .TRAN_HP1_ARID (m_axi_HP1_ARID),
    .TRAN_HP1_ARLEN (m_axi_HP1_ARLEN),
    .TRAN_HP1_ARSIZE (m_axi_HP1_ARSIZE),
    .TRAN_HP1_ARBURST (m_axi_HP1_ARBURST),
    .TRAN_HP1_ARLOCK (m_axi_HP1_ARLOCK),
    .TRAN_HP1_ARCACHE (m_axi_HP1_ARCACHE),
    .TRAN_HP1_ARPROT (m_axi_HP1_ARPROT),
    .TRAN_HP1_ARQOS (m_axi_HP1_ARQOS),
    .TRAN_HP1_ARREGION (m_axi_HP1_ARREGION),
    .TRAN_HP1_ARUSER (m_axi_HP1_ARUSER),
    .TRAN_HP1_RVALID (m_axi_HP1_RVALID),
    .TRAN_HP1_RREADY (m_axi_HP1_RREADY),
    .TRAN_HP1_RDATA (m_axi_HP1_RDATA),
    .TRAN_HP1_RLAST (m_axi_HP1_RLAST),
    .TRAN_HP1_RID (m_axi_HP1_RID),
    .TRAN_HP1_RUSER (m_axi_HP1_RUSER),
    .TRAN_HP1_RRESP (m_axi_HP1_RRESP),
    .TRAN_HP1_BVALID (m_axi_HP1_BVALID),
    .TRAN_HP1_BREADY (m_axi_HP1_BREADY),
    .TRAN_HP1_BRESP (m_axi_HP1_BRESP),
    .TRAN_HP1_BID (m_axi_HP1_BID),
    .TRAN_HP1_BUSER (m_axi_HP1_BUSER),
    .TRAN_HP1_W0 (W0),
    .ready (AESL_axi_master_HP1_ready),
    .done  (AESL_axi_master_HP1_done)
);
assign	AESL_axi_master_HP1_ready	=   ready;
assign	AESL_axi_master_HP1_done	=   AESL_done_delay;
wire	AESL_axi_master_HP2_ready;
wire	AESL_axi_master_HP2_done;
wire [32 - 1 : 0] W1;
AESL_axi_master_HP2 AESL_AXI_MASTER_HP2(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_HP2_AWVALID (m_axi_HP2_AWVALID),
    .TRAN_HP2_AWREADY (m_axi_HP2_AWREADY),
    .TRAN_HP2_AWADDR (m_axi_HP2_AWADDR),
    .TRAN_HP2_AWID (m_axi_HP2_AWID),
    .TRAN_HP2_AWLEN (m_axi_HP2_AWLEN),
    .TRAN_HP2_AWSIZE (m_axi_HP2_AWSIZE),
    .TRAN_HP2_AWBURST (m_axi_HP2_AWBURST),
    .TRAN_HP2_AWLOCK (m_axi_HP2_AWLOCK),
    .TRAN_HP2_AWCACHE (m_axi_HP2_AWCACHE),
    .TRAN_HP2_AWPROT (m_axi_HP2_AWPROT),
    .TRAN_HP2_AWQOS (m_axi_HP2_AWQOS),
    .TRAN_HP2_AWREGION (m_axi_HP2_AWREGION),
    .TRAN_HP2_AWUSER (m_axi_HP2_AWUSER),
    .TRAN_HP2_WVALID (m_axi_HP2_WVALID),
    .TRAN_HP2_WREADY (m_axi_HP2_WREADY),
    .TRAN_HP2_WDATA (m_axi_HP2_WDATA),
    .TRAN_HP2_WSTRB (m_axi_HP2_WSTRB),
    .TRAN_HP2_WLAST (m_axi_HP2_WLAST),
    .TRAN_HP2_WID (m_axi_HP2_WID),
    .TRAN_HP2_WUSER (m_axi_HP2_WUSER),
    .TRAN_HP2_ARVALID (m_axi_HP2_ARVALID),
    .TRAN_HP2_ARREADY (m_axi_HP2_ARREADY),
    .TRAN_HP2_ARADDR (m_axi_HP2_ARADDR),
    .TRAN_HP2_ARID (m_axi_HP2_ARID),
    .TRAN_HP2_ARLEN (m_axi_HP2_ARLEN),
    .TRAN_HP2_ARSIZE (m_axi_HP2_ARSIZE),
    .TRAN_HP2_ARBURST (m_axi_HP2_ARBURST),
    .TRAN_HP2_ARLOCK (m_axi_HP2_ARLOCK),
    .TRAN_HP2_ARCACHE (m_axi_HP2_ARCACHE),
    .TRAN_HP2_ARPROT (m_axi_HP2_ARPROT),
    .TRAN_HP2_ARQOS (m_axi_HP2_ARQOS),
    .TRAN_HP2_ARREGION (m_axi_HP2_ARREGION),
    .TRAN_HP2_ARUSER (m_axi_HP2_ARUSER),
    .TRAN_HP2_RVALID (m_axi_HP2_RVALID),
    .TRAN_HP2_RREADY (m_axi_HP2_RREADY),
    .TRAN_HP2_RDATA (m_axi_HP2_RDATA),
    .TRAN_HP2_RLAST (m_axi_HP2_RLAST),
    .TRAN_HP2_RID (m_axi_HP2_RID),
    .TRAN_HP2_RUSER (m_axi_HP2_RUSER),
    .TRAN_HP2_RRESP (m_axi_HP2_RRESP),
    .TRAN_HP2_BVALID (m_axi_HP2_BVALID),
    .TRAN_HP2_BREADY (m_axi_HP2_BREADY),
    .TRAN_HP2_BRESP (m_axi_HP2_BRESP),
    .TRAN_HP2_BID (m_axi_HP2_BID),
    .TRAN_HP2_BUSER (m_axi_HP2_BUSER),
    .TRAN_HP2_W1 (W1),
    .ready (AESL_axi_master_HP2_ready),
    .done  (AESL_axi_master_HP2_done)
);
assign	AESL_axi_master_HP2_ready	=   ready;
assign	AESL_axi_master_HP2_done	=   AESL_done_delay;
wire	AESL_axi_master_HP3_ready;
wire	AESL_axi_master_HP3_done;
wire [32 - 1 : 0] res;
AESL_axi_master_HP3 AESL_AXI_MASTER_HP3(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_HP3_AWVALID (m_axi_HP3_AWVALID),
    .TRAN_HP3_AWREADY (m_axi_HP3_AWREADY),
    .TRAN_HP3_AWADDR (m_axi_HP3_AWADDR),
    .TRAN_HP3_AWID (m_axi_HP3_AWID),
    .TRAN_HP3_AWLEN (m_axi_HP3_AWLEN),
    .TRAN_HP3_AWSIZE (m_axi_HP3_AWSIZE),
    .TRAN_HP3_AWBURST (m_axi_HP3_AWBURST),
    .TRAN_HP3_AWLOCK (m_axi_HP3_AWLOCK),
    .TRAN_HP3_AWCACHE (m_axi_HP3_AWCACHE),
    .TRAN_HP3_AWPROT (m_axi_HP3_AWPROT),
    .TRAN_HP3_AWQOS (m_axi_HP3_AWQOS),
    .TRAN_HP3_AWREGION (m_axi_HP3_AWREGION),
    .TRAN_HP3_AWUSER (m_axi_HP3_AWUSER),
    .TRAN_HP3_WVALID (m_axi_HP3_WVALID),
    .TRAN_HP3_WREADY (m_axi_HP3_WREADY),
    .TRAN_HP3_WDATA (m_axi_HP3_WDATA),
    .TRAN_HP3_WSTRB (m_axi_HP3_WSTRB),
    .TRAN_HP3_WLAST (m_axi_HP3_WLAST),
    .TRAN_HP3_WID (m_axi_HP3_WID),
    .TRAN_HP3_WUSER (m_axi_HP3_WUSER),
    .TRAN_HP3_ARVALID (m_axi_HP3_ARVALID),
    .TRAN_HP3_ARREADY (m_axi_HP3_ARREADY),
    .TRAN_HP3_ARADDR (m_axi_HP3_ARADDR),
    .TRAN_HP3_ARID (m_axi_HP3_ARID),
    .TRAN_HP3_ARLEN (m_axi_HP3_ARLEN),
    .TRAN_HP3_ARSIZE (m_axi_HP3_ARSIZE),
    .TRAN_HP3_ARBURST (m_axi_HP3_ARBURST),
    .TRAN_HP3_ARLOCK (m_axi_HP3_ARLOCK),
    .TRAN_HP3_ARCACHE (m_axi_HP3_ARCACHE),
    .TRAN_HP3_ARPROT (m_axi_HP3_ARPROT),
    .TRAN_HP3_ARQOS (m_axi_HP3_ARQOS),
    .TRAN_HP3_ARREGION (m_axi_HP3_ARREGION),
    .TRAN_HP3_ARUSER (m_axi_HP3_ARUSER),
    .TRAN_HP3_RVALID (m_axi_HP3_RVALID),
    .TRAN_HP3_RREADY (m_axi_HP3_RREADY),
    .TRAN_HP3_RDATA (m_axi_HP3_RDATA),
    .TRAN_HP3_RLAST (m_axi_HP3_RLAST),
    .TRAN_HP3_RID (m_axi_HP3_RID),
    .TRAN_HP3_RUSER (m_axi_HP3_RUSER),
    .TRAN_HP3_RRESP (m_axi_HP3_RRESP),
    .TRAN_HP3_BVALID (m_axi_HP3_BVALID),
    .TRAN_HP3_BREADY (m_axi_HP3_BREADY),
    .TRAN_HP3_BRESP (m_axi_HP3_BRESP),
    .TRAN_HP3_BID (m_axi_HP3_BID),
    .TRAN_HP3_BUSER (m_axi_HP3_BUSER),
    .TRAN_HP3_res (res),
    .ready (AESL_axi_master_HP3_ready),
    .done  (AESL_axi_master_HP3_done)
);
assign	AESL_axi_master_HP3_ready	=   ready;
assign	AESL_axi_master_HP3_done	=   AESL_done_delay;

AESL_axi_slave_AXILiteS AESL_AXI_SLAVE_AXILiteS(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_s_axi_AXILiteS_AWADDR (s_axi_AXILiteS_AWADDR),
    .TRAN_s_axi_AXILiteS_AWVALID (s_axi_AXILiteS_AWVALID),
    .TRAN_s_axi_AXILiteS_AWREADY (s_axi_AXILiteS_AWREADY),
    .TRAN_s_axi_AXILiteS_WVALID (s_axi_AXILiteS_WVALID),
    .TRAN_s_axi_AXILiteS_WREADY (s_axi_AXILiteS_WREADY),
    .TRAN_s_axi_AXILiteS_WDATA (s_axi_AXILiteS_WDATA),
    .TRAN_s_axi_AXILiteS_WSTRB (s_axi_AXILiteS_WSTRB),
    .TRAN_s_axi_AXILiteS_ARADDR (s_axi_AXILiteS_ARADDR),
    .TRAN_s_axi_AXILiteS_ARVALID (s_axi_AXILiteS_ARVALID),
    .TRAN_s_axi_AXILiteS_ARREADY (s_axi_AXILiteS_ARREADY),
    .TRAN_s_axi_AXILiteS_RVALID (s_axi_AXILiteS_RVALID),
    .TRAN_s_axi_AXILiteS_RREADY (s_axi_AXILiteS_RREADY),
    .TRAN_s_axi_AXILiteS_RDATA (s_axi_AXILiteS_RDATA),
    .TRAN_s_axi_AXILiteS_RRESP (s_axi_AXILiteS_RRESP),
    .TRAN_s_axi_AXILiteS_BVALID (s_axi_AXILiteS_BVALID),
    .TRAN_s_axi_AXILiteS_BREADY (s_axi_AXILiteS_BREADY),
    .TRAN_s_axi_AXILiteS_BRESP (s_axi_AXILiteS_BRESP),
    .TRAN_A (A),
    .TRAN_W0 (W0),
    .TRAN_W1 (W1),
    .TRAN_res (res),
    .TRAN_AXILiteS_write_data_finish(AXILiteS_write_data_finish),
    .TRAN_AXILiteS_ready_in (AESL_slave_ready),
    .TRAN_AXILiteS_done_in (AESL_slave_output_done),
    .TRAN_AXILiteS_idle_in (AESL_idle),
    .TRAN_AXILiteS_transaction_done_in (AESL_done_delay),
    .TRAN_AXILiteS_interrupt  (interrupt),
    .TRAN_AXILiteS_start_in  (AESL_slave_start)
);
AESL_axi_slave_control AESL_AXI_SLAVE_control(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_s_axi_control_AWADDR (s_axi_control_AWADDR),
    .TRAN_s_axi_control_AWVALID (s_axi_control_AWVALID),
    .TRAN_s_axi_control_AWREADY (s_axi_control_AWREADY),
    .TRAN_s_axi_control_WVALID (s_axi_control_WVALID),
    .TRAN_s_axi_control_WREADY (s_axi_control_WREADY),
    .TRAN_s_axi_control_WDATA (s_axi_control_WDATA),
    .TRAN_s_axi_control_WSTRB (s_axi_control_WSTRB),
    .TRAN_s_axi_control_ARADDR (s_axi_control_ARADDR),
    .TRAN_s_axi_control_ARVALID (s_axi_control_ARVALID),
    .TRAN_s_axi_control_ARREADY (s_axi_control_ARREADY),
    .TRAN_s_axi_control_RVALID (s_axi_control_RVALID),
    .TRAN_s_axi_control_RREADY (s_axi_control_RREADY),
    .TRAN_s_axi_control_RDATA (s_axi_control_RDATA),
    .TRAN_s_axi_control_RRESP (s_axi_control_RRESP),
    .TRAN_s_axi_control_BVALID (s_axi_control_BVALID),
    .TRAN_s_axi_control_BREADY (s_axi_control_BREADY),
    .TRAN_s_axi_control_BRESP (s_axi_control_BRESP),
    .TRAN_control_ready_out (AESL_ready),
    .TRAN_control_ready_in (AESL_slave_ready),
    .TRAN_control_done_out (AESL_slave_output_done),
    .TRAN_control_idle_out (AESL_idle),
    .TRAN_control_write_start_in     (AESL_slave_write_start_in),
    .TRAN_control_write_start_finish (AESL_slave_write_start_finish),
    .TRAN_control_transaction_done_in (AESL_done_delay),
    .TRAN_control_interrupt  (interrupt),
    .TRAN_control_start_in  (AESL_slave_start)
);

initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 1);
    while(AESL_ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_ready_cnt_proc
    ready_cnt = 0;
    wait(AESL_reset === 1);
    while(ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        ready_cnt = ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_done_cnt_proc
    done_cnt = 0;
    wait(AESL_reset === 1);
    while(done_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_done !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        done_cnt = done_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
    @(posedge AESL_clock);
    # 0.4;
    $finish;
end

initial fork
    AESL_clock = 0;
    forever #(`AUTOTB_CLOCK_PERIOD/2) AESL_clock = ~AESL_clock;
join

initial begin : initial_process
    integer rand;
    rst = 0;
    # 100;
	  repeat(3) @(posedge AESL_clock);
    rst = 1;
end

initial begin : start_process
  integer rand;
  start = 0;
  ce = 1;
    wait(AESL_reset === 1);
  @(posedge AESL_clock);
  start <= 1;
  while(ready_cnt != `AUTOTB_TRANSACTION_NUM + 1) begin
      @(posedge AESL_clock);
      if(AESL_ready == 1) begin
          start <= 0;
          start <= 1;
      end
  end
  start <= 0;
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == `AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt != `AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end
// Write "[[[runtime]]]" and "[[[/runtime]]]" for output-only transactor 
initial begin : write_output_transactor_HP3_runtime_process
    integer fp;
    fp = $fopen(`AUTOTB_TVOUT_HP3_out_wrapc, "w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_HP3_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait(done_cnt == `AUTOTB_TRANSACTION_NUM)
	  repeat(2) @(posedge AESL_clock);
    # 0.2;
    fp = $fopen(`AUTOTB_TVOUT_HP3_out_wrapc, "a");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_HP3_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end

always @ (negedge AESL_clock) begin
    if(AESL_reset === 0)
    begin
        AESL_clk_counter <= 0;
    end 
    else begin
        AESL_clk_counter = AESL_clk_counter + 1;
    end    
end

always @ (posedge AESL_clock or negedge AESL_reset) begin
    if(AESL_reset === 0)
    begin
        AESL_mLatCnterOut_addr = 0;
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter + 1;
        reported_stuck_cnt <= 0;
    end
    else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter;
        AESL_mLatCnterOut_addr = AESL_mLatCnterOut_addr + 1;
        reported_stuck <= 0;
    end
end

always @ (posedge AESL_clock or negedge AESL_reset) begin
    if(AESL_reset === 0)
    begin
        AESL_mLatCnterIn_addr = 0;
    end
    else if (AESL_slave_write_start_finish && AESL_mLatCnterIn_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
        AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
        AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
    end
end

initial begin : performance_check
	integer transaction_counter;
	integer i;
	integer fp;

	integer latthistime;
	integer lattotal;
	integer latmax;
	integer latmin;


	integer thrthistime;
	integer thrtotal;
	integer thrmax;
	integer thrmin;

	integer lataver;
	integer thraver;
	reg [31 : 0] lat_array [0 : `AUTOTB_TRANSACTION_NUM];
	reg [31 : 0] thr_array [0 : `AUTOTB_TRANSACTION_NUM];


	i = 0;
	lattotal = 0;
	latmax = 0;
	latmin = 32'h 7fffffff;
	lataver = 0;

	thrtotal = 0;
	thrmax = 0;
	thrmin = 32'h 7fffffff;
	thraver = 0;

	@(negedge AESL_clock);
	@(posedge AESL_reset);
	while (done_cnt != `AUTOTB_TRANSACTION_NUM) begin
		@(posedge AESL_clock);
	end

	#0.001

	if (AESL_mLatCnterIn_addr == 0) begin
		latmax  = 0;
		latmin  = 0;
		lataver = 0;
		thrmax  = 0;
		thrmin  = 0;
		thraver = 0;
		lat_array[0] = 0;
		thr_array[0] = 0;
	end else if (AESL_mLatCnterOut_addr == 1 || AESL_mLatCnterOut_addr == 0 ) begin
		latmax  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		latmin  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		lataver = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		thrmax  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		thrmin  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		thraver = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		lat_array[0] = lataver;
		thr_array[0] = thraver;
	end else begin
		// LATENCY
		for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
			latthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i];
			lattotal = lattotal + latthistime;
			lat_array[i] = latthistime;
			if (latthistime > latmax) latmax = latthistime;
			if (latthistime < latmin) latmin = latthistime;
		end
		// II
		for (i = 0; i < AESL_mLatCnterIn_addr - 1; i = i + 1) begin
			thrthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i] ;
			thrtotal = thrtotal + thrthistime;
			thr_array[i] = thrthistime;
			if (thrthistime > thrmax) thrmax = thrthistime;
			if (thrthistime < thrmin) thrmin = thrthistime;
		end

		thr_array[AESL_mLatCnterIn_addr - 1] = 0;
		lataver = lattotal / (AESL_mLatCnterOut_addr);
		thraver = thrtotal / (AESL_mLatCnterIn_addr - 1);
	end

	fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

	$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax);
	$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin);
	$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver);
	$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", latmax);
	$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", latmin);
	$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", lataver);
	$fclose(fp);
	fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");
	$fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
	for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
		$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
	end

	$fclose(fp);
end
endmodule
