// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module AESL_axi_slave_AXILiteS (
    clk,
    reset,
    TRAN_s_axi_AXILiteS_AWADDR,
    TRAN_s_axi_AXILiteS_AWVALID,
    TRAN_s_axi_AXILiteS_AWREADY,
    TRAN_s_axi_AXILiteS_WVALID,
    TRAN_s_axi_AXILiteS_WREADY,
    TRAN_s_axi_AXILiteS_WDATA,
    TRAN_s_axi_AXILiteS_WSTRB,
    TRAN_s_axi_AXILiteS_ARADDR,
    TRAN_s_axi_AXILiteS_ARVALID,
    TRAN_s_axi_AXILiteS_ARREADY,
    TRAN_s_axi_AXILiteS_RVALID,
    TRAN_s_axi_AXILiteS_RREADY,
    TRAN_s_axi_AXILiteS_RDATA,
    TRAN_s_axi_AXILiteS_RRESP,
    TRAN_s_axi_AXILiteS_BVALID,
    TRAN_s_axi_AXILiteS_BREADY,
    TRAN_s_axi_AXILiteS_BRESP,
    TRAN_A,
    TRAN_W0,
    TRAN_W1,
    TRAN_res,
    TRAN_AXILiteS_write_data_finish,
    TRAN_AXILiteS_start_in,
    TRAN_AXILiteS_idle_in,
    TRAN_AXILiteS_ready_in,
    TRAN_AXILiteS_done_in,
    TRAN_AXILiteS_transaction_done_in,
    TRAN_AXILiteS_interrupt
    );

//------------------------Parameter----------------------
`define TV_IN_A "../tv/cdatafile/c.obj_detector.autotvin_A.dat"
`define TV_IN_W0 "../tv/cdatafile/c.obj_detector.autotvin_W0.dat"
`define TV_IN_W1 "../tv/cdatafile/c.obj_detector.autotvin_W1.dat"
`define TV_IN_res "../tv/cdatafile/c.obj_detector.autotvin_res.dat"
parameter ADDR_WIDTH = 6;
parameter DATA_WIDTH = 32;
parameter A_DEPTH = 1;
reg [31 : 0] A_OPERATE_DEPTH = 1;
parameter A_c_bitwidth = 32;
parameter W0_DEPTH = 1;
reg [31 : 0] W0_OPERATE_DEPTH = 1;
parameter W0_c_bitwidth = 32;
parameter W1_DEPTH = 1;
reg [31 : 0] W1_OPERATE_DEPTH = 1;
parameter W1_c_bitwidth = 32;
parameter res_DEPTH = 1;
reg [31 : 0] res_OPERATE_DEPTH = 1;
parameter res_c_bitwidth = 32;
parameter A_data_in_addr = 16;
parameter W0_data_in_addr = 24;
parameter W1_data_in_addr = 32;
parameter res_data_in_addr = 40;

output [ADDR_WIDTH - 1 : 0] TRAN_s_axi_AXILiteS_AWADDR;
output  TRAN_s_axi_AXILiteS_AWVALID;
input  TRAN_s_axi_AXILiteS_AWREADY;
output  TRAN_s_axi_AXILiteS_WVALID;
input  TRAN_s_axi_AXILiteS_WREADY;
output [DATA_WIDTH - 1 : 0] TRAN_s_axi_AXILiteS_WDATA;
output [DATA_WIDTH/8 - 1 : 0] TRAN_s_axi_AXILiteS_WSTRB;
output [ADDR_WIDTH - 1 : 0] TRAN_s_axi_AXILiteS_ARADDR;
output  TRAN_s_axi_AXILiteS_ARVALID;
input  TRAN_s_axi_AXILiteS_ARREADY;
input  TRAN_s_axi_AXILiteS_RVALID;
output  TRAN_s_axi_AXILiteS_RREADY;
input [DATA_WIDTH - 1 : 0] TRAN_s_axi_AXILiteS_RDATA;
input [2 - 1 : 0] TRAN_s_axi_AXILiteS_RRESP;
input  TRAN_s_axi_AXILiteS_BVALID;
output  TRAN_s_axi_AXILiteS_BREADY;
input [2 - 1 : 0] TRAN_s_axi_AXILiteS_BRESP;
input    [32 - 1 : 0] TRAN_A;
input    [32 - 1 : 0] TRAN_W0;
input    [32 - 1 : 0] TRAN_W1;
input    [32 - 1 : 0] TRAN_res;
output TRAN_AXILiteS_write_data_finish;
input     clk;
input     reset;
input     TRAN_AXILiteS_start_in;
input     TRAN_AXILiteS_done_in;
input     TRAN_AXILiteS_ready_in;
input     TRAN_AXILiteS_idle_in;
input     TRAN_AXILiteS_interrupt;
input     TRAN_AXILiteS_transaction_done_in;

reg [ADDR_WIDTH - 1 : 0] AWADDR_reg = 0;
reg  AWVALID_reg = 0;
reg  WVALID_reg = 0;
reg [DATA_WIDTH - 1 : 0] WDATA_reg = 0;
reg [DATA_WIDTH/8 - 1 : 0] WSTRB_reg = 0;
reg [ADDR_WIDTH - 1 : 0] ARADDR_reg = 0;
reg  ARVALID_reg = 0;
reg  RREADY_reg = 0;
reg [DATA_WIDTH - 1 : 0] RDATA_reg = 0;
reg  BREADY_reg = 0;
reg [A_c_bitwidth - 1 : 0] reg_A;
reg A_write_data_finish;
reg [W0_c_bitwidth - 1 : 0] reg_W0;
reg W0_write_data_finish;
reg [W1_c_bitwidth - 1 : 0] reg_W1;
reg W1_write_data_finish;
reg [res_c_bitwidth - 1 : 0] reg_res;
reg res_write_data_finish;
reg AESL_ready_out_index_reg;
reg AESL_write_start_finish;
reg AESL_ready_reg;
reg ready_initial;
reg AESL_done_index_reg = 0;
reg AESL_idle_index_reg = 0;
reg AESL_auto_restart_index_reg;
reg process_0_finish = 0;
reg process_1_finish = 0;
reg process_2_finish = 0;
reg process_3_finish = 0;
//write A reg
reg [31 : 0] write_A_count = 0;
reg write_A_run_flag = 0;
reg write_one_A_data_done = 0;
//write W0 reg
reg [31 : 0] write_W0_count = 0;
reg write_W0_run_flag = 0;
reg write_one_W0_data_done = 0;
//write W1 reg
reg [31 : 0] write_W1_count = 0;
reg write_W1_run_flag = 0;
reg write_one_W1_data_done = 0;
//write res reg
reg [31 : 0] write_res_count = 0;
reg write_res_run_flag = 0;
reg write_one_res_data_done = 0;

//===================process control=================
reg [31 : 0] ongoing_process_number = 0;
//process number depends on how much processes needed.
reg process_busy = 0;

//=================== signal connection ==============
assign TRAN_s_axi_AXILiteS_AWADDR = AWADDR_reg;
assign TRAN_s_axi_AXILiteS_AWVALID = AWVALID_reg;
assign TRAN_s_axi_AXILiteS_WVALID = WVALID_reg;
assign TRAN_s_axi_AXILiteS_WDATA = WDATA_reg;
assign TRAN_s_axi_AXILiteS_WSTRB = WSTRB_reg;
assign TRAN_s_axi_AXILiteS_ARADDR = ARADDR_reg;
assign TRAN_s_axi_AXILiteS_ARVALID = ARVALID_reg;
assign TRAN_s_axi_AXILiteS_RREADY = RREADY_reg;
assign TRAN_s_axi_AXILiteS_BREADY = BREADY_reg;
assign TRAN_AXILiteS_write_data_finish = 1 & A_write_data_finish & W0_write_data_finish & W1_write_data_finish & res_write_data_finish;
always @(TRAN_AXILiteS_done_in) 
begin
    AESL_done_index_reg <= TRAN_AXILiteS_done_in;
end
always @(TRAN_AXILiteS_ready_in or ready_initial) 
begin
    AESL_ready_reg <= TRAN_AXILiteS_ready_in | ready_initial;
end

always @(reset or process_0_finish or process_1_finish or process_2_finish or process_3_finish ) begin
    if (reset == 0) begin
        ongoing_process_number <= 0;
    end
    else if (ongoing_process_number == 0 && process_0_finish == 1) begin
            ongoing_process_number <= ongoing_process_number + 1;
    end
    else if (ongoing_process_number == 1 && process_1_finish == 1) begin
            ongoing_process_number <= ongoing_process_number + 1;
    end
    else if (ongoing_process_number == 2 && process_2_finish == 1) begin
            ongoing_process_number <= ongoing_process_number + 1;
    end
    else if (ongoing_process_number == 3 && process_3_finish == 1) begin
            ongoing_process_number <= 0;
    end
end

always @(TRAN_A) 
begin
    reg_A = TRAN_A;
end
always @(TRAN_W0) 
begin
    reg_W0 = TRAN_W0;
end
always @(TRAN_W1) 
begin
    reg_W1 = TRAN_W1;
end
always @(TRAN_res) 
begin
    reg_res = TRAN_res;
end
task count_c_data_four_byte_num_by_bitwidth;
input  integer bitwidth;
output integer num;
integer factor;
integer i;
begin
    factor = 32;
    for (i = 1; i <= 32; i = i + 1) begin
        if (bitwidth <= factor && bitwidth > factor - 32) begin
            num = i;
        end
        factor = factor + 32;
    end
end    
endtask

task count_seperate_factor_by_bitwidth;
input  integer bitwidth;
output integer factor;
begin
    if (bitwidth <= 8 ) begin
        factor=4;
    end
    if (bitwidth <= 16 & bitwidth > 8 ) begin
        factor=2;
    end
    if (bitwidth <= 32 & bitwidth > 16 ) begin
        factor=1;
    end
    if (bitwidth <= 1024 & bitwidth > 32 ) begin
        factor=1;
    end
end    
endtask

task count_operate_depth_by_bitwidth_and_depth;
input  integer bitwidth;
input  integer depth;
output integer operate_depth;
integer factor;
integer remain;
begin
    count_seperate_factor_by_bitwidth (bitwidth , factor);
    operate_depth = depth / factor;
    remain = depth % factor;
    if (remain > 0) begin
        operate_depth = operate_depth + 1;
    end
end    
endtask

task write; /*{{{*/
    input  reg [ADDR_WIDTH - 1:0] waddr;   // write address
    input  reg [DATA_WIDTH - 1:0] wdata;   // write data
    output reg wresp;
    reg aw_flag;
    reg w_flag;
    reg [DATA_WIDTH/8 - 1:0] wstrb_reg;
    integer i;
begin 
    wresp = 0;
    aw_flag = 0;
    w_flag = 0;
//=======================one single write operate======================
    AWADDR_reg <= waddr;
    AWVALID_reg <= 1;
    WDATA_reg <= wdata;
    WVALID_reg <= 1;
    for (i = 0; i < DATA_WIDTH/8; i = i + 1) begin
        wstrb_reg [i] = 1;
    end    
    WSTRB_reg <= wstrb_reg;
    while (!(aw_flag && w_flag)) begin
        @(posedge clk);
        if (aw_flag != 1)
            aw_flag = TRAN_s_axi_AXILiteS_AWREADY & AWVALID_reg;
        if (w_flag != 1)
            w_flag = TRAN_s_axi_AXILiteS_WREADY & WVALID_reg;
        AWVALID_reg <= !aw_flag;
        WVALID_reg <= !w_flag;
    end

    BREADY_reg <= 1;
    while (TRAN_s_axi_AXILiteS_BVALID != 1) begin
        //wait for response 
        @(posedge clk);
    end
    @(posedge clk);
    BREADY_reg <= 0;
    if (TRAN_s_axi_AXILiteS_BRESP === 2'b00) begin
        wresp = 1;
        //input success. in fact BRESP is always 2'b00
    end   
//=======================one single write operate======================

end
endtask/*}}}*/

task read (/*{{{*/
    input  [ADDR_WIDTH - 1:0] raddr ,   // write address
    output [DATA_WIDTH - 1:0] RDATA_result ,
    output rresp
);
begin 
    rresp = 0;
//=======================one single read operate======================
    ARADDR_reg <= raddr;
    ARVALID_reg <= 1;
    while (TRAN_s_axi_AXILiteS_ARREADY !== 1) begin
        @(posedge clk);
    end
    @(posedge clk);
    ARVALID_reg <= 0;
    RREADY_reg <= 1;
    while (TRAN_s_axi_AXILiteS_RVALID !== 1) begin
        //wait for response 
        @(posedge clk);
    end
    @(posedge clk);
    RDATA_result  <= TRAN_s_axi_AXILiteS_RDATA;
    RREADY_reg <= 0;
    if (TRAN_s_axi_AXILiteS_RRESP === 2'b00 ) begin
        rresp <= 1;
        //output success. in fact RRESP is always 2'b00
    end  
    @(posedge clk);

//=======================one single read operate end======================

end
endtask/*}}}*/

initial begin : ready_initial_process
    ready_initial = 0;
    wait(reset === 1);
    @(posedge clk);
    ready_initial = 1;
    @(posedge clk);
    ready_initial = 0;
end

always @(reset or posedge clk) begin
    if (reset == 0) begin
        write_A_run_flag <= 0; 
        write_A_count = 0;
        count_operate_depth_by_bitwidth_and_depth (A_c_bitwidth, A_DEPTH, A_OPERATE_DEPTH);
    end
    else begin
        if (TRAN_AXILiteS_start_in === 1) begin
            A_write_data_finish <= 0;
        end
        if (AESL_ready_reg === 1) begin
            write_A_run_flag <= 1; 
            write_A_count = 0;
        end
        if (write_one_A_data_done === 1) begin
            write_A_count = write_A_count + 1;
            if (write_A_count == A_OPERATE_DEPTH) begin
                write_A_run_flag <= 0; 
                A_write_data_finish <= 1;
            end
        end
    end
end

initial begin : write_A
    integer write_A_resp;
    integer process_num ;
    integer get_ack;
    integer four_byte_num;
    integer c_bitwidth;
    integer i;
    integer j;
    reg [31 : 0] A_data_tmp_reg;
    wait(reset === 1);
    @(posedge clk);
    c_bitwidth = A_c_bitwidth;
    process_num = 0;
    count_c_data_four_byte_num_by_bitwidth (c_bitwidth , four_byte_num) ;
    while (1) begin
        process_0_finish <= 0;

        if (ongoing_process_number === process_num && process_busy === 0 ) begin
            get_ack = 1;
            if (write_A_run_flag === 1 && get_ack === 1) begin
                process_busy = 1;
                //write A data 
                for (i = 0 ; i < four_byte_num ; i = i+1) begin
                    if (A_c_bitwidth < 32) begin
                        A_data_tmp_reg = reg_A;
                    end
                    else begin
                        for (j=0 ; j<32 ; j = j + 1) begin
                            if (i*32 + j < A_c_bitwidth) begin
                                A_data_tmp_reg[j] = reg_A[i*32 + j];
                            end
                            else begin
                                A_data_tmp_reg[j] = 0;
                            end
                        end
                    end
                    write (A_data_in_addr + write_A_count * four_byte_num * 4 + i * 4, A_data_tmp_reg, write_A_resp);
                end
                process_busy = 0;
                write_one_A_data_done <= 1;
                @(posedge clk);
                write_one_A_data_done <= 0;
            end   
            process_0_finish <= 1;
        end
        @(posedge clk);
    end    
end
always @(reset or posedge clk) begin
    if (reset == 0) begin
        write_W0_run_flag <= 0; 
        write_W0_count = 0;
        count_operate_depth_by_bitwidth_and_depth (W0_c_bitwidth, W0_DEPTH, W0_OPERATE_DEPTH);
    end
    else begin
        if (TRAN_AXILiteS_start_in === 1) begin
            W0_write_data_finish <= 0;
        end
        if (AESL_ready_reg === 1) begin
            write_W0_run_flag <= 1; 
            write_W0_count = 0;
        end
        if (write_one_W0_data_done === 1) begin
            write_W0_count = write_W0_count + 1;
            if (write_W0_count == W0_OPERATE_DEPTH) begin
                write_W0_run_flag <= 0; 
                W0_write_data_finish <= 1;
            end
        end
    end
end

initial begin : write_W0
    integer write_W0_resp;
    integer process_num ;
    integer get_ack;
    integer four_byte_num;
    integer c_bitwidth;
    integer i;
    integer j;
    reg [31 : 0] W0_data_tmp_reg;
    wait(reset === 1);
    @(posedge clk);
    c_bitwidth = W0_c_bitwidth;
    process_num = 1;
    count_c_data_four_byte_num_by_bitwidth (c_bitwidth , four_byte_num) ;
    while (1) begin
        process_1_finish <= 0;

        if (ongoing_process_number === process_num && process_busy === 0 ) begin
            get_ack = 1;
            if (write_W0_run_flag === 1 && get_ack === 1) begin
                process_busy = 1;
                //write W0 data 
                for (i = 0 ; i < four_byte_num ; i = i+1) begin
                    if (W0_c_bitwidth < 32) begin
                        W0_data_tmp_reg = reg_W0;
                    end
                    else begin
                        for (j=0 ; j<32 ; j = j + 1) begin
                            if (i*32 + j < W0_c_bitwidth) begin
                                W0_data_tmp_reg[j] = reg_W0[i*32 + j];
                            end
                            else begin
                                W0_data_tmp_reg[j] = 0;
                            end
                        end
                    end
                    write (W0_data_in_addr + write_W0_count * four_byte_num * 4 + i * 4, W0_data_tmp_reg, write_W0_resp);
                end
                process_busy = 0;
                write_one_W0_data_done <= 1;
                @(posedge clk);
                write_one_W0_data_done <= 0;
            end   
            process_1_finish <= 1;
        end
        @(posedge clk);
    end    
end
always @(reset or posedge clk) begin
    if (reset == 0) begin
        write_W1_run_flag <= 0; 
        write_W1_count = 0;
        count_operate_depth_by_bitwidth_and_depth (W1_c_bitwidth, W1_DEPTH, W1_OPERATE_DEPTH);
    end
    else begin
        if (TRAN_AXILiteS_start_in === 1) begin
            W1_write_data_finish <= 0;
        end
        if (AESL_ready_reg === 1) begin
            write_W1_run_flag <= 1; 
            write_W1_count = 0;
        end
        if (write_one_W1_data_done === 1) begin
            write_W1_count = write_W1_count + 1;
            if (write_W1_count == W1_OPERATE_DEPTH) begin
                write_W1_run_flag <= 0; 
                W1_write_data_finish <= 1;
            end
        end
    end
end

initial begin : write_W1
    integer write_W1_resp;
    integer process_num ;
    integer get_ack;
    integer four_byte_num;
    integer c_bitwidth;
    integer i;
    integer j;
    reg [31 : 0] W1_data_tmp_reg;
    wait(reset === 1);
    @(posedge clk);
    c_bitwidth = W1_c_bitwidth;
    process_num = 2;
    count_c_data_four_byte_num_by_bitwidth (c_bitwidth , four_byte_num) ;
    while (1) begin
        process_2_finish <= 0;

        if (ongoing_process_number === process_num && process_busy === 0 ) begin
            get_ack = 1;
            if (write_W1_run_flag === 1 && get_ack === 1) begin
                process_busy = 1;
                //write W1 data 
                for (i = 0 ; i < four_byte_num ; i = i+1) begin
                    if (W1_c_bitwidth < 32) begin
                        W1_data_tmp_reg = reg_W1;
                    end
                    else begin
                        for (j=0 ; j<32 ; j = j + 1) begin
                            if (i*32 + j < W1_c_bitwidth) begin
                                W1_data_tmp_reg[j] = reg_W1[i*32 + j];
                            end
                            else begin
                                W1_data_tmp_reg[j] = 0;
                            end
                        end
                    end
                    write (W1_data_in_addr + write_W1_count * four_byte_num * 4 + i * 4, W1_data_tmp_reg, write_W1_resp);
                end
                process_busy = 0;
                write_one_W1_data_done <= 1;
                @(posedge clk);
                write_one_W1_data_done <= 0;
            end   
            process_2_finish <= 1;
        end
        @(posedge clk);
    end    
end
always @(reset or posedge clk) begin
    if (reset == 0) begin
        write_res_run_flag <= 0; 
        write_res_count = 0;
        count_operate_depth_by_bitwidth_and_depth (res_c_bitwidth, res_DEPTH, res_OPERATE_DEPTH);
    end
    else begin
        if (TRAN_AXILiteS_start_in === 1) begin
            res_write_data_finish <= 0;
        end
        if (AESL_ready_reg === 1) begin
            write_res_run_flag <= 1; 
            write_res_count = 0;
        end
        if (write_one_res_data_done === 1) begin
            write_res_count = write_res_count + 1;
            if (write_res_count == res_OPERATE_DEPTH) begin
                write_res_run_flag <= 0; 
                res_write_data_finish <= 1;
            end
        end
    end
end

initial begin : write_res
    integer write_res_resp;
    integer process_num ;
    integer get_ack;
    integer four_byte_num;
    integer c_bitwidth;
    integer i;
    integer j;
    reg [31 : 0] res_data_tmp_reg;
    wait(reset === 1);
    @(posedge clk);
    c_bitwidth = res_c_bitwidth;
    process_num = 3;
    count_c_data_four_byte_num_by_bitwidth (c_bitwidth , four_byte_num) ;
    while (1) begin
        process_3_finish <= 0;

        if (ongoing_process_number === process_num && process_busy === 0 ) begin
            get_ack = 1;
            if (write_res_run_flag === 1 && get_ack === 1) begin
                process_busy = 1;
                //write res data 
                for (i = 0 ; i < four_byte_num ; i = i+1) begin
                    if (res_c_bitwidth < 32) begin
                        res_data_tmp_reg = reg_res;
                    end
                    else begin
                        for (j=0 ; j<32 ; j = j + 1) begin
                            if (i*32 + j < res_c_bitwidth) begin
                                res_data_tmp_reg[j] = reg_res[i*32 + j];
                            end
                            else begin
                                res_data_tmp_reg[j] = 0;
                            end
                        end
                    end
                    write (res_data_in_addr + write_res_count * four_byte_num * 4 + i * 4, res_data_tmp_reg, write_res_resp);
                end
                process_busy = 0;
                write_one_res_data_done <= 1;
                @(posedge clk);
                write_one_res_data_done <= 0;
            end   
            process_3_finish <= 1;
        end
        @(posedge clk);
    end    
end

//------------------------Task and function-------------- 
task read_token; 
    input integer fp; 
    output reg [127 : 0] token;
    reg [7:0] c; 
    reg intoken; 
    reg done; 
    begin 
        token = ""; 
        intoken = 0; 
        done = 0; 
        while (!done) begin 
            c = $fgetc(fp); 
            if (c == 8'hff) begin   // EOF 
                done = 1; 
            end 
            else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank 
                if (intoken) begin 
                    done = 1; 
                end 
            end 
            else begin              // valid character 
                intoken = 1; 
                token = (token << 8) | c; 
            end 
        end 
    end 
endtask 
 
endmodule
