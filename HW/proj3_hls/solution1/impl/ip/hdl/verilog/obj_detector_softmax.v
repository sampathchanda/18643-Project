// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module obj_detector_softmax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inp_0_read,
        inp_1_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 98'b1;
parameter    ap_ST_st2_fsm_1 = 98'b10;
parameter    ap_ST_st3_fsm_2 = 98'b100;
parameter    ap_ST_st4_fsm_3 = 98'b1000;
parameter    ap_ST_st5_fsm_4 = 98'b10000;
parameter    ap_ST_st6_fsm_5 = 98'b100000;
parameter    ap_ST_st7_fsm_6 = 98'b1000000;
parameter    ap_ST_st8_fsm_7 = 98'b10000000;
parameter    ap_ST_st9_fsm_8 = 98'b100000000;
parameter    ap_ST_st10_fsm_9 = 98'b1000000000;
parameter    ap_ST_st11_fsm_10 = 98'b10000000000;
parameter    ap_ST_st12_fsm_11 = 98'b100000000000;
parameter    ap_ST_st13_fsm_12 = 98'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 98'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 98'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 98'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 98'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 98'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 98'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 98'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 98'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 98'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 98'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 98'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 98'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 98'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 98'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 98'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 98'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 98'b100000000000000000000000000000;
parameter    ap_ST_st31_fsm_30 = 98'b1000000000000000000000000000000;
parameter    ap_ST_st32_fsm_31 = 98'b10000000000000000000000000000000;
parameter    ap_ST_st33_fsm_32 = 98'b100000000000000000000000000000000;
parameter    ap_ST_st34_fsm_33 = 98'b1000000000000000000000000000000000;
parameter    ap_ST_st35_fsm_34 = 98'b10000000000000000000000000000000000;
parameter    ap_ST_st36_fsm_35 = 98'b100000000000000000000000000000000000;
parameter    ap_ST_st37_fsm_36 = 98'b1000000000000000000000000000000000000;
parameter    ap_ST_st38_fsm_37 = 98'b10000000000000000000000000000000000000;
parameter    ap_ST_st39_fsm_38 = 98'b100000000000000000000000000000000000000;
parameter    ap_ST_st40_fsm_39 = 98'b1000000000000000000000000000000000000000;
parameter    ap_ST_st41_fsm_40 = 98'b10000000000000000000000000000000000000000;
parameter    ap_ST_st42_fsm_41 = 98'b100000000000000000000000000000000000000000;
parameter    ap_ST_st43_fsm_42 = 98'b1000000000000000000000000000000000000000000;
parameter    ap_ST_st44_fsm_43 = 98'b10000000000000000000000000000000000000000000;
parameter    ap_ST_st45_fsm_44 = 98'b100000000000000000000000000000000000000000000;
parameter    ap_ST_st46_fsm_45 = 98'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_st47_fsm_46 = 98'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_st48_fsm_47 = 98'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_st49_fsm_48 = 98'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_st50_fsm_49 = 98'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_st51_fsm_50 = 98'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_st52_fsm_51 = 98'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st53_fsm_52 = 98'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st54_fsm_53 = 98'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st55_fsm_54 = 98'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st56_fsm_55 = 98'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st57_fsm_56 = 98'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st58_fsm_57 = 98'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st59_fsm_58 = 98'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st60_fsm_59 = 98'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st61_fsm_60 = 98'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st62_fsm_61 = 98'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st63_fsm_62 = 98'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st64_fsm_63 = 98'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st65_fsm_64 = 98'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st66_fsm_65 = 98'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st67_fsm_66 = 98'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st68_fsm_67 = 98'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st69_fsm_68 = 98'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st70_fsm_69 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st71_fsm_70 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st72_fsm_71 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st73_fsm_72 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st74_fsm_73 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st75_fsm_74 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st76_fsm_75 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st77_fsm_76 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st78_fsm_77 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st79_fsm_78 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st80_fsm_79 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st81_fsm_80 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st82_fsm_81 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st83_fsm_82 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st84_fsm_83 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st85_fsm_84 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st86_fsm_85 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st87_fsm_86 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st88_fsm_87 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st89_fsm_88 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st90_fsm_89 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st91_fsm_90 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st92_fsm_91 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st93_fsm_92 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st94_fsm_93 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st95_fsm_94 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st96_fsm_95 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st97_fsm_96 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st98_fsm_97 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_41 = 32'b1000001;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_2D = 32'b101101;
parameter    ap_const_lv32_2E = 32'b101110;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_60 = 32'b1100000;
parameter    ap_const_lv32_61 = 32'b1100001;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv32_42 = 32'b1000010;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] inp_0_read;
input  [31:0] inp_1_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
(* fsm_encoding = "none" *) reg   [97:0] ap_CS_fsm = 98'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_116;
wire   [63:0] grp_fu_175_p1;
reg   [63:0] reg_193;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_bdd_133;
wire   [0:0] exitcond1_fu_266_p2;
reg    ap_sig_cseq_ST_st41_fsm_40;
reg    ap_sig_bdd_147;
wire   [63:0] grp_fu_188_p2;
reg   [63:0] reg_200;
reg    ap_sig_cseq_ST_st66_fsm_65;
reg    ap_sig_bdd_157;
wire   [1:0] i_2_fu_212_p2;
reg   [1:0] i_2_reg_357;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_174;
wire   [0:0] exitcond3_fu_206_p2;
wire   [31:0] grp_fu_162_p2;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_188;
wire   [1:0] i_3_fu_235_p2;
reg   [1:0] i_3_reg_375;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_197;
wire   [0:0] tmp_4_fu_241_p1;
reg   [0:0] tmp_4_reg_380;
wire   [0:0] exitcond2_fu_229_p2;
wire   [31:0] temp_1_1_fu_252_p3;
reg    ap_sig_cseq_ST_st22_fsm_21;
reg    ap_sig_bdd_213;
wire   [31:0] temp_1_2_fu_259_p3;
wire   [1:0] i_4_fu_272_p2;
reg   [1:0] i_4_reg_404;
wire   [63:0] grp_fu_180_p2;
reg   [63:0] tmp_8_reg_409;
reg    ap_sig_cseq_ST_st46_fsm_45;
reg    ap_sig_bdd_226;
wire   [31:0] grp_fu_172_p1;
reg    ap_sig_cseq_ST_st47_fsm_46;
reg    ap_sig_bdd_235;
wire   [1:0] i_5_fu_297_p2;
reg   [1:0] i_5_reg_422;
reg    ap_sig_cseq_ST_st48_fsm_47;
reg    ap_sig_bdd_244;
wire   [0:0] tmp_13_fu_303_p1;
reg   [0:0] tmp_13_reg_427;
wire   [0:0] exitcond_fu_291_p2;
reg   [63:0] tmp_9_reg_433;
wire   [63:0] grp_fu_184_p2;
reg   [63:0] tmp_11_reg_438;
reg    ap_sig_cseq_ST_st97_fsm_96;
reg    ap_sig_bdd_259;
wire   [31:0] out_0_write_assign_1_fu_328_p3;
reg    ap_sig_cseq_ST_st98_fsm_97;
reg    ap_sig_bdd_268;
wire   [31:0] out_1_write_assign_1_fu_335_p3;
reg   [1:0] i_reg_46;
reg   [31:0] sum_reg_57;
reg   [31:0] temp_0_s_reg_69;
reg   [31:0] temp_1_s_reg_81;
reg   [1:0] i1_reg_93;
wire   [31:0] sum_1_phi_fu_108_p4;
reg   [31:0] sum_1_reg_104;
reg   [1:0] i2_reg_116;
reg   [31:0] out_0_write_assign_reg_127;
reg   [31:0] out_1_write_assign_reg_139;
reg   [1:0] i3_reg_151;
wire   [31:0] grp_fu_162_p0;
wire   [31:0] grp_fu_162_p1;
wire   [31:0] grp_fu_167_p0;
wire   [31:0] grp_fu_167_p1;
reg   [63:0] grp_fu_172_p0;
reg   [31:0] grp_fu_175_p0;
wire   [31:0] temp_load_phi_fu_282_p3;
wire   [31:0] temp_load_1_phi_fu_307_p3;
wire   [63:0] grp_fu_180_p0;
wire   [63:0] grp_fu_180_p1;
reg    ap_sig_cseq_ST_st42_fsm_41;
reg    ap_sig_bdd_312;
wire   [63:0] grp_fu_184_p0;
wire   [63:0] grp_fu_184_p1;
reg    ap_sig_cseq_ST_st67_fsm_66;
reg    ap_sig_bdd_321;
reg   [63:0] grp_fu_188_p1;
reg    ap_sig_cseq_ST_st24_fsm_23;
reg    ap_sig_bdd_329;
reg    ap_sig_cseq_ST_st49_fsm_48;
reg    ap_sig_bdd_336;
wire   [0:0] tmp_fu_218_p1;
wire   [31:0] grp_fu_167_p2;
wire   [0:0] tmp_12_fu_278_p1;
wire    grp_fu_162_ce;
wire    grp_fu_167_ce;
wire    grp_fu_180_ce;
wire    grp_fu_184_ce;
wire   [63:0] grp_fu_188_p0;
wire    grp_fu_188_ce;
reg   [31:0] ap_return_0_preg = 32'b00000000000000000000000000000000;
reg   [31:0] ap_return_1_preg = 32'b00000000000000000000000000000000;
reg   [97:0] ap_NS_fsm;


obj_detector_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
obj_detector_fadd_32ns_32ns_32_5_full_dsp_U64(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_162_p0 ),
    .din1( grp_fu_162_p1 ),
    .ce( grp_fu_162_ce ),
    .dout( grp_fu_162_p2 )
);

obj_detector_fdiv_32ns_32ns_32_16 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
obj_detector_fdiv_32ns_32ns_32_16_U65(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_167_p0 ),
    .din1( grp_fu_167_p1 ),
    .ce( grp_fu_167_ce ),
    .dout( grp_fu_167_p2 )
);

obj_detector_fptrunc_64ns_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
obj_detector_fptrunc_64ns_32_1_U66(
    .din0( grp_fu_172_p0 ),
    .dout( grp_fu_172_p1 )
);

obj_detector_fpext_32ns_64_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
obj_detector_fpext_32ns_64_1_U67(
    .din0( grp_fu_175_p0 ),
    .dout( grp_fu_175_p1 )
);

obj_detector_dadd_64ns_64ns_64_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
obj_detector_dadd_64ns_64ns_64_5_full_dsp_U68(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_180_p0 ),
    .din1( grp_fu_180_p1 ),
    .ce( grp_fu_180_ce ),
    .dout( grp_fu_180_p2 )
);

obj_detector_ddiv_64ns_64ns_64_31 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
obj_detector_ddiv_64ns_64ns_64_31_U69(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_184_p0 ),
    .din1( grp_fu_184_p1 ),
    .ce( grp_fu_184_ce ),
    .dout( grp_fu_184_p2 )
);

obj_detector_dexp_64ns_64ns_64_18_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
obj_detector_dexp_64ns_64ns_64_18_full_dsp_U70(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_188_p0 ),
    .din1( grp_fu_188_p1 ),
    .ce( grp_fu_188_ce ),
    .dout( grp_fu_188_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_return_0_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_0_preg
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st48_fsm_47) & ~(ap_const_lv1_0 == exitcond_fu_291_p2))) begin
            ap_return_0_preg <= out_0_write_assign_reg_127;
        end
    end
end

/// ap_return_1_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_1_preg
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st48_fsm_47) & ~(ap_const_lv1_0 == exitcond_fu_291_p2))) begin
            ap_return_1_preg <= out_1_write_assign_reg_139;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond3_fu_206_p2))) begin
        i1_reg_93 <= ap_const_lv2_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        i1_reg_93 <= i_3_reg_375;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_lv1_0 == exitcond2_fu_229_p2))) begin
        i2_reg_116 <= ap_const_lv2_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st47_fsm_46)) begin
        i2_reg_116 <= i_4_reg_404;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st98_fsm_97)) begin
        i3_reg_151 <= i_5_reg_422;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_22) & ~(exitcond1_fu_266_p2 == ap_const_lv1_0))) begin
        i3_reg_151 <= ap_const_lv2_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        i_reg_46 <= i_2_reg_357;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_46 <= ap_const_lv2_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_lv1_0 == exitcond2_fu_229_p2))) begin
        sum_1_reg_104 <= ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st47_fsm_46)) begin
        sum_1_reg_104 <= grp_fu_172_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sum_reg_57 <= grp_fu_162_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        sum_reg_57 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_2_reg_357 <= i_2_fu_212_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        i_3_reg_375 <= i_3_fu_235_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        i_4_reg_404 <= i_4_fu_272_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st48_fsm_47)) begin
        i_5_reg_422 <= i_5_fu_297_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st98_fsm_97)) begin
        out_0_write_assign_reg_127 <= out_0_write_assign_1_fu_328_p3;
        out_1_write_assign_reg_139 <= out_1_write_assign_1_fu_335_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_22) & (exitcond1_fu_266_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_22) & ~(exitcond1_fu_266_p2 == ap_const_lv1_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st41_fsm_40))) begin
        reg_193 <= grp_fu_175_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st41_fsm_40) | (ap_const_logic_1 == ap_sig_cseq_ST_st66_fsm_65))) begin
        reg_200 <= grp_fu_188_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        temp_0_s_reg_69 <= temp_1_1_fu_252_p3;
        temp_1_s_reg_81 <= temp_1_2_fu_259_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96)) begin
        tmp_11_reg_438 <= grp_fu_184_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st48_fsm_47) & (ap_const_lv1_0 == exitcond_fu_291_p2))) begin
        tmp_13_reg_427 <= tmp_13_fu_303_p1;
        tmp_9_reg_433 <= grp_fu_175_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == exitcond2_fu_229_p2))) begin
        tmp_4_reg_380 <= tmp_4_fu_241_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st46_fsm_45)) begin
        tmp_8_reg_409 <= grp_fu_180_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st48_fsm_47 or exitcond_fu_291_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st48_fsm_47) & ~(ap_const_lv1_0 == exitcond_fu_291_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st48_fsm_47 or exitcond_fu_291_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st48_fsm_47) & ~(ap_const_lv1_0 == exitcond_fu_291_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return_0 assign process. ///
always @ (ap_sig_cseq_ST_st48_fsm_47 or exitcond_fu_291_p2 or out_0_write_assign_reg_127 or ap_return_0_preg)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st48_fsm_47) & ~(ap_const_lv1_0 == exitcond_fu_291_p2))) begin
        ap_return_0 = out_0_write_assign_reg_127;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

/// ap_return_1 assign process. ///
always @ (ap_sig_cseq_ST_st48_fsm_47 or exitcond_fu_291_p2 or out_1_write_assign_reg_139 or ap_return_1_preg)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st48_fsm_47) & ~(ap_const_lv1_0 == exitcond_fu_291_p2))) begin
        ap_return_1 = out_1_write_assign_reg_139;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_116)
begin
    if (ap_sig_bdd_116) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st22_fsm_21 assign process. ///
always @ (ap_sig_bdd_213)
begin
    if (ap_sig_bdd_213) begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st23_fsm_22 assign process. ///
always @ (ap_sig_bdd_133)
begin
    if (ap_sig_bdd_133) begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st24_fsm_23 assign process. ///
always @ (ap_sig_bdd_329)
begin
    if (ap_sig_bdd_329) begin
        ap_sig_cseq_ST_st24_fsm_23 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st24_fsm_23 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_174)
begin
    if (ap_sig_bdd_174) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st41_fsm_40 assign process. ///
always @ (ap_sig_bdd_147)
begin
    if (ap_sig_bdd_147) begin
        ap_sig_cseq_ST_st41_fsm_40 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st41_fsm_40 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st42_fsm_41 assign process. ///
always @ (ap_sig_bdd_312)
begin
    if (ap_sig_bdd_312) begin
        ap_sig_cseq_ST_st42_fsm_41 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st42_fsm_41 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st46_fsm_45 assign process. ///
always @ (ap_sig_bdd_226)
begin
    if (ap_sig_bdd_226) begin
        ap_sig_cseq_ST_st46_fsm_45 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st46_fsm_45 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st47_fsm_46 assign process. ///
always @ (ap_sig_bdd_235)
begin
    if (ap_sig_bdd_235) begin
        ap_sig_cseq_ST_st47_fsm_46 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st47_fsm_46 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st48_fsm_47 assign process. ///
always @ (ap_sig_bdd_244)
begin
    if (ap_sig_bdd_244) begin
        ap_sig_cseq_ST_st48_fsm_47 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st48_fsm_47 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st49_fsm_48 assign process. ///
always @ (ap_sig_bdd_336)
begin
    if (ap_sig_bdd_336) begin
        ap_sig_cseq_ST_st49_fsm_48 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st49_fsm_48 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st66_fsm_65 assign process. ///
always @ (ap_sig_bdd_157)
begin
    if (ap_sig_bdd_157) begin
        ap_sig_cseq_ST_st66_fsm_65 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st66_fsm_65 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st67_fsm_66 assign process. ///
always @ (ap_sig_bdd_321)
begin
    if (ap_sig_bdd_321) begin
        ap_sig_cseq_ST_st67_fsm_66 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st67_fsm_66 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_188)
begin
    if (ap_sig_bdd_188) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_197)
begin
    if (ap_sig_bdd_197) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st97_fsm_96 assign process. ///
always @ (ap_sig_bdd_259)
begin
    if (ap_sig_bdd_259) begin
        ap_sig_cseq_ST_st97_fsm_96 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st97_fsm_96 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st98_fsm_97 assign process. ///
always @ (ap_sig_bdd_268)
begin
    if (ap_sig_bdd_268) begin
        ap_sig_cseq_ST_st98_fsm_97 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st98_fsm_97 = ap_const_logic_0;
    end
end

/// grp_fu_172_p0 assign process. ///
always @ (tmp_8_reg_409 or ap_sig_cseq_ST_st47_fsm_46 or tmp_11_reg_438 or ap_sig_cseq_ST_st98_fsm_97)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st98_fsm_97)) begin
        grp_fu_172_p0 = tmp_11_reg_438;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st47_fsm_46)) begin
        grp_fu_172_p0 = tmp_8_reg_409;
    end else begin
        grp_fu_172_p0 = 'bx;
    end
end

/// grp_fu_175_p0 assign process. ///
always @ (ap_sig_cseq_ST_st23_fsm_22 or exitcond1_fu_266_p2 or ap_sig_cseq_ST_st41_fsm_40 or ap_sig_cseq_ST_st48_fsm_47 or sum_1_phi_fu_108_p4 or sum_1_reg_104 or temp_load_phi_fu_282_p3 or temp_load_1_phi_fu_307_p3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st48_fsm_47)) begin
        grp_fu_175_p0 = temp_load_1_phi_fu_307_p3;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st41_fsm_40)) begin
        grp_fu_175_p0 = sum_1_reg_104;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_22) & ~(exitcond1_fu_266_p2 == ap_const_lv1_0))) begin
        grp_fu_175_p0 = sum_1_phi_fu_108_p4;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_22) & (exitcond1_fu_266_p2 == ap_const_lv1_0))) begin
        grp_fu_175_p0 = temp_load_phi_fu_282_p3;
    end else begin
        grp_fu_175_p0 = 'bx;
    end
end

/// grp_fu_188_p1 assign process. ///
always @ (reg_193 or tmp_9_reg_433 or ap_sig_cseq_ST_st24_fsm_23 or ap_sig_cseq_ST_st49_fsm_48)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st49_fsm_48)) begin
        grp_fu_188_p1 = tmp_9_reg_433;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        grp_fu_188_p1 = reg_193;
    end else begin
        grp_fu_188_p1 = 'bx;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond1_fu_266_p2 or exitcond3_fu_206_p2 or exitcond2_fu_229_p2 or exitcond_fu_291_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_lv1_0 == exitcond3_fu_206_p2)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st7_fsm_6 : 
        begin
            if (~(ap_const_lv1_0 == exitcond2_fu_229_p2)) begin
                ap_NS_fsm = ap_ST_st23_fsm_22;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st23_fsm_22 : 
        begin
            if (~(exitcond1_fu_266_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st48_fsm_47;
            end else begin
                ap_NS_fsm = ap_ST_st24_fsm_23;
            end
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : 
        begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : 
        begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : 
        begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : 
        begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : 
        begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : 
        begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : 
        begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : 
        begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : 
        begin
            ap_NS_fsm = ap_ST_st35_fsm_34;
        end
        ap_ST_st35_fsm_34 : 
        begin
            ap_NS_fsm = ap_ST_st36_fsm_35;
        end
        ap_ST_st36_fsm_35 : 
        begin
            ap_NS_fsm = ap_ST_st37_fsm_36;
        end
        ap_ST_st37_fsm_36 : 
        begin
            ap_NS_fsm = ap_ST_st38_fsm_37;
        end
        ap_ST_st38_fsm_37 : 
        begin
            ap_NS_fsm = ap_ST_st39_fsm_38;
        end
        ap_ST_st39_fsm_38 : 
        begin
            ap_NS_fsm = ap_ST_st40_fsm_39;
        end
        ap_ST_st40_fsm_39 : 
        begin
            ap_NS_fsm = ap_ST_st41_fsm_40;
        end
        ap_ST_st41_fsm_40 : 
        begin
            ap_NS_fsm = ap_ST_st42_fsm_41;
        end
        ap_ST_st42_fsm_41 : 
        begin
            ap_NS_fsm = ap_ST_st43_fsm_42;
        end
        ap_ST_st43_fsm_42 : 
        begin
            ap_NS_fsm = ap_ST_st44_fsm_43;
        end
        ap_ST_st44_fsm_43 : 
        begin
            ap_NS_fsm = ap_ST_st45_fsm_44;
        end
        ap_ST_st45_fsm_44 : 
        begin
            ap_NS_fsm = ap_ST_st46_fsm_45;
        end
        ap_ST_st46_fsm_45 : 
        begin
            ap_NS_fsm = ap_ST_st47_fsm_46;
        end
        ap_ST_st47_fsm_46 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st48_fsm_47 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_291_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st49_fsm_48;
            end
        end
        ap_ST_st49_fsm_48 : 
        begin
            ap_NS_fsm = ap_ST_st50_fsm_49;
        end
        ap_ST_st50_fsm_49 : 
        begin
            ap_NS_fsm = ap_ST_st51_fsm_50;
        end
        ap_ST_st51_fsm_50 : 
        begin
            ap_NS_fsm = ap_ST_st52_fsm_51;
        end
        ap_ST_st52_fsm_51 : 
        begin
            ap_NS_fsm = ap_ST_st53_fsm_52;
        end
        ap_ST_st53_fsm_52 : 
        begin
            ap_NS_fsm = ap_ST_st54_fsm_53;
        end
        ap_ST_st54_fsm_53 : 
        begin
            ap_NS_fsm = ap_ST_st55_fsm_54;
        end
        ap_ST_st55_fsm_54 : 
        begin
            ap_NS_fsm = ap_ST_st56_fsm_55;
        end
        ap_ST_st56_fsm_55 : 
        begin
            ap_NS_fsm = ap_ST_st57_fsm_56;
        end
        ap_ST_st57_fsm_56 : 
        begin
            ap_NS_fsm = ap_ST_st58_fsm_57;
        end
        ap_ST_st58_fsm_57 : 
        begin
            ap_NS_fsm = ap_ST_st59_fsm_58;
        end
        ap_ST_st59_fsm_58 : 
        begin
            ap_NS_fsm = ap_ST_st60_fsm_59;
        end
        ap_ST_st60_fsm_59 : 
        begin
            ap_NS_fsm = ap_ST_st61_fsm_60;
        end
        ap_ST_st61_fsm_60 : 
        begin
            ap_NS_fsm = ap_ST_st62_fsm_61;
        end
        ap_ST_st62_fsm_61 : 
        begin
            ap_NS_fsm = ap_ST_st63_fsm_62;
        end
        ap_ST_st63_fsm_62 : 
        begin
            ap_NS_fsm = ap_ST_st64_fsm_63;
        end
        ap_ST_st64_fsm_63 : 
        begin
            ap_NS_fsm = ap_ST_st65_fsm_64;
        end
        ap_ST_st65_fsm_64 : 
        begin
            ap_NS_fsm = ap_ST_st66_fsm_65;
        end
        ap_ST_st66_fsm_65 : 
        begin
            ap_NS_fsm = ap_ST_st67_fsm_66;
        end
        ap_ST_st67_fsm_66 : 
        begin
            ap_NS_fsm = ap_ST_st68_fsm_67;
        end
        ap_ST_st68_fsm_67 : 
        begin
            ap_NS_fsm = ap_ST_st69_fsm_68;
        end
        ap_ST_st69_fsm_68 : 
        begin
            ap_NS_fsm = ap_ST_st70_fsm_69;
        end
        ap_ST_st70_fsm_69 : 
        begin
            ap_NS_fsm = ap_ST_st71_fsm_70;
        end
        ap_ST_st71_fsm_70 : 
        begin
            ap_NS_fsm = ap_ST_st72_fsm_71;
        end
        ap_ST_st72_fsm_71 : 
        begin
            ap_NS_fsm = ap_ST_st73_fsm_72;
        end
        ap_ST_st73_fsm_72 : 
        begin
            ap_NS_fsm = ap_ST_st74_fsm_73;
        end
        ap_ST_st74_fsm_73 : 
        begin
            ap_NS_fsm = ap_ST_st75_fsm_74;
        end
        ap_ST_st75_fsm_74 : 
        begin
            ap_NS_fsm = ap_ST_st76_fsm_75;
        end
        ap_ST_st76_fsm_75 : 
        begin
            ap_NS_fsm = ap_ST_st77_fsm_76;
        end
        ap_ST_st77_fsm_76 : 
        begin
            ap_NS_fsm = ap_ST_st78_fsm_77;
        end
        ap_ST_st78_fsm_77 : 
        begin
            ap_NS_fsm = ap_ST_st79_fsm_78;
        end
        ap_ST_st79_fsm_78 : 
        begin
            ap_NS_fsm = ap_ST_st80_fsm_79;
        end
        ap_ST_st80_fsm_79 : 
        begin
            ap_NS_fsm = ap_ST_st81_fsm_80;
        end
        ap_ST_st81_fsm_80 : 
        begin
            ap_NS_fsm = ap_ST_st82_fsm_81;
        end
        ap_ST_st82_fsm_81 : 
        begin
            ap_NS_fsm = ap_ST_st83_fsm_82;
        end
        ap_ST_st83_fsm_82 : 
        begin
            ap_NS_fsm = ap_ST_st84_fsm_83;
        end
        ap_ST_st84_fsm_83 : 
        begin
            ap_NS_fsm = ap_ST_st85_fsm_84;
        end
        ap_ST_st85_fsm_84 : 
        begin
            ap_NS_fsm = ap_ST_st86_fsm_85;
        end
        ap_ST_st86_fsm_85 : 
        begin
            ap_NS_fsm = ap_ST_st87_fsm_86;
        end
        ap_ST_st87_fsm_86 : 
        begin
            ap_NS_fsm = ap_ST_st88_fsm_87;
        end
        ap_ST_st88_fsm_87 : 
        begin
            ap_NS_fsm = ap_ST_st89_fsm_88;
        end
        ap_ST_st89_fsm_88 : 
        begin
            ap_NS_fsm = ap_ST_st90_fsm_89;
        end
        ap_ST_st90_fsm_89 : 
        begin
            ap_NS_fsm = ap_ST_st91_fsm_90;
        end
        ap_ST_st91_fsm_90 : 
        begin
            ap_NS_fsm = ap_ST_st92_fsm_91;
        end
        ap_ST_st92_fsm_91 : 
        begin
            ap_NS_fsm = ap_ST_st93_fsm_92;
        end
        ap_ST_st93_fsm_92 : 
        begin
            ap_NS_fsm = ap_ST_st94_fsm_93;
        end
        ap_ST_st94_fsm_93 : 
        begin
            ap_NS_fsm = ap_ST_st95_fsm_94;
        end
        ap_ST_st95_fsm_94 : 
        begin
            ap_NS_fsm = ap_ST_st96_fsm_95;
        end
        ap_ST_st96_fsm_95 : 
        begin
            ap_NS_fsm = ap_ST_st97_fsm_96;
        end
        ap_ST_st97_fsm_96 : 
        begin
            ap_NS_fsm = ap_ST_st98_fsm_97;
        end
        ap_ST_st98_fsm_97 : 
        begin
            ap_NS_fsm = ap_ST_st48_fsm_47;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_116 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_116 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_133 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_133 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_16]);
end

/// ap_sig_bdd_147 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_147 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_28]);
end

/// ap_sig_bdd_157 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_157 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_41]);
end

/// ap_sig_bdd_174 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_174 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_188 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_188 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_197 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_197 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_213 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_213 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_15]);
end

/// ap_sig_bdd_226 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_226 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2D]);
end

/// ap_sig_bdd_235 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_235 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2E]);
end

/// ap_sig_bdd_244 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_244 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2F]);
end

/// ap_sig_bdd_259 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_259 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_60]);
end

/// ap_sig_bdd_268 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_268 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_61]);
end

/// ap_sig_bdd_312 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_312 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_29]);
end

/// ap_sig_bdd_321 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_321 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_42]);
end

/// ap_sig_bdd_329 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_329 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_17]);
end

/// ap_sig_bdd_336 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_336 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_30]);
end
assign exitcond1_fu_266_p2 = (i2_reg_116 == ap_const_lv2_2? 1'b1: 1'b0);
assign exitcond2_fu_229_p2 = (i1_reg_93 == ap_const_lv2_2? 1'b1: 1'b0);
assign exitcond3_fu_206_p2 = (i_reg_46 == ap_const_lv2_2? 1'b1: 1'b0);
assign exitcond_fu_291_p2 = (i3_reg_151 == ap_const_lv2_2? 1'b1: 1'b0);
assign grp_fu_162_ce = ap_const_logic_1;
assign grp_fu_162_p0 = sum_reg_57;
assign grp_fu_162_p1 = ((tmp_fu_218_p1[0:0]===1'b1)? inp_1_read: inp_0_read);
assign grp_fu_167_ce = ap_const_logic_1;
assign grp_fu_167_p0 = ((tmp_4_fu_241_p1[0:0]===1'b1)? inp_1_read: inp_0_read);
assign grp_fu_167_p1 = sum_reg_57;
assign grp_fu_180_ce = ap_const_logic_1;
assign grp_fu_180_p0 = reg_193;
assign grp_fu_180_p1 = reg_200;
assign grp_fu_184_ce = ap_const_logic_1;
assign grp_fu_184_p0 = reg_200;
assign grp_fu_184_p1 = reg_193;
assign grp_fu_188_ce = ap_const_logic_1;
assign grp_fu_188_p0 = ap_const_lv64_0;
assign i_2_fu_212_p2 = (i_reg_46 + ap_const_lv2_1);
assign i_3_fu_235_p2 = (i1_reg_93 + ap_const_lv2_1);
assign i_4_fu_272_p2 = (i2_reg_116 + ap_const_lv2_1);
assign i_5_fu_297_p2 = (i3_reg_151 + ap_const_lv2_1);
assign out_0_write_assign_1_fu_328_p3 = ((tmp_13_reg_427[0:0]===1'b1)? out_0_write_assign_reg_127: grp_fu_172_p1);
assign out_1_write_assign_1_fu_335_p3 = ((tmp_13_reg_427[0:0]===1'b1)? grp_fu_172_p1: out_1_write_assign_reg_139);
assign sum_1_phi_fu_108_p4 = sum_1_reg_104;
assign temp_1_1_fu_252_p3 = ((tmp_4_reg_380[0:0]===1'b1)? temp_0_s_reg_69: grp_fu_167_p2);
assign temp_1_2_fu_259_p3 = ((tmp_4_reg_380[0:0]===1'b1)? grp_fu_167_p2: temp_1_s_reg_81);
assign temp_load_1_phi_fu_307_p3 = ((tmp_13_fu_303_p1[0:0]===1'b1)? temp_1_s_reg_81: temp_0_s_reg_69);
assign temp_load_phi_fu_282_p3 = ((tmp_12_fu_278_p1[0:0]===1'b1)? temp_1_s_reg_81: temp_0_s_reg_69);
assign tmp_12_fu_278_p1 = i2_reg_116[0:0];
assign tmp_13_fu_303_p1 = i3_reg_151[0:0];
assign tmp_4_fu_241_p1 = i1_reg_93[0:0];
assign tmp_fu_218_p1 = i_reg_46[0:0];


endmodule //obj_detector_softmax

