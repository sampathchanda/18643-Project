-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity obj_detector is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_HP0_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_HP0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_HP0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_HP0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_HP1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_HP1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_HP1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_HP2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_HP2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_HP2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP3_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_HP3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_HP3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_HP3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_HP0_USER_VALUE : INTEGER := 0;
    C_M_AXI_HP1_USER_VALUE : INTEGER := 0;
    C_M_AXI_HP3_USER_VALUE : INTEGER := 0;
    C_M_AXI_HP3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_HP1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_HP0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_HP3_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_HP2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_HP2_USER_VALUE : INTEGER := 0;
    C_M_AXI_HP1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_HP2_PROT_VALUE : INTEGER := 0 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_HP0_AWVALID : OUT STD_LOGIC;
    m_axi_HP0_AWREADY : IN STD_LOGIC;
    m_axi_HP0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HP0_ADDR_WIDTH-1 downto 0);
    m_axi_HP0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP0_ID_WIDTH-1 downto 0);
    m_axi_HP0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_HP0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP0_AWUSER_WIDTH-1 downto 0);
    m_axi_HP0_WVALID : OUT STD_LOGIC;
    m_axi_HP0_WREADY : IN STD_LOGIC;
    m_axi_HP0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_HP0_DATA_WIDTH-1 downto 0);
    m_axi_HP0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_HP0_DATA_WIDTH/8-1 downto 0);
    m_axi_HP0_WLAST : OUT STD_LOGIC;
    m_axi_HP0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP0_ID_WIDTH-1 downto 0);
    m_axi_HP0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP0_WUSER_WIDTH-1 downto 0);
    m_axi_HP0_ARVALID : OUT STD_LOGIC;
    m_axi_HP0_ARREADY : IN STD_LOGIC;
    m_axi_HP0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HP0_ADDR_WIDTH-1 downto 0);
    m_axi_HP0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP0_ID_WIDTH-1 downto 0);
    m_axi_HP0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_HP0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP0_ARUSER_WIDTH-1 downto 0);
    m_axi_HP0_RVALID : IN STD_LOGIC;
    m_axi_HP0_RREADY : OUT STD_LOGIC;
    m_axi_HP0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_HP0_DATA_WIDTH-1 downto 0);
    m_axi_HP0_RLAST : IN STD_LOGIC;
    m_axi_HP0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_HP0_ID_WIDTH-1 downto 0);
    m_axi_HP0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HP0_RUSER_WIDTH-1 downto 0);
    m_axi_HP0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP0_BVALID : IN STD_LOGIC;
    m_axi_HP0_BREADY : OUT STD_LOGIC;
    m_axi_HP0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_HP0_ID_WIDTH-1 downto 0);
    m_axi_HP0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HP0_BUSER_WIDTH-1 downto 0);
    m_axi_HP1_AWVALID : OUT STD_LOGIC;
    m_axi_HP1_AWREADY : IN STD_LOGIC;
    m_axi_HP1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_ADDR_WIDTH-1 downto 0);
    m_axi_HP1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_ID_WIDTH-1 downto 0);
    m_axi_HP1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_HP1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_AWUSER_WIDTH-1 downto 0);
    m_axi_HP1_WVALID : OUT STD_LOGIC;
    m_axi_HP1_WREADY : IN STD_LOGIC;
    m_axi_HP1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_DATA_WIDTH-1 downto 0);
    m_axi_HP1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_DATA_WIDTH/8-1 downto 0);
    m_axi_HP1_WLAST : OUT STD_LOGIC;
    m_axi_HP1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_ID_WIDTH-1 downto 0);
    m_axi_HP1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_WUSER_WIDTH-1 downto 0);
    m_axi_HP1_ARVALID : OUT STD_LOGIC;
    m_axi_HP1_ARREADY : IN STD_LOGIC;
    m_axi_HP1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_ADDR_WIDTH-1 downto 0);
    m_axi_HP1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_ID_WIDTH-1 downto 0);
    m_axi_HP1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_HP1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_ARUSER_WIDTH-1 downto 0);
    m_axi_HP1_RVALID : IN STD_LOGIC;
    m_axi_HP1_RREADY : OUT STD_LOGIC;
    m_axi_HP1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_HP1_DATA_WIDTH-1 downto 0);
    m_axi_HP1_RLAST : IN STD_LOGIC;
    m_axi_HP1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_HP1_ID_WIDTH-1 downto 0);
    m_axi_HP1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HP1_RUSER_WIDTH-1 downto 0);
    m_axi_HP1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP1_BVALID : IN STD_LOGIC;
    m_axi_HP1_BREADY : OUT STD_LOGIC;
    m_axi_HP1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_HP1_ID_WIDTH-1 downto 0);
    m_axi_HP1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HP1_BUSER_WIDTH-1 downto 0);
    m_axi_HP2_AWVALID : OUT STD_LOGIC;
    m_axi_HP2_AWREADY : IN STD_LOGIC;
    m_axi_HP2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HP2_ADDR_WIDTH-1 downto 0);
    m_axi_HP2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP2_ID_WIDTH-1 downto 0);
    m_axi_HP2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_HP2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP2_AWUSER_WIDTH-1 downto 0);
    m_axi_HP2_WVALID : OUT STD_LOGIC;
    m_axi_HP2_WREADY : IN STD_LOGIC;
    m_axi_HP2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_HP2_DATA_WIDTH-1 downto 0);
    m_axi_HP2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_HP2_DATA_WIDTH/8-1 downto 0);
    m_axi_HP2_WLAST : OUT STD_LOGIC;
    m_axi_HP2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP2_ID_WIDTH-1 downto 0);
    m_axi_HP2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP2_WUSER_WIDTH-1 downto 0);
    m_axi_HP2_ARVALID : OUT STD_LOGIC;
    m_axi_HP2_ARREADY : IN STD_LOGIC;
    m_axi_HP2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HP2_ADDR_WIDTH-1 downto 0);
    m_axi_HP2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP2_ID_WIDTH-1 downto 0);
    m_axi_HP2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_HP2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP2_ARUSER_WIDTH-1 downto 0);
    m_axi_HP2_RVALID : IN STD_LOGIC;
    m_axi_HP2_RREADY : OUT STD_LOGIC;
    m_axi_HP2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_HP2_DATA_WIDTH-1 downto 0);
    m_axi_HP2_RLAST : IN STD_LOGIC;
    m_axi_HP2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_HP2_ID_WIDTH-1 downto 0);
    m_axi_HP2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HP2_RUSER_WIDTH-1 downto 0);
    m_axi_HP2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP2_BVALID : IN STD_LOGIC;
    m_axi_HP2_BREADY : OUT STD_LOGIC;
    m_axi_HP2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_HP2_ID_WIDTH-1 downto 0);
    m_axi_HP2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HP2_BUSER_WIDTH-1 downto 0);
    m_axi_HP3_AWVALID : OUT STD_LOGIC;
    m_axi_HP3_AWREADY : IN STD_LOGIC;
    m_axi_HP3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_ADDR_WIDTH-1 downto 0);
    m_axi_HP3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_ID_WIDTH-1 downto 0);
    m_axi_HP3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_HP3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_AWUSER_WIDTH-1 downto 0);
    m_axi_HP3_WVALID : OUT STD_LOGIC;
    m_axi_HP3_WREADY : IN STD_LOGIC;
    m_axi_HP3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_DATA_WIDTH-1 downto 0);
    m_axi_HP3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_DATA_WIDTH/8-1 downto 0);
    m_axi_HP3_WLAST : OUT STD_LOGIC;
    m_axi_HP3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_ID_WIDTH-1 downto 0);
    m_axi_HP3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_WUSER_WIDTH-1 downto 0);
    m_axi_HP3_ARVALID : OUT STD_LOGIC;
    m_axi_HP3_ARREADY : IN STD_LOGIC;
    m_axi_HP3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_ADDR_WIDTH-1 downto 0);
    m_axi_HP3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_ID_WIDTH-1 downto 0);
    m_axi_HP3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_HP3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_ARUSER_WIDTH-1 downto 0);
    m_axi_HP3_RVALID : IN STD_LOGIC;
    m_axi_HP3_RREADY : OUT STD_LOGIC;
    m_axi_HP3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_HP3_DATA_WIDTH-1 downto 0);
    m_axi_HP3_RLAST : IN STD_LOGIC;
    m_axi_HP3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_HP3_ID_WIDTH-1 downto 0);
    m_axi_HP3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HP3_RUSER_WIDTH-1 downto 0);
    m_axi_HP3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP3_BVALID : IN STD_LOGIC;
    m_axi_HP3_BREADY : OUT STD_LOGIC;
    m_axi_HP3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_HP3_ID_WIDTH-1 downto 0);
    m_axi_HP3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HP3_BUSER_WIDTH-1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of obj_detector is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "obj_detector,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.738800,HLS_SYN_LAT=38513,HLS_SYN_TPT=none,HLS_SYN_MEM=50,HLS_SYN_DSP=82,HLS_SYN_FF=38217,HLS_SYN_LUT=42870}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000001000000";
    constant ap_ST_pp0_stg0_fsm_7 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000010000000";
    constant ap_ST_st11_fsm_8 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000100000000";
    constant ap_ST_st12_fsm_9 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000001000000000";
    constant ap_ST_st13_fsm_10 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000010000000000";
    constant ap_ST_st14_fsm_11 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000100000000000";
    constant ap_ST_st15_fsm_12 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000001000000000000";
    constant ap_ST_st16_fsm_13 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000010000000000000";
    constant ap_ST_pp1_stg0_fsm_14 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000100000000000000";
    constant ap_ST_st20_fsm_15 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000001000000000000000";
    constant ap_ST_st21_fsm_16 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000010000000000000000";
    constant ap_ST_st22_fsm_17 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000100000000000000000";
    constant ap_ST_st23_fsm_18 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000001000000000000000000";
    constant ap_ST_st24_fsm_19 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000010000000000000000000";
    constant ap_ST_st25_fsm_20 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000100000000000000000000";
    constant ap_ST_pp2_stg0_fsm_21 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000001000000000000000000000";
    constant ap_ST_st29_fsm_22 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000010000000000000000000000";
    constant ap_ST_st30_fsm_23 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000100000000000000000000000";
    constant ap_ST_st31_fsm_24 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000001000000000000000000000000";
    constant ap_ST_st32_fsm_25 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000010000000000000000000000000";
    constant ap_ST_st33_fsm_26 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000100000000000000000000000000";
    constant ap_ST_st34_fsm_27 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000001000000000000000000000000000";
    constant ap_ST_st35_fsm_28 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000010000000000000000000000000000";
    constant ap_ST_pp3_stg0_fsm_29 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000100000000000000000000000000000";
    constant ap_ST_pp3_stg1_fsm_30 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000001000000000000000000000000000000";
    constant ap_ST_pp3_stg2_fsm_31 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000010000000000000000000000000000000";
    constant ap_ST_pp3_stg3_fsm_32 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000100000000000000000000000000000000";
    constant ap_ST_pp3_stg4_fsm_33 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000001000000000000000000000000000000000";
    constant ap_ST_pp4_stg0_fsm_34 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000010000000000000000000000000000000000";
    constant ap_ST_pp4_stg1_fsm_35 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000100000000000000000000000000000000000";
    constant ap_ST_pp4_stg2_fsm_36 : STD_LOGIC_VECTOR (45 downto 0) := "0000000001000000000000000000000000000000000000";
    constant ap_ST_pp4_stg3_fsm_37 : STD_LOGIC_VECTOR (45 downto 0) := "0000000010000000000000000000000000000000000000";
    constant ap_ST_pp4_stg4_fsm_38 : STD_LOGIC_VECTOR (45 downto 0) := "0000000100000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_39 : STD_LOGIC_VECTOR (45 downto 0) := "0000001000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_40 : STD_LOGIC_VECTOR (45 downto 0) := "0000010000000000000000000000000000000000000000";
    constant ap_ST_pp5_stg0_fsm_41 : STD_LOGIC_VECTOR (45 downto 0) := "0000100000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_42 : STD_LOGIC_VECTOR (45 downto 0) := "0001000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_43 : STD_LOGIC_VECTOR (45 downto 0) := "0010000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_44 : STD_LOGIC_VECTOR (45 downto 0) := "0100000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_45 : STD_LOGIC_VECTOR (45 downto 0) := "1000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_310 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100010000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_6C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011011000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_6C0 : STD_LOGIC_VECTOR (10 downto 0) := "11011000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_360 : STD_LOGIC_VECTOR (9 downto 0) := "1101100000";
    constant ap_const_lv11_360 : STD_LOGIC_VECTOR (10 downto 0) := "01101100000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_110 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal A : STD_LOGIC_VECTOR (31 downto 0);
    signal W0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W1 : STD_LOGIC_VECTOR (31 downto 0);
    signal res : STD_LOGIC_VECTOR (31 downto 0);
    signal obj_detector_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal obj_detector_control_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal HP0_AWVALID : STD_LOGIC;
    signal HP0_AWREADY : STD_LOGIC;
    signal HP0_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HP0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HP0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HP0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HP0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HP0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HP0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HP0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HP0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HP0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP0_WVALID : STD_LOGIC;
    signal HP0_WREADY : STD_LOGIC;
    signal HP0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HP0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal HP0_WLAST : STD_LOGIC;
    signal HP0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP0_ARVALID : STD_LOGIC;
    signal HP0_ARREADY : STD_LOGIC;
    signal HP0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HP0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HP0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HP0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HP0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HP0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HP0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HP0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HP0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HP0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP0_RVALID : STD_LOGIC;
    signal HP0_RREADY : STD_LOGIC;
    signal HP0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HP0_RLAST : STD_LOGIC;
    signal HP0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal HP0_BVALID : STD_LOGIC;
    signal HP0_BREADY : STD_LOGIC;
    signal HP0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal HP0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal obj_detector_HP0_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal HP1_AWVALID : STD_LOGIC;
    signal HP1_AWREADY : STD_LOGIC;
    signal HP1_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HP1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HP1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HP1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HP1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HP1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HP1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HP1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HP1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HP1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP1_WVALID : STD_LOGIC;
    signal HP1_WREADY : STD_LOGIC;
    signal HP1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HP1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal HP1_WLAST : STD_LOGIC;
    signal HP1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP1_ARVALID : STD_LOGIC;
    signal HP1_ARREADY : STD_LOGIC;
    signal HP1_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HP1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HP1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HP1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HP1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HP1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HP1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HP1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HP1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HP1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP1_RVALID : STD_LOGIC;
    signal HP1_RREADY : STD_LOGIC;
    signal HP1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HP1_RLAST : STD_LOGIC;
    signal HP1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal HP1_BVALID : STD_LOGIC;
    signal HP1_BREADY : STD_LOGIC;
    signal HP1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal HP1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal obj_detector_HP1_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal HP2_AWVALID : STD_LOGIC;
    signal HP2_AWREADY : STD_LOGIC;
    signal HP2_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HP2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HP2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HP2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HP2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HP2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HP2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HP2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HP2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HP2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP2_WVALID : STD_LOGIC;
    signal HP2_WREADY : STD_LOGIC;
    signal HP2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HP2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal HP2_WLAST : STD_LOGIC;
    signal HP2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP2_ARVALID : STD_LOGIC;
    signal HP2_ARREADY : STD_LOGIC;
    signal HP2_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HP2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HP2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HP2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HP2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HP2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HP2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HP2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HP2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HP2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP2_RVALID : STD_LOGIC;
    signal HP2_RREADY : STD_LOGIC;
    signal HP2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HP2_RLAST : STD_LOGIC;
    signal HP2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal HP2_BVALID : STD_LOGIC;
    signal HP2_BREADY : STD_LOGIC;
    signal HP2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal HP2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal obj_detector_HP2_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal HP3_AWVALID : STD_LOGIC;
    signal HP3_AWREADY : STD_LOGIC;
    signal HP3_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HP3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HP3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HP3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HP3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HP3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HP3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HP3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HP3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HP3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP3_WVALID : STD_LOGIC;
    signal HP3_WREADY : STD_LOGIC;
    signal HP3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HP3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal HP3_WLAST : STD_LOGIC;
    signal HP3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP3_ARVALID : STD_LOGIC;
    signal HP3_ARREADY : STD_LOGIC;
    signal HP3_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HP3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HP3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HP3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HP3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HP3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HP3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HP3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HP3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HP3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP3_RVALID : STD_LOGIC;
    signal HP3_RREADY : STD_LOGIC;
    signal HP3_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HP3_RLAST : STD_LOGIC;
    signal HP3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal HP3_BVALID : STD_LOGIC;
    signal HP3_BREADY : STD_LOGIC;
    signal HP3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal HP3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal obj_detector_HP3_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal indvar_reg_392 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_ppstg_indvar_reg_392_pp0_it1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_631 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond4_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_640 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar1_reg_404 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_indvar1_reg_404_pp1_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_656 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal exitcond3_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_664 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal indvar2_reg_416 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_indvar2_reg_416_pp2_it1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_680 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal exitcond5_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_688 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal cost_0_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_476 : STD_LOGIC_VECTOR (9 downto 0);
    signal cost_1_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i1_reg_499 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar3_reg_510 : STD_LOGIC_VECTOR (1 downto 0);
    signal s3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp3_stg1_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_713 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it1 : STD_LOGIC := '0';
    signal exitcond_i_reg_966 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp4_stg1_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_727 : BOOLEAN;
    signal ap_reg_ppiten_pp4_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it1 : STD_LOGIC := '0';
    signal exitcond_i1_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal local_W1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp3_stg4_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_746 : BOOLEAN;
    signal ap_sig_cseq_ST_pp4_stg4_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_754 : BOOLEAN;
    signal tmp_reg_862 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_reg_867 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_reg_872 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_38_reg_877 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_776 : BOOLEAN;
    signal ap_sig_ioackin_HP0_ARREADY : STD_LOGIC;
    signal exitcond4_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond4_reg_888_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_671_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_next_reg_892 : STD_LOGIC_VECTOR (9 downto 0);
    signal HP0_addr_read_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_799 : BOOLEAN;
    signal ap_sig_ioackin_HP1_ARREADY : STD_LOGIC;
    signal exitcond3_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_908_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_698_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_next1_reg_912 : STD_LOGIC_VECTOR (7 downto 0);
    signal HP1_addr_read_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_822 : BOOLEAN;
    signal ap_sig_ioackin_HP2_ARREADY : STD_LOGIC;
    signal exitcond5_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond5_reg_928_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next2_fu_725_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_next2_reg_932 : STD_LOGIC_VECTOR (10 downto 0);
    signal HP2_addr_read_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_742_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_945 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_845 : BOOLEAN;
    signal i_2_fu_754_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_953 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_854 : BOOLEAN;
    signal i_3_fu_766_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_961 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_863 : BOOLEAN;
    signal exitcond_i_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg0_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_871 : BOOLEAN;
    signal ap_reg_ppstg_exitcond_i_reg_966_pp3_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_778_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_970 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_588_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i1_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp4_stg0_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_895 : BOOLEAN;
    signal ap_reg_ppstg_exitcond_i1_reg_990_pp4_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_796_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_994 : STD_LOGIC_VECTOR (9 downto 0);
    signal local_res_0_reg_1014 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st57_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_919 : BOOLEAN;
    signal ap_sig_ioackin_HP3_AWREADY : STD_LOGIC;
    signal grp_obj_detector_softmax_fu_532_ap_done : STD_LOGIC;
    signal local_res_1_reg_1019 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond6_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp5_stg0_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_939 : BOOLEAN;
    signal ap_reg_ppiten_pp5_it0 : STD_LOGIC := '0';
    signal ap_sig_ioackin_HP3_WREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp5_it1 : STD_LOGIC := '0';
    signal indvar_next3_fu_846_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal local_res_load_phi_fu_856_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_res_load_phi_reg_1038 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_965 : BOOLEAN;
    signal ap_sig_cseq_ST_st16_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_977 : BOOLEAN;
    signal ap_sig_cseq_ST_st25_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_989 : BOOLEAN;
    signal ap_sig_cseq_ST_st35_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_1001 : BOOLEAN;
    signal grp_obj_detector_flatten_fu_540_ap_done : STD_LOGIC;
    signal local_A_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal local_A_ce0 : STD_LOGIC;
    signal local_A_we0 : STD_LOGIC;
    signal local_A_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_A_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_A_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal local_A_ce1 : STD_LOGIC;
    signal local_A_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_W0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_W0_ce0 : STD_LOGIC;
    signal local_W0_we0 : STD_LOGIC;
    signal local_W0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_W0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_W0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_W0_ce1 : STD_LOGIC;
    signal local_W0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_W1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal local_W1_ce0 : STD_LOGIC;
    signal local_W1_we0 : STD_LOGIC;
    signal local_W1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal s0_ce0 : STD_LOGIC;
    signal s0_we0 : STD_LOGIC;
    signal s0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s0_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal s0_ce1 : STD_LOGIC;
    signal s0_we1 : STD_LOGIC;
    signal s0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal s1_ce0 : STD_LOGIC;
    signal s1_we0 : STD_LOGIC;
    signal s1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal s1_ce1 : STD_LOGIC;
    signal s1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_0_ce0 : STD_LOGIC;
    signal s2_0_we0 : STD_LOGIC;
    signal s2_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_0_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_0_ce1 : STD_LOGIC;
    signal s2_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_1_ce0 : STD_LOGIC;
    signal s2_1_we0 : STD_LOGIC;
    signal s2_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_1_ce1 : STD_LOGIC;
    signal s2_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_2_ce0 : STD_LOGIC;
    signal s2_2_we0 : STD_LOGIC;
    signal s2_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_2_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_2_ce1 : STD_LOGIC;
    signal s2_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_3_ce0 : STD_LOGIC;
    signal s2_3_we0 : STD_LOGIC;
    signal s2_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_3_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_3_ce1 : STD_LOGIC;
    signal s2_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_4_ce0 : STD_LOGIC;
    signal s2_4_we0 : STD_LOGIC;
    signal s2_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_4_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_4_ce1 : STD_LOGIC;
    signal s2_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_5_ce0 : STD_LOGIC;
    signal s2_5_we0 : STD_LOGIC;
    signal s2_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_5_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_5_ce1 : STD_LOGIC;
    signal s2_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_6_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_6_ce0 : STD_LOGIC;
    signal s2_6_we0 : STD_LOGIC;
    signal s2_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_6_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_6_ce1 : STD_LOGIC;
    signal s2_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_7_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_7_ce0 : STD_LOGIC;
    signal s2_7_we0 : STD_LOGIC;
    signal s2_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_7_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_7_ce1 : STD_LOGIC;
    signal s2_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_8_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_8_ce0 : STD_LOGIC;
    signal s2_8_we0 : STD_LOGIC;
    signal s2_8_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_8_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_8_ce1 : STD_LOGIC;
    signal s2_8_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_9_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_9_ce0 : STD_LOGIC;
    signal s2_9_we0 : STD_LOGIC;
    signal s2_9_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_9_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_9_ce1 : STD_LOGIC;
    signal s2_9_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_10_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_10_ce0 : STD_LOGIC;
    signal s2_10_we0 : STD_LOGIC;
    signal s2_10_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_10_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_10_ce1 : STD_LOGIC;
    signal s2_10_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_11_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_11_ce0 : STD_LOGIC;
    signal s2_11_we0 : STD_LOGIC;
    signal s2_11_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_11_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal s2_11_ce1 : STD_LOGIC;
    signal s2_11_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal s3_ce0 : STD_LOGIC;
    signal s3_we0 : STD_LOGIC;
    signal s3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal s3_ce1 : STD_LOGIC;
    signal s3_we1 : STD_LOGIC;
    signal s3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_521_ap_start : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_521_ap_done : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_521_ap_idle : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_521_ap_ready : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_521_A_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_obj_detector_convolve_fu_521_A_ce0 : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_521_A_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_521_A_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_obj_detector_convolve_fu_521_A_ce1 : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_521_A_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_521_B_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_obj_detector_convolve_fu_521_B_ce0 : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_521_B_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_521_B_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_obj_detector_convolve_fu_521_B_ce1 : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_521_B_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_521_tmp_20 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_obj_detector_convolve_fu_521_conv_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_obj_detector_convolve_fu_521_conv_ce0 : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_521_conv_we0 : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_521_conv_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_521_conv_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_obj_detector_convolve_fu_521_conv_ce1 : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_521_conv_we1 : STD_LOGIC;
    signal grp_obj_detector_convolve_fu_521_conv_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_convolve_fu_521_tmp_201 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_obj_detector_softmax_fu_532_ap_start : STD_LOGIC;
    signal grp_obj_detector_softmax_fu_532_ap_idle : STD_LOGIC;
    signal grp_obj_detector_softmax_fu_532_ap_ready : STD_LOGIC;
    signal grp_obj_detector_softmax_fu_532_inp_0_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_softmax_fu_532_inp_1_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_softmax_fu_532_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_softmax_fu_532_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_ap_start : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_ap_idle : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_ap_ready : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_0_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_0_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_0_ce1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_1_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_1_ce1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_2_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_2_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_2_ce1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_3_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_3_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_3_ce1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_4_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_4_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_4_ce1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_5_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_5_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_5_ce1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_6_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_6_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_6_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_6_ce1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_7_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_7_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_7_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_7_ce1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_8_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_8_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_8_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_8_ce1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_8_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_9_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_9_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_9_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_9_ce1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_9_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_10_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_10_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_10_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_10_ce1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_10_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_11_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_11_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_11_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_flatten_fu_540_inp_11_ce1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_inp_11_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_out_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_obj_detector_flatten_fu_540_out_r_ce0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_out_r_we0 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_flatten_fu_540_out_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_obj_detector_flatten_fu_540_out_r_ce1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_out_r_we1 : STD_LOGIC;
    signal grp_obj_detector_flatten_fu_540_out_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_ap_start : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_ap_done : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_ap_idle : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_ap_ready : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_inp_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_obj_detector_maxpool_fu_557_inp_ce0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_inp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_inp_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_obj_detector_maxpool_fu_557_inp_ce1 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_inp_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_tmp_24 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_0_ce0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_0_we0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_1_ce0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_1_we0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_2_ce0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_2_we0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_3_ce0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_3_we0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_4_ce0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_4_we0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_5_ce0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_5_we0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_6_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_6_ce0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_6_we0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_7_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_7_ce0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_7_we0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_8_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_8_ce0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_8_we0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_8_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_9_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_9_ce0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_9_we0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_9_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_10_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_10_ce0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_10_we0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_10_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_11_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_obj_detector_maxpool_fu_557_out_11_ce0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_11_we0 : STD_LOGIC;
    signal grp_obj_detector_maxpool_fu_557_out_11_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_maxpool_fu_557_tmp_241 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_obj_detector_ReLU_fu_578_ap_start : STD_LOGIC;
    signal grp_obj_detector_ReLU_fu_578_ap_done : STD_LOGIC;
    signal grp_obj_detector_ReLU_fu_578_ap_idle : STD_LOGIC;
    signal grp_obj_detector_ReLU_fu_578_ap_ready : STD_LOGIC;
    signal grp_obj_detector_ReLU_fu_578_inp_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_obj_detector_ReLU_fu_578_inp_ce0 : STD_LOGIC;
    signal grp_obj_detector_ReLU_fu_578_inp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_ReLU_fu_578_tmp_21 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_obj_detector_ReLU_fu_578_out_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_obj_detector_ReLU_fu_578_out_r_ce0 : STD_LOGIC;
    signal grp_obj_detector_ReLU_fu_578_out_r_we0 : STD_LOGIC;
    signal grp_obj_detector_ReLU_fu_578_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_obj_detector_ReLU_fu_578_tmp_211 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_phi_fu_396_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar1_phi_fu_408_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar2_phi_fu_420_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_428 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_1465 : BOOLEAN;
    signal i1_reg_440 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_1479 : BOOLEAN;
    signal exitcond2_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_reg_452 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_1495 : BOOLEAN;
    signal exitcond1_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_phi_fu_480_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_i1_phi_fu_503_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_obj_detector_convolve_fu_521_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_obj_detector_softmax_fu_532_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st56_fsm_39 : STD_LOGIC;
    signal ap_sig_bdd_1525 : BOOLEAN;
    signal grp_obj_detector_flatten_fu_540_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal exitcond_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_obj_detector_maxpool_fu_557_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_obj_detector_ReLU_fu_578_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_s_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_287_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_288_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_802_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_289_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_830_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_HP0_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_HP1_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_HP2_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_HP3_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_HP3_WREADY : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st63_fsm_45 : STD_LOGIC;
    signal ap_sig_bdd_1607 : BOOLEAN;
    signal grp_fu_588_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_594_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_trn_cast_fu_807_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_addr7_fu_811_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_43_fu_852_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_588_ce : STD_LOGIC;
    signal grp_fu_594_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_sig_bdd_1925 : BOOLEAN;
    signal ap_sig_bdd_1595 : BOOLEAN;

    component obj_detector_convolve IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_20 : IN STD_LOGIC_VECTOR (2 downto 0);
        conv_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_ce0 : OUT STD_LOGIC;
        conv_we0 : OUT STD_LOGIC;
        conv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_ce1 : OUT STD_LOGIC;
        conv_we1 : OUT STD_LOGIC;
        conv_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_201 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component obj_detector_softmax IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inp_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_flatten IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inp_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_0_ce0 : OUT STD_LOGIC;
        inp_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_0_ce1 : OUT STD_LOGIC;
        inp_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_1_ce0 : OUT STD_LOGIC;
        inp_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_1_ce1 : OUT STD_LOGIC;
        inp_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_2_ce0 : OUT STD_LOGIC;
        inp_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_2_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_2_ce1 : OUT STD_LOGIC;
        inp_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_3_ce0 : OUT STD_LOGIC;
        inp_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_3_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_3_ce1 : OUT STD_LOGIC;
        inp_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_4_ce0 : OUT STD_LOGIC;
        inp_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_4_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_4_ce1 : OUT STD_LOGIC;
        inp_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_5_ce0 : OUT STD_LOGIC;
        inp_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_5_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_5_ce1 : OUT STD_LOGIC;
        inp_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_6_ce0 : OUT STD_LOGIC;
        inp_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_6_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_6_ce1 : OUT STD_LOGIC;
        inp_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_7_ce0 : OUT STD_LOGIC;
        inp_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_7_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_7_ce1 : OUT STD_LOGIC;
        inp_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_8_ce0 : OUT STD_LOGIC;
        inp_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_8_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_8_ce1 : OUT STD_LOGIC;
        inp_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_9_ce0 : OUT STD_LOGIC;
        inp_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_9_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_9_ce1 : OUT STD_LOGIC;
        inp_9_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_10_ce0 : OUT STD_LOGIC;
        inp_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_10_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_10_ce1 : OUT STD_LOGIC;
        inp_10_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_11_ce0 : OUT STD_LOGIC;
        inp_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_11_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inp_11_ce1 : OUT STD_LOGIC;
        inp_11_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_we1 : OUT STD_LOGIC;
        out_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_maxpool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inp_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        inp_ce0 : OUT STD_LOGIC;
        inp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inp_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        inp_ce1 : OUT STD_LOGIC;
        inp_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_24 : IN STD_LOGIC_VECTOR (2 downto 0);
        out_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_0_ce0 : OUT STD_LOGIC;
        out_0_we0 : OUT STD_LOGIC;
        out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_1_ce0 : OUT STD_LOGIC;
        out_1_we0 : OUT STD_LOGIC;
        out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_2_ce0 : OUT STD_LOGIC;
        out_2_we0 : OUT STD_LOGIC;
        out_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_3_ce0 : OUT STD_LOGIC;
        out_3_we0 : OUT STD_LOGIC;
        out_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_4_ce0 : OUT STD_LOGIC;
        out_4_we0 : OUT STD_LOGIC;
        out_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_5_ce0 : OUT STD_LOGIC;
        out_5_we0 : OUT STD_LOGIC;
        out_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_6_ce0 : OUT STD_LOGIC;
        out_6_we0 : OUT STD_LOGIC;
        out_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_7_ce0 : OUT STD_LOGIC;
        out_7_we0 : OUT STD_LOGIC;
        out_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_8_ce0 : OUT STD_LOGIC;
        out_8_we0 : OUT STD_LOGIC;
        out_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_9_ce0 : OUT STD_LOGIC;
        out_9_we0 : OUT STD_LOGIC;
        out_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_10_ce0 : OUT STD_LOGIC;
        out_10_we0 : OUT STD_LOGIC;
        out_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_11_ce0 : OUT STD_LOGIC;
        out_11_we0 : OUT STD_LOGIC;
        out_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_241 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component obj_detector_ReLU IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inp_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        inp_ce0 : OUT STD_LOGIC;
        inp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_21 : IN STD_LOGIC_VECTOR (2 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp_211 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component obj_detector_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_local_A IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_local_W0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_local_W1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_s0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_s1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_s2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_s3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        A : OUT STD_LOGIC_VECTOR (31 downto 0);
        W0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        W1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        res : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component obj_detector_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component obj_detector_HP0_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component obj_detector_HP1_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component obj_detector_HP2_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component obj_detector_HP3_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    obj_detector_AXILiteS_s_axi_U : component obj_detector_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => obj_detector_AXILiteS_s_axi_U_ap_dummy_ce,
        A => A,
        W0 => W0,
        W1 => W1,
        res => res);

    obj_detector_control_s_axi_U : component obj_detector_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => obj_detector_control_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    obj_detector_HP0_m_axi_U : component obj_detector_HP0_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_HP0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_HP0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_HP0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_HP0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_HP0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_HP0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_HP0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_HP0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_HP0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_HP0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_HP0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_HP0_AWVALID,
        AWREADY => m_axi_HP0_AWREADY,
        AWADDR => m_axi_HP0_AWADDR,
        AWID => m_axi_HP0_AWID,
        AWLEN => m_axi_HP0_AWLEN,
        AWSIZE => m_axi_HP0_AWSIZE,
        AWBURST => m_axi_HP0_AWBURST,
        AWLOCK => m_axi_HP0_AWLOCK,
        AWCACHE => m_axi_HP0_AWCACHE,
        AWPROT => m_axi_HP0_AWPROT,
        AWQOS => m_axi_HP0_AWQOS,
        AWREGION => m_axi_HP0_AWREGION,
        AWUSER => m_axi_HP0_AWUSER,
        WVALID => m_axi_HP0_WVALID,
        WREADY => m_axi_HP0_WREADY,
        WDATA => m_axi_HP0_WDATA,
        WSTRB => m_axi_HP0_WSTRB,
        WLAST => m_axi_HP0_WLAST,
        WID => m_axi_HP0_WID,
        WUSER => m_axi_HP0_WUSER,
        ARVALID => m_axi_HP0_ARVALID,
        ARREADY => m_axi_HP0_ARREADY,
        ARADDR => m_axi_HP0_ARADDR,
        ARID => m_axi_HP0_ARID,
        ARLEN => m_axi_HP0_ARLEN,
        ARSIZE => m_axi_HP0_ARSIZE,
        ARBURST => m_axi_HP0_ARBURST,
        ARLOCK => m_axi_HP0_ARLOCK,
        ARCACHE => m_axi_HP0_ARCACHE,
        ARPROT => m_axi_HP0_ARPROT,
        ARQOS => m_axi_HP0_ARQOS,
        ARREGION => m_axi_HP0_ARREGION,
        ARUSER => m_axi_HP0_ARUSER,
        RVALID => m_axi_HP0_RVALID,
        RREADY => m_axi_HP0_RREADY,
        RDATA => m_axi_HP0_RDATA,
        RLAST => m_axi_HP0_RLAST,
        RID => m_axi_HP0_RID,
        RUSER => m_axi_HP0_RUSER,
        RRESP => m_axi_HP0_RRESP,
        BVALID => m_axi_HP0_BVALID,
        BREADY => m_axi_HP0_BREADY,
        BRESP => m_axi_HP0_BRESP,
        BID => m_axi_HP0_BID,
        BUSER => m_axi_HP0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => obj_detector_HP0_m_axi_U_ap_dummy_ce,
        I_ARVALID => HP0_ARVALID,
        I_ARREADY => HP0_ARREADY,
        I_ARADDR => HP0_ARADDR,
        I_ARID => HP0_ARID,
        I_ARLEN => HP0_ARLEN,
        I_ARSIZE => HP0_ARSIZE,
        I_ARLOCK => HP0_ARLOCK,
        I_ARCACHE => HP0_ARCACHE,
        I_ARQOS => HP0_ARQOS,
        I_ARPROT => HP0_ARPROT,
        I_ARUSER => HP0_ARUSER,
        I_ARBURST => HP0_ARBURST,
        I_ARREGION => HP0_ARREGION,
        I_RVALID => HP0_RVALID,
        I_RREADY => HP0_RREADY,
        I_RDATA => HP0_RDATA,
        I_RID => HP0_RID,
        I_RUSER => HP0_RUSER,
        I_RRESP => HP0_RRESP,
        I_RLAST => HP0_RLAST,
        I_AWVALID => HP0_AWVALID,
        I_AWREADY => HP0_AWREADY,
        I_AWADDR => HP0_AWADDR,
        I_AWID => HP0_AWID,
        I_AWLEN => HP0_AWLEN,
        I_AWSIZE => HP0_AWSIZE,
        I_AWLOCK => HP0_AWLOCK,
        I_AWCACHE => HP0_AWCACHE,
        I_AWQOS => HP0_AWQOS,
        I_AWPROT => HP0_AWPROT,
        I_AWUSER => HP0_AWUSER,
        I_AWBURST => HP0_AWBURST,
        I_AWREGION => HP0_AWREGION,
        I_WVALID => HP0_WVALID,
        I_WREADY => HP0_WREADY,
        I_WDATA => HP0_WDATA,
        I_WID => HP0_WID,
        I_WUSER => HP0_WUSER,
        I_WLAST => HP0_WLAST,
        I_WSTRB => HP0_WSTRB,
        I_BVALID => HP0_BVALID,
        I_BREADY => HP0_BREADY,
        I_BRESP => HP0_BRESP,
        I_BID => HP0_BID,
        I_BUSER => HP0_BUSER);

    obj_detector_HP1_m_axi_U : component obj_detector_HP1_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_HP1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_HP1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_HP1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_HP1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_HP1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_HP1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_HP1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_HP1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_HP1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_HP1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_HP1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_HP1_AWVALID,
        AWREADY => m_axi_HP1_AWREADY,
        AWADDR => m_axi_HP1_AWADDR,
        AWID => m_axi_HP1_AWID,
        AWLEN => m_axi_HP1_AWLEN,
        AWSIZE => m_axi_HP1_AWSIZE,
        AWBURST => m_axi_HP1_AWBURST,
        AWLOCK => m_axi_HP1_AWLOCK,
        AWCACHE => m_axi_HP1_AWCACHE,
        AWPROT => m_axi_HP1_AWPROT,
        AWQOS => m_axi_HP1_AWQOS,
        AWREGION => m_axi_HP1_AWREGION,
        AWUSER => m_axi_HP1_AWUSER,
        WVALID => m_axi_HP1_WVALID,
        WREADY => m_axi_HP1_WREADY,
        WDATA => m_axi_HP1_WDATA,
        WSTRB => m_axi_HP1_WSTRB,
        WLAST => m_axi_HP1_WLAST,
        WID => m_axi_HP1_WID,
        WUSER => m_axi_HP1_WUSER,
        ARVALID => m_axi_HP1_ARVALID,
        ARREADY => m_axi_HP1_ARREADY,
        ARADDR => m_axi_HP1_ARADDR,
        ARID => m_axi_HP1_ARID,
        ARLEN => m_axi_HP1_ARLEN,
        ARSIZE => m_axi_HP1_ARSIZE,
        ARBURST => m_axi_HP1_ARBURST,
        ARLOCK => m_axi_HP1_ARLOCK,
        ARCACHE => m_axi_HP1_ARCACHE,
        ARPROT => m_axi_HP1_ARPROT,
        ARQOS => m_axi_HP1_ARQOS,
        ARREGION => m_axi_HP1_ARREGION,
        ARUSER => m_axi_HP1_ARUSER,
        RVALID => m_axi_HP1_RVALID,
        RREADY => m_axi_HP1_RREADY,
        RDATA => m_axi_HP1_RDATA,
        RLAST => m_axi_HP1_RLAST,
        RID => m_axi_HP1_RID,
        RUSER => m_axi_HP1_RUSER,
        RRESP => m_axi_HP1_RRESP,
        BVALID => m_axi_HP1_BVALID,
        BREADY => m_axi_HP1_BREADY,
        BRESP => m_axi_HP1_BRESP,
        BID => m_axi_HP1_BID,
        BUSER => m_axi_HP1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => obj_detector_HP1_m_axi_U_ap_dummy_ce,
        I_ARVALID => HP1_ARVALID,
        I_ARREADY => HP1_ARREADY,
        I_ARADDR => HP1_ARADDR,
        I_ARID => HP1_ARID,
        I_ARLEN => HP1_ARLEN,
        I_ARSIZE => HP1_ARSIZE,
        I_ARLOCK => HP1_ARLOCK,
        I_ARCACHE => HP1_ARCACHE,
        I_ARQOS => HP1_ARQOS,
        I_ARPROT => HP1_ARPROT,
        I_ARUSER => HP1_ARUSER,
        I_ARBURST => HP1_ARBURST,
        I_ARREGION => HP1_ARREGION,
        I_RVALID => HP1_RVALID,
        I_RREADY => HP1_RREADY,
        I_RDATA => HP1_RDATA,
        I_RID => HP1_RID,
        I_RUSER => HP1_RUSER,
        I_RRESP => HP1_RRESP,
        I_RLAST => HP1_RLAST,
        I_AWVALID => HP1_AWVALID,
        I_AWREADY => HP1_AWREADY,
        I_AWADDR => HP1_AWADDR,
        I_AWID => HP1_AWID,
        I_AWLEN => HP1_AWLEN,
        I_AWSIZE => HP1_AWSIZE,
        I_AWLOCK => HP1_AWLOCK,
        I_AWCACHE => HP1_AWCACHE,
        I_AWQOS => HP1_AWQOS,
        I_AWPROT => HP1_AWPROT,
        I_AWUSER => HP1_AWUSER,
        I_AWBURST => HP1_AWBURST,
        I_AWREGION => HP1_AWREGION,
        I_WVALID => HP1_WVALID,
        I_WREADY => HP1_WREADY,
        I_WDATA => HP1_WDATA,
        I_WID => HP1_WID,
        I_WUSER => HP1_WUSER,
        I_WLAST => HP1_WLAST,
        I_WSTRB => HP1_WSTRB,
        I_BVALID => HP1_BVALID,
        I_BREADY => HP1_BREADY,
        I_BRESP => HP1_BRESP,
        I_BID => HP1_BID,
        I_BUSER => HP1_BUSER);

    obj_detector_HP2_m_axi_U : component obj_detector_HP2_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_HP2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_HP2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_HP2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_HP2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_HP2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_HP2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_HP2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_HP2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_HP2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_HP2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_HP2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_HP2_AWVALID,
        AWREADY => m_axi_HP2_AWREADY,
        AWADDR => m_axi_HP2_AWADDR,
        AWID => m_axi_HP2_AWID,
        AWLEN => m_axi_HP2_AWLEN,
        AWSIZE => m_axi_HP2_AWSIZE,
        AWBURST => m_axi_HP2_AWBURST,
        AWLOCK => m_axi_HP2_AWLOCK,
        AWCACHE => m_axi_HP2_AWCACHE,
        AWPROT => m_axi_HP2_AWPROT,
        AWQOS => m_axi_HP2_AWQOS,
        AWREGION => m_axi_HP2_AWREGION,
        AWUSER => m_axi_HP2_AWUSER,
        WVALID => m_axi_HP2_WVALID,
        WREADY => m_axi_HP2_WREADY,
        WDATA => m_axi_HP2_WDATA,
        WSTRB => m_axi_HP2_WSTRB,
        WLAST => m_axi_HP2_WLAST,
        WID => m_axi_HP2_WID,
        WUSER => m_axi_HP2_WUSER,
        ARVALID => m_axi_HP2_ARVALID,
        ARREADY => m_axi_HP2_ARREADY,
        ARADDR => m_axi_HP2_ARADDR,
        ARID => m_axi_HP2_ARID,
        ARLEN => m_axi_HP2_ARLEN,
        ARSIZE => m_axi_HP2_ARSIZE,
        ARBURST => m_axi_HP2_ARBURST,
        ARLOCK => m_axi_HP2_ARLOCK,
        ARCACHE => m_axi_HP2_ARCACHE,
        ARPROT => m_axi_HP2_ARPROT,
        ARQOS => m_axi_HP2_ARQOS,
        ARREGION => m_axi_HP2_ARREGION,
        ARUSER => m_axi_HP2_ARUSER,
        RVALID => m_axi_HP2_RVALID,
        RREADY => m_axi_HP2_RREADY,
        RDATA => m_axi_HP2_RDATA,
        RLAST => m_axi_HP2_RLAST,
        RID => m_axi_HP2_RID,
        RUSER => m_axi_HP2_RUSER,
        RRESP => m_axi_HP2_RRESP,
        BVALID => m_axi_HP2_BVALID,
        BREADY => m_axi_HP2_BREADY,
        BRESP => m_axi_HP2_BRESP,
        BID => m_axi_HP2_BID,
        BUSER => m_axi_HP2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => obj_detector_HP2_m_axi_U_ap_dummy_ce,
        I_ARVALID => HP2_ARVALID,
        I_ARREADY => HP2_ARREADY,
        I_ARADDR => HP2_ARADDR,
        I_ARID => HP2_ARID,
        I_ARLEN => HP2_ARLEN,
        I_ARSIZE => HP2_ARSIZE,
        I_ARLOCK => HP2_ARLOCK,
        I_ARCACHE => HP2_ARCACHE,
        I_ARQOS => HP2_ARQOS,
        I_ARPROT => HP2_ARPROT,
        I_ARUSER => HP2_ARUSER,
        I_ARBURST => HP2_ARBURST,
        I_ARREGION => HP2_ARREGION,
        I_RVALID => HP2_RVALID,
        I_RREADY => HP2_RREADY,
        I_RDATA => HP2_RDATA,
        I_RID => HP2_RID,
        I_RUSER => HP2_RUSER,
        I_RRESP => HP2_RRESP,
        I_RLAST => HP2_RLAST,
        I_AWVALID => HP2_AWVALID,
        I_AWREADY => HP2_AWREADY,
        I_AWADDR => HP2_AWADDR,
        I_AWID => HP2_AWID,
        I_AWLEN => HP2_AWLEN,
        I_AWSIZE => HP2_AWSIZE,
        I_AWLOCK => HP2_AWLOCK,
        I_AWCACHE => HP2_AWCACHE,
        I_AWQOS => HP2_AWQOS,
        I_AWPROT => HP2_AWPROT,
        I_AWUSER => HP2_AWUSER,
        I_AWBURST => HP2_AWBURST,
        I_AWREGION => HP2_AWREGION,
        I_WVALID => HP2_WVALID,
        I_WREADY => HP2_WREADY,
        I_WDATA => HP2_WDATA,
        I_WID => HP2_WID,
        I_WUSER => HP2_WUSER,
        I_WLAST => HP2_WLAST,
        I_WSTRB => HP2_WSTRB,
        I_BVALID => HP2_BVALID,
        I_BREADY => HP2_BREADY,
        I_BRESP => HP2_BRESP,
        I_BID => HP2_BID,
        I_BUSER => HP2_BUSER);

    obj_detector_HP3_m_axi_U : component obj_detector_HP3_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_HP3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_HP3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_HP3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_HP3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_HP3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_HP3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_HP3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_HP3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_HP3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_HP3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_HP3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_HP3_AWVALID,
        AWREADY => m_axi_HP3_AWREADY,
        AWADDR => m_axi_HP3_AWADDR,
        AWID => m_axi_HP3_AWID,
        AWLEN => m_axi_HP3_AWLEN,
        AWSIZE => m_axi_HP3_AWSIZE,
        AWBURST => m_axi_HP3_AWBURST,
        AWLOCK => m_axi_HP3_AWLOCK,
        AWCACHE => m_axi_HP3_AWCACHE,
        AWPROT => m_axi_HP3_AWPROT,
        AWQOS => m_axi_HP3_AWQOS,
        AWREGION => m_axi_HP3_AWREGION,
        AWUSER => m_axi_HP3_AWUSER,
        WVALID => m_axi_HP3_WVALID,
        WREADY => m_axi_HP3_WREADY,
        WDATA => m_axi_HP3_WDATA,
        WSTRB => m_axi_HP3_WSTRB,
        WLAST => m_axi_HP3_WLAST,
        WID => m_axi_HP3_WID,
        WUSER => m_axi_HP3_WUSER,
        ARVALID => m_axi_HP3_ARVALID,
        ARREADY => m_axi_HP3_ARREADY,
        ARADDR => m_axi_HP3_ARADDR,
        ARID => m_axi_HP3_ARID,
        ARLEN => m_axi_HP3_ARLEN,
        ARSIZE => m_axi_HP3_ARSIZE,
        ARBURST => m_axi_HP3_ARBURST,
        ARLOCK => m_axi_HP3_ARLOCK,
        ARCACHE => m_axi_HP3_ARCACHE,
        ARPROT => m_axi_HP3_ARPROT,
        ARQOS => m_axi_HP3_ARQOS,
        ARREGION => m_axi_HP3_ARREGION,
        ARUSER => m_axi_HP3_ARUSER,
        RVALID => m_axi_HP3_RVALID,
        RREADY => m_axi_HP3_RREADY,
        RDATA => m_axi_HP3_RDATA,
        RLAST => m_axi_HP3_RLAST,
        RID => m_axi_HP3_RID,
        RUSER => m_axi_HP3_RUSER,
        RRESP => m_axi_HP3_RRESP,
        BVALID => m_axi_HP3_BVALID,
        BREADY => m_axi_HP3_BREADY,
        BRESP => m_axi_HP3_BRESP,
        BID => m_axi_HP3_BID,
        BUSER => m_axi_HP3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => obj_detector_HP3_m_axi_U_ap_dummy_ce,
        I_ARVALID => HP3_ARVALID,
        I_ARREADY => HP3_ARREADY,
        I_ARADDR => HP3_ARADDR,
        I_ARID => HP3_ARID,
        I_ARLEN => HP3_ARLEN,
        I_ARSIZE => HP3_ARSIZE,
        I_ARLOCK => HP3_ARLOCK,
        I_ARCACHE => HP3_ARCACHE,
        I_ARQOS => HP3_ARQOS,
        I_ARPROT => HP3_ARPROT,
        I_ARUSER => HP3_ARUSER,
        I_ARBURST => HP3_ARBURST,
        I_ARREGION => HP3_ARREGION,
        I_RVALID => HP3_RVALID,
        I_RREADY => HP3_RREADY,
        I_RDATA => HP3_RDATA,
        I_RID => HP3_RID,
        I_RUSER => HP3_RUSER,
        I_RRESP => HP3_RRESP,
        I_RLAST => HP3_RLAST,
        I_AWVALID => HP3_AWVALID,
        I_AWREADY => HP3_AWREADY,
        I_AWADDR => HP3_AWADDR,
        I_AWID => HP3_AWID,
        I_AWLEN => HP3_AWLEN,
        I_AWSIZE => HP3_AWSIZE,
        I_AWLOCK => HP3_AWLOCK,
        I_AWCACHE => HP3_AWCACHE,
        I_AWQOS => HP3_AWQOS,
        I_AWPROT => HP3_AWPROT,
        I_AWUSER => HP3_AWUSER,
        I_AWBURST => HP3_AWBURST,
        I_AWREGION => HP3_AWREGION,
        I_WVALID => HP3_WVALID,
        I_WREADY => HP3_WREADY,
        I_WDATA => HP3_WDATA,
        I_WID => HP3_WID,
        I_WUSER => HP3_WUSER,
        I_WLAST => HP3_WLAST,
        I_WSTRB => HP3_WSTRB,
        I_BVALID => HP3_BVALID,
        I_BREADY => HP3_BREADY,
        I_BRESP => HP3_BRESP,
        I_BID => HP3_BID,
        I_BUSER => HP3_BUSER);

    local_A_U : component obj_detector_local_A
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => local_A_address0,
        ce0 => local_A_ce0,
        we0 => local_A_we0,
        d0 => local_A_d0,
        q0 => local_A_q0,
        address1 => local_A_address1,
        ce1 => local_A_ce1,
        q1 => local_A_q1);

    local_W0_U : component obj_detector_local_W0
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => local_W0_address0,
        ce0 => local_W0_ce0,
        we0 => local_W0_we0,
        d0 => local_W0_d0,
        q0 => local_W0_q0,
        address1 => local_W0_address1,
        ce1 => local_W0_ce1,
        q1 => local_W0_q1);

    local_W1_U : component obj_detector_local_W1
    generic map (
        DataWidth => 32,
        AddressRange => 1728,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => local_W1_address0,
        ce0 => local_W1_ce0,
        we0 => local_W1_we0,
        d0 => local_W1_d0,
        q0 => local_W1_q0);

    s0_U : component obj_detector_s0
    generic map (
        DataWidth => 32,
        AddressRange => 3456,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s0_address0,
        ce0 => s0_ce0,
        we0 => s0_we0,
        d0 => s0_d0,
        q0 => s0_q0,
        address1 => s0_address1,
        ce1 => s0_ce1,
        we1 => s0_we1,
        d1 => s0_d1);

    s1_U : component obj_detector_s1
    generic map (
        DataWidth => 32,
        AddressRange => 3456,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s1_address0,
        ce0 => s1_ce0,
        we0 => s1_we0,
        d0 => s1_d0,
        q0 => s1_q0,
        address1 => s1_address1,
        ce1 => s1_ce1,
        q1 => s1_q1);

    s2_0_U : component obj_detector_s2_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s2_0_address0,
        ce0 => s2_0_ce0,
        we0 => s2_0_we0,
        d0 => s2_0_d0,
        q0 => s2_0_q0,
        address1 => s2_0_address1,
        ce1 => s2_0_ce1,
        q1 => s2_0_q1);

    s2_1_U : component obj_detector_s2_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s2_1_address0,
        ce0 => s2_1_ce0,
        we0 => s2_1_we0,
        d0 => s2_1_d0,
        q0 => s2_1_q0,
        address1 => s2_1_address1,
        ce1 => s2_1_ce1,
        q1 => s2_1_q1);

    s2_2_U : component obj_detector_s2_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s2_2_address0,
        ce0 => s2_2_ce0,
        we0 => s2_2_we0,
        d0 => s2_2_d0,
        q0 => s2_2_q0,
        address1 => s2_2_address1,
        ce1 => s2_2_ce1,
        q1 => s2_2_q1);

    s2_3_U : component obj_detector_s2_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s2_3_address0,
        ce0 => s2_3_ce0,
        we0 => s2_3_we0,
        d0 => s2_3_d0,
        q0 => s2_3_q0,
        address1 => s2_3_address1,
        ce1 => s2_3_ce1,
        q1 => s2_3_q1);

    s2_4_U : component obj_detector_s2_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s2_4_address0,
        ce0 => s2_4_ce0,
        we0 => s2_4_we0,
        d0 => s2_4_d0,
        q0 => s2_4_q0,
        address1 => s2_4_address1,
        ce1 => s2_4_ce1,
        q1 => s2_4_q1);

    s2_5_U : component obj_detector_s2_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s2_5_address0,
        ce0 => s2_5_ce0,
        we0 => s2_5_we0,
        d0 => s2_5_d0,
        q0 => s2_5_q0,
        address1 => s2_5_address1,
        ce1 => s2_5_ce1,
        q1 => s2_5_q1);

    s2_6_U : component obj_detector_s2_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s2_6_address0,
        ce0 => s2_6_ce0,
        we0 => s2_6_we0,
        d0 => s2_6_d0,
        q0 => s2_6_q0,
        address1 => s2_6_address1,
        ce1 => s2_6_ce1,
        q1 => s2_6_q1);

    s2_7_U : component obj_detector_s2_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s2_7_address0,
        ce0 => s2_7_ce0,
        we0 => s2_7_we0,
        d0 => s2_7_d0,
        q0 => s2_7_q0,
        address1 => s2_7_address1,
        ce1 => s2_7_ce1,
        q1 => s2_7_q1);

    s2_8_U : component obj_detector_s2_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s2_8_address0,
        ce0 => s2_8_ce0,
        we0 => s2_8_we0,
        d0 => s2_8_d0,
        q0 => s2_8_q0,
        address1 => s2_8_address1,
        ce1 => s2_8_ce1,
        q1 => s2_8_q1);

    s2_9_U : component obj_detector_s2_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s2_9_address0,
        ce0 => s2_9_ce0,
        we0 => s2_9_we0,
        d0 => s2_9_d0,
        q0 => s2_9_q0,
        address1 => s2_9_address1,
        ce1 => s2_9_ce1,
        q1 => s2_9_q1);

    s2_10_U : component obj_detector_s2_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s2_10_address0,
        ce0 => s2_10_ce0,
        we0 => s2_10_we0,
        d0 => s2_10_d0,
        q0 => s2_10_q0,
        address1 => s2_10_address1,
        ce1 => s2_10_ce1,
        q1 => s2_10_q1);

    s2_11_U : component obj_detector_s2_0
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s2_11_address0,
        ce0 => s2_11_ce0,
        we0 => s2_11_we0,
        d0 => s2_11_d0,
        q0 => s2_11_q0,
        address1 => s2_11_address1,
        ce1 => s2_11_ce1,
        q1 => s2_11_q1);

    s3_U : component obj_detector_s3
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s3_address0,
        ce0 => s3_ce0,
        we0 => s3_we0,
        d0 => s3_d0,
        q0 => s3_q0,
        address1 => s3_address1,
        ce1 => s3_ce1,
        we1 => s3_we1,
        d1 => s3_d1);

    grp_obj_detector_convolve_fu_521 : component obj_detector_convolve
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_obj_detector_convolve_fu_521_ap_start,
        ap_done => grp_obj_detector_convolve_fu_521_ap_done,
        ap_idle => grp_obj_detector_convolve_fu_521_ap_idle,
        ap_ready => grp_obj_detector_convolve_fu_521_ap_ready,
        A_address0 => grp_obj_detector_convolve_fu_521_A_address0,
        A_ce0 => grp_obj_detector_convolve_fu_521_A_ce0,
        A_q0 => grp_obj_detector_convolve_fu_521_A_q0,
        A_address1 => grp_obj_detector_convolve_fu_521_A_address1,
        A_ce1 => grp_obj_detector_convolve_fu_521_A_ce1,
        A_q1 => grp_obj_detector_convolve_fu_521_A_q1,
        B_address0 => grp_obj_detector_convolve_fu_521_B_address0,
        B_ce0 => grp_obj_detector_convolve_fu_521_B_ce0,
        B_q0 => grp_obj_detector_convolve_fu_521_B_q0,
        B_address1 => grp_obj_detector_convolve_fu_521_B_address1,
        B_ce1 => grp_obj_detector_convolve_fu_521_B_ce1,
        B_q1 => grp_obj_detector_convolve_fu_521_B_q1,
        tmp_20 => grp_obj_detector_convolve_fu_521_tmp_20,
        conv_address0 => grp_obj_detector_convolve_fu_521_conv_address0,
        conv_ce0 => grp_obj_detector_convolve_fu_521_conv_ce0,
        conv_we0 => grp_obj_detector_convolve_fu_521_conv_we0,
        conv_d0 => grp_obj_detector_convolve_fu_521_conv_d0,
        conv_address1 => grp_obj_detector_convolve_fu_521_conv_address1,
        conv_ce1 => grp_obj_detector_convolve_fu_521_conv_ce1,
        conv_we1 => grp_obj_detector_convolve_fu_521_conv_we1,
        conv_d1 => grp_obj_detector_convolve_fu_521_conv_d1,
        tmp_201 => grp_obj_detector_convolve_fu_521_tmp_201);

    grp_obj_detector_softmax_fu_532 : component obj_detector_softmax
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_obj_detector_softmax_fu_532_ap_start,
        ap_done => grp_obj_detector_softmax_fu_532_ap_done,
        ap_idle => grp_obj_detector_softmax_fu_532_ap_idle,
        ap_ready => grp_obj_detector_softmax_fu_532_ap_ready,
        inp_0_read => grp_obj_detector_softmax_fu_532_inp_0_read,
        inp_1_read => grp_obj_detector_softmax_fu_532_inp_1_read,
        ap_return_0 => grp_obj_detector_softmax_fu_532_ap_return_0,
        ap_return_1 => grp_obj_detector_softmax_fu_532_ap_return_1);

    grp_obj_detector_flatten_fu_540 : component obj_detector_flatten
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_obj_detector_flatten_fu_540_ap_start,
        ap_done => grp_obj_detector_flatten_fu_540_ap_done,
        ap_idle => grp_obj_detector_flatten_fu_540_ap_idle,
        ap_ready => grp_obj_detector_flatten_fu_540_ap_ready,
        inp_0_address0 => grp_obj_detector_flatten_fu_540_inp_0_address0,
        inp_0_ce0 => grp_obj_detector_flatten_fu_540_inp_0_ce0,
        inp_0_q0 => grp_obj_detector_flatten_fu_540_inp_0_q0,
        inp_0_address1 => grp_obj_detector_flatten_fu_540_inp_0_address1,
        inp_0_ce1 => grp_obj_detector_flatten_fu_540_inp_0_ce1,
        inp_0_q1 => grp_obj_detector_flatten_fu_540_inp_0_q1,
        inp_1_address0 => grp_obj_detector_flatten_fu_540_inp_1_address0,
        inp_1_ce0 => grp_obj_detector_flatten_fu_540_inp_1_ce0,
        inp_1_q0 => grp_obj_detector_flatten_fu_540_inp_1_q0,
        inp_1_address1 => grp_obj_detector_flatten_fu_540_inp_1_address1,
        inp_1_ce1 => grp_obj_detector_flatten_fu_540_inp_1_ce1,
        inp_1_q1 => grp_obj_detector_flatten_fu_540_inp_1_q1,
        inp_2_address0 => grp_obj_detector_flatten_fu_540_inp_2_address0,
        inp_2_ce0 => grp_obj_detector_flatten_fu_540_inp_2_ce0,
        inp_2_q0 => grp_obj_detector_flatten_fu_540_inp_2_q0,
        inp_2_address1 => grp_obj_detector_flatten_fu_540_inp_2_address1,
        inp_2_ce1 => grp_obj_detector_flatten_fu_540_inp_2_ce1,
        inp_2_q1 => grp_obj_detector_flatten_fu_540_inp_2_q1,
        inp_3_address0 => grp_obj_detector_flatten_fu_540_inp_3_address0,
        inp_3_ce0 => grp_obj_detector_flatten_fu_540_inp_3_ce0,
        inp_3_q0 => grp_obj_detector_flatten_fu_540_inp_3_q0,
        inp_3_address1 => grp_obj_detector_flatten_fu_540_inp_3_address1,
        inp_3_ce1 => grp_obj_detector_flatten_fu_540_inp_3_ce1,
        inp_3_q1 => grp_obj_detector_flatten_fu_540_inp_3_q1,
        inp_4_address0 => grp_obj_detector_flatten_fu_540_inp_4_address0,
        inp_4_ce0 => grp_obj_detector_flatten_fu_540_inp_4_ce0,
        inp_4_q0 => grp_obj_detector_flatten_fu_540_inp_4_q0,
        inp_4_address1 => grp_obj_detector_flatten_fu_540_inp_4_address1,
        inp_4_ce1 => grp_obj_detector_flatten_fu_540_inp_4_ce1,
        inp_4_q1 => grp_obj_detector_flatten_fu_540_inp_4_q1,
        inp_5_address0 => grp_obj_detector_flatten_fu_540_inp_5_address0,
        inp_5_ce0 => grp_obj_detector_flatten_fu_540_inp_5_ce0,
        inp_5_q0 => grp_obj_detector_flatten_fu_540_inp_5_q0,
        inp_5_address1 => grp_obj_detector_flatten_fu_540_inp_5_address1,
        inp_5_ce1 => grp_obj_detector_flatten_fu_540_inp_5_ce1,
        inp_5_q1 => grp_obj_detector_flatten_fu_540_inp_5_q1,
        inp_6_address0 => grp_obj_detector_flatten_fu_540_inp_6_address0,
        inp_6_ce0 => grp_obj_detector_flatten_fu_540_inp_6_ce0,
        inp_6_q0 => grp_obj_detector_flatten_fu_540_inp_6_q0,
        inp_6_address1 => grp_obj_detector_flatten_fu_540_inp_6_address1,
        inp_6_ce1 => grp_obj_detector_flatten_fu_540_inp_6_ce1,
        inp_6_q1 => grp_obj_detector_flatten_fu_540_inp_6_q1,
        inp_7_address0 => grp_obj_detector_flatten_fu_540_inp_7_address0,
        inp_7_ce0 => grp_obj_detector_flatten_fu_540_inp_7_ce0,
        inp_7_q0 => grp_obj_detector_flatten_fu_540_inp_7_q0,
        inp_7_address1 => grp_obj_detector_flatten_fu_540_inp_7_address1,
        inp_7_ce1 => grp_obj_detector_flatten_fu_540_inp_7_ce1,
        inp_7_q1 => grp_obj_detector_flatten_fu_540_inp_7_q1,
        inp_8_address0 => grp_obj_detector_flatten_fu_540_inp_8_address0,
        inp_8_ce0 => grp_obj_detector_flatten_fu_540_inp_8_ce0,
        inp_8_q0 => grp_obj_detector_flatten_fu_540_inp_8_q0,
        inp_8_address1 => grp_obj_detector_flatten_fu_540_inp_8_address1,
        inp_8_ce1 => grp_obj_detector_flatten_fu_540_inp_8_ce1,
        inp_8_q1 => grp_obj_detector_flatten_fu_540_inp_8_q1,
        inp_9_address0 => grp_obj_detector_flatten_fu_540_inp_9_address0,
        inp_9_ce0 => grp_obj_detector_flatten_fu_540_inp_9_ce0,
        inp_9_q0 => grp_obj_detector_flatten_fu_540_inp_9_q0,
        inp_9_address1 => grp_obj_detector_flatten_fu_540_inp_9_address1,
        inp_9_ce1 => grp_obj_detector_flatten_fu_540_inp_9_ce1,
        inp_9_q1 => grp_obj_detector_flatten_fu_540_inp_9_q1,
        inp_10_address0 => grp_obj_detector_flatten_fu_540_inp_10_address0,
        inp_10_ce0 => grp_obj_detector_flatten_fu_540_inp_10_ce0,
        inp_10_q0 => grp_obj_detector_flatten_fu_540_inp_10_q0,
        inp_10_address1 => grp_obj_detector_flatten_fu_540_inp_10_address1,
        inp_10_ce1 => grp_obj_detector_flatten_fu_540_inp_10_ce1,
        inp_10_q1 => grp_obj_detector_flatten_fu_540_inp_10_q1,
        inp_11_address0 => grp_obj_detector_flatten_fu_540_inp_11_address0,
        inp_11_ce0 => grp_obj_detector_flatten_fu_540_inp_11_ce0,
        inp_11_q0 => grp_obj_detector_flatten_fu_540_inp_11_q0,
        inp_11_address1 => grp_obj_detector_flatten_fu_540_inp_11_address1,
        inp_11_ce1 => grp_obj_detector_flatten_fu_540_inp_11_ce1,
        inp_11_q1 => grp_obj_detector_flatten_fu_540_inp_11_q1,
        out_r_address0 => grp_obj_detector_flatten_fu_540_out_r_address0,
        out_r_ce0 => grp_obj_detector_flatten_fu_540_out_r_ce0,
        out_r_we0 => grp_obj_detector_flatten_fu_540_out_r_we0,
        out_r_d0 => grp_obj_detector_flatten_fu_540_out_r_d0,
        out_r_address1 => grp_obj_detector_flatten_fu_540_out_r_address1,
        out_r_ce1 => grp_obj_detector_flatten_fu_540_out_r_ce1,
        out_r_we1 => grp_obj_detector_flatten_fu_540_out_r_we1,
        out_r_d1 => grp_obj_detector_flatten_fu_540_out_r_d1);

    grp_obj_detector_maxpool_fu_557 : component obj_detector_maxpool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_obj_detector_maxpool_fu_557_ap_start,
        ap_done => grp_obj_detector_maxpool_fu_557_ap_done,
        ap_idle => grp_obj_detector_maxpool_fu_557_ap_idle,
        ap_ready => grp_obj_detector_maxpool_fu_557_ap_ready,
        inp_address0 => grp_obj_detector_maxpool_fu_557_inp_address0,
        inp_ce0 => grp_obj_detector_maxpool_fu_557_inp_ce0,
        inp_q0 => grp_obj_detector_maxpool_fu_557_inp_q0,
        inp_address1 => grp_obj_detector_maxpool_fu_557_inp_address1,
        inp_ce1 => grp_obj_detector_maxpool_fu_557_inp_ce1,
        inp_q1 => grp_obj_detector_maxpool_fu_557_inp_q1,
        tmp_24 => grp_obj_detector_maxpool_fu_557_tmp_24,
        out_0_address0 => grp_obj_detector_maxpool_fu_557_out_0_address0,
        out_0_ce0 => grp_obj_detector_maxpool_fu_557_out_0_ce0,
        out_0_we0 => grp_obj_detector_maxpool_fu_557_out_0_we0,
        out_0_d0 => grp_obj_detector_maxpool_fu_557_out_0_d0,
        out_1_address0 => grp_obj_detector_maxpool_fu_557_out_1_address0,
        out_1_ce0 => grp_obj_detector_maxpool_fu_557_out_1_ce0,
        out_1_we0 => grp_obj_detector_maxpool_fu_557_out_1_we0,
        out_1_d0 => grp_obj_detector_maxpool_fu_557_out_1_d0,
        out_2_address0 => grp_obj_detector_maxpool_fu_557_out_2_address0,
        out_2_ce0 => grp_obj_detector_maxpool_fu_557_out_2_ce0,
        out_2_we0 => grp_obj_detector_maxpool_fu_557_out_2_we0,
        out_2_d0 => grp_obj_detector_maxpool_fu_557_out_2_d0,
        out_3_address0 => grp_obj_detector_maxpool_fu_557_out_3_address0,
        out_3_ce0 => grp_obj_detector_maxpool_fu_557_out_3_ce0,
        out_3_we0 => grp_obj_detector_maxpool_fu_557_out_3_we0,
        out_3_d0 => grp_obj_detector_maxpool_fu_557_out_3_d0,
        out_4_address0 => grp_obj_detector_maxpool_fu_557_out_4_address0,
        out_4_ce0 => grp_obj_detector_maxpool_fu_557_out_4_ce0,
        out_4_we0 => grp_obj_detector_maxpool_fu_557_out_4_we0,
        out_4_d0 => grp_obj_detector_maxpool_fu_557_out_4_d0,
        out_5_address0 => grp_obj_detector_maxpool_fu_557_out_5_address0,
        out_5_ce0 => grp_obj_detector_maxpool_fu_557_out_5_ce0,
        out_5_we0 => grp_obj_detector_maxpool_fu_557_out_5_we0,
        out_5_d0 => grp_obj_detector_maxpool_fu_557_out_5_d0,
        out_6_address0 => grp_obj_detector_maxpool_fu_557_out_6_address0,
        out_6_ce0 => grp_obj_detector_maxpool_fu_557_out_6_ce0,
        out_6_we0 => grp_obj_detector_maxpool_fu_557_out_6_we0,
        out_6_d0 => grp_obj_detector_maxpool_fu_557_out_6_d0,
        out_7_address0 => grp_obj_detector_maxpool_fu_557_out_7_address0,
        out_7_ce0 => grp_obj_detector_maxpool_fu_557_out_7_ce0,
        out_7_we0 => grp_obj_detector_maxpool_fu_557_out_7_we0,
        out_7_d0 => grp_obj_detector_maxpool_fu_557_out_7_d0,
        out_8_address0 => grp_obj_detector_maxpool_fu_557_out_8_address0,
        out_8_ce0 => grp_obj_detector_maxpool_fu_557_out_8_ce0,
        out_8_we0 => grp_obj_detector_maxpool_fu_557_out_8_we0,
        out_8_d0 => grp_obj_detector_maxpool_fu_557_out_8_d0,
        out_9_address0 => grp_obj_detector_maxpool_fu_557_out_9_address0,
        out_9_ce0 => grp_obj_detector_maxpool_fu_557_out_9_ce0,
        out_9_we0 => grp_obj_detector_maxpool_fu_557_out_9_we0,
        out_9_d0 => grp_obj_detector_maxpool_fu_557_out_9_d0,
        out_10_address0 => grp_obj_detector_maxpool_fu_557_out_10_address0,
        out_10_ce0 => grp_obj_detector_maxpool_fu_557_out_10_ce0,
        out_10_we0 => grp_obj_detector_maxpool_fu_557_out_10_we0,
        out_10_d0 => grp_obj_detector_maxpool_fu_557_out_10_d0,
        out_11_address0 => grp_obj_detector_maxpool_fu_557_out_11_address0,
        out_11_ce0 => grp_obj_detector_maxpool_fu_557_out_11_ce0,
        out_11_we0 => grp_obj_detector_maxpool_fu_557_out_11_we0,
        out_11_d0 => grp_obj_detector_maxpool_fu_557_out_11_d0,
        tmp_241 => grp_obj_detector_maxpool_fu_557_tmp_241);

    grp_obj_detector_ReLU_fu_578 : component obj_detector_ReLU
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_obj_detector_ReLU_fu_578_ap_start,
        ap_done => grp_obj_detector_ReLU_fu_578_ap_done,
        ap_idle => grp_obj_detector_ReLU_fu_578_ap_idle,
        ap_ready => grp_obj_detector_ReLU_fu_578_ap_ready,
        inp_address0 => grp_obj_detector_ReLU_fu_578_inp_address0,
        inp_ce0 => grp_obj_detector_ReLU_fu_578_inp_ce0,
        inp_q0 => grp_obj_detector_ReLU_fu_578_inp_q0,
        tmp_21 => grp_obj_detector_ReLU_fu_578_tmp_21,
        out_r_address0 => grp_obj_detector_ReLU_fu_578_out_r_address0,
        out_r_ce0 => grp_obj_detector_ReLU_fu_578_out_r_ce0,
        out_r_we0 => grp_obj_detector_ReLU_fu_578_out_r_we0,
        out_r_d0 => grp_obj_detector_ReLU_fu_578_out_r_d0,
        tmp_211 => grp_obj_detector_ReLU_fu_578_tmp_211);

    obj_detector_fadd_32ns_32ns_32_5_full_dsp_U73 : component obj_detector_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_588_p0,
        din1 => grp_fu_588_p1,
        ce => grp_fu_588_ce,
        dout => grp_fu_588_p2);

    obj_detector_fmul_32ns_32ns_32_4_max_dsp_U74 : component obj_detector_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_594_p0,
        din1 => grp_fu_594_p1,
        ce => grp_fu_594_ce,
        dout => grp_fu_594_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_HP0_ARREADY assign process. --
    ap_reg_ioackin_HP0_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_HP0_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_HP0_ARREADY))) then 
                        ap_reg_ioackin_HP0_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = HP0_ARREADY)) then 
                        ap_reg_ioackin_HP0_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_HP1_ARREADY assign process. --
    ap_reg_ioackin_HP1_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_HP1_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_8)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_HP1_ARREADY))) then 
                        ap_reg_ioackin_HP1_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = HP1_ARREADY)) then 
                        ap_reg_ioackin_HP1_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_HP2_ARREADY assign process. --
    ap_reg_ioackin_HP2_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_HP2_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_15)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_HP2_ARREADY))) then 
                        ap_reg_ioackin_HP2_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = HP2_ARREADY)) then 
                        ap_reg_ioackin_HP2_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_HP3_AWREADY assign process. --
    ap_reg_ioackin_HP3_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_HP3_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_40)) then
                    if (not(((ap_const_logic_0 = ap_sig_ioackin_HP3_AWREADY) or (ap_const_logic_0 = grp_obj_detector_softmax_fu_532_ap_done)))) then 
                        ap_reg_ioackin_HP3_AWREADY <= ap_const_logic_0;
                    elsif (ap_sig_bdd_1925) then 
                        ap_reg_ioackin_HP3_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_HP3_WREADY assign process. --
    ap_reg_ioackin_HP3_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_HP3_WREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_1595) then
                    if (not(((ap_const_lv1_0 = exitcond6_reg_1029) and (ap_const_logic_0 = ap_sig_ioackin_HP3_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1)))) then 
                        ap_reg_ioackin_HP3_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = HP3_WREADY)) then 
                        ap_reg_ioackin_HP3_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_665_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond4_fu_665_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_665_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_14) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_fu_692_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_13)) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_14) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond3_fu_692_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_13) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_14) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_fu_692_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_13)) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_21) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_lv1_0 = exitcond5_fu_719_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_21) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and (ap_const_lv1_0 = exitcond5_fu_719_p2))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_21) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_lv1_0 = exitcond5_fu_719_p2))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) then 
                    ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
                    ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it0 assign process. --
    ap_reg_ppiten_pp3_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29) and not((ap_const_lv1_0 = exitcond_i_fu_772_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28) and not((ap_const_logic_0 = grp_obj_detector_flatten_fu_540_ap_done)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it1 assign process. --
    ap_reg_ppiten_pp3_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_i_reg_966) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_33))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28) and not((ap_const_logic_0 = grp_obj_detector_flatten_fu_540_ap_done))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_33) and not((ap_const_lv1_0 = exitcond_i_reg_966))))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it0 assign process. --
    ap_reg_ppiten_pp4_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp4_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_34) and not((ap_const_lv1_0 = exitcond_i1_fu_790_p2)))) then 
                    ap_reg_ppiten_pp4_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29) and not((ap_const_lv1_0 = exitcond_i_fu_772_p2)))) then 
                    ap_reg_ppiten_pp4_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it1 assign process. --
    ap_reg_ppiten_pp4_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp4_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_i1_reg_990) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg4_fsm_38))) then 
                    ap_reg_ppiten_pp4_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29) and not((ap_const_lv1_0 = exitcond_i_fu_772_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg4_fsm_38) and not((ap_const_lv1_0 = exitcond_i1_reg_990))))) then 
                    ap_reg_ppiten_pp4_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp5_it0 assign process. --
    ap_reg_ppiten_pp5_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp5_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_41) and not(((ap_const_lv1_0 = exitcond6_reg_1029) and (ap_const_logic_0 = ap_sig_ioackin_HP3_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) and not((ap_const_lv1_0 = exitcond6_fu_840_p2)))) then 
                    ap_reg_ppiten_pp5_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_40) and not(((ap_const_logic_0 = ap_sig_ioackin_HP3_AWREADY) or (ap_const_logic_0 = grp_obj_detector_softmax_fu_532_ap_done))))) then 
                    ap_reg_ppiten_pp5_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp5_it1 assign process. --
    ap_reg_ppiten_pp5_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp5_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_41) and not(((ap_const_lv1_0 = exitcond6_reg_1029) and (ap_const_logic_0 = ap_sig_ioackin_HP3_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) and (ap_const_lv1_0 = exitcond6_fu_840_p2))) then 
                    ap_reg_ppiten_pp5_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_40) and not(((ap_const_logic_0 = ap_sig_ioackin_HP3_AWREADY) or (ap_const_logic_0 = grp_obj_detector_softmax_fu_532_ap_done)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_41) and not(((ap_const_lv1_0 = exitcond6_reg_1029) and (ap_const_logic_0 = ap_sig_ioackin_HP3_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) and not((ap_const_lv1_0 = exitcond6_fu_840_p2))))) then 
                    ap_reg_ppiten_pp5_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_obj_detector_ReLU_fu_578_ap_start_ap_start_reg assign process. --
    grp_obj_detector_ReLU_fu_578_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_obj_detector_ReLU_fu_578_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_24) and (ap_const_lv1_0 = exitcond1_fu_748_p2))) then 
                    grp_obj_detector_ReLU_fu_578_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_obj_detector_ReLU_fu_578_ap_ready)) then 
                    grp_obj_detector_ReLU_fu_578_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_obj_detector_convolve_fu_521_ap_start_ap_start_reg assign process. --
    grp_obj_detector_convolve_fu_521_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_obj_detector_convolve_fu_521_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_22) and (ap_const_lv1_0 = exitcond2_fu_736_p2))) then 
                    grp_obj_detector_convolve_fu_521_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_obj_detector_convolve_fu_521_ap_ready)) then 
                    grp_obj_detector_convolve_fu_521_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_obj_detector_flatten_fu_540_ap_start_ap_start_reg assign process. --
    grp_obj_detector_flatten_fu_540_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_obj_detector_flatten_fu_540_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_26) and not((ap_const_lv1_0 = exitcond_fu_760_p2)))) then 
                    grp_obj_detector_flatten_fu_540_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_obj_detector_flatten_fu_540_ap_ready)) then 
                    grp_obj_detector_flatten_fu_540_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_obj_detector_maxpool_fu_557_ap_start_ap_start_reg assign process. --
    grp_obj_detector_maxpool_fu_557_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_obj_detector_maxpool_fu_557_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_26) and (ap_const_lv1_0 = exitcond_fu_760_p2))) then 
                    grp_obj_detector_maxpool_fu_557_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_obj_detector_maxpool_fu_557_ap_ready)) then 
                    grp_obj_detector_maxpool_fu_557_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_obj_detector_softmax_fu_532_ap_start_ap_start_reg assign process. --
    grp_obj_detector_softmax_fu_532_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_obj_detector_softmax_fu_532_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_39)) then 
                    grp_obj_detector_softmax_fu_532_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_obj_detector_softmax_fu_532_ap_ready)) then 
                    grp_obj_detector_softmax_fu_532_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- cost_0_reg_464 assign process. --
    cost_0_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_33) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_966_pp3_it1))) then 
                cost_0_reg_464 <= grp_fu_588_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28) and not((ap_const_logic_0 = grp_obj_detector_flatten_fu_540_ap_done)))) then 
                cost_0_reg_464 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- cost_1_reg_487 assign process. --
    cost_1_reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29) and not((ap_const_lv1_0 = exitcond_i_fu_772_p2)))) then 
                cost_1_reg_487 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg4_fsm_38) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i1_reg_990_pp4_it1))) then 
                cost_1_reg_487 <= grp_fu_588_p2;
            end if; 
        end if;
    end process;

    -- i1_reg_440 assign process. --
    i1_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_22) and not((ap_const_lv1_0 = exitcond2_fu_736_p2)))) then 
                i1_reg_440 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_25) and not((ap_const_logic_0 = grp_obj_detector_ReLU_fu_578_ap_done)))) then 
                i1_reg_440 <= i_2_reg_953;
            end if; 
        end if;
    end process;

    -- i2_reg_452 assign process. --
    i2_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_24) and not((ap_const_lv1_0 = exitcond1_fu_748_p2)))) then 
                i2_reg_452 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27) and not((ap_const_logic_0 = grp_obj_detector_maxpool_fu_557_ap_done)))) then 
                i2_reg_452 <= i_3_reg_961;
            end if; 
        end if;
    end process;

    -- i_i1_reg_499 assign process. --
    i_i1_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29) and not((ap_const_lv1_0 = exitcond_i_fu_772_p2)))) then 
                i_i1_reg_499 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = exitcond_i1_reg_990) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_34))) then 
                i_i1_reg_499 <= i_5_reg_994;
            end if; 
        end if;
    end process;

    -- i_i_reg_476 assign process. --
    i_i_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_i_reg_966) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29))) then 
                i_i_reg_476 <= i_4_reg_970;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28) and not((ap_const_logic_0 = grp_obj_detector_flatten_fu_540_ap_done)))) then 
                i_i_reg_476 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- i_reg_428 assign process. --
    i_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_lv1_0 = exitcond5_fu_719_p2)))) then 
                i_reg_428 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_23) and not((ap_const_logic_0 = grp_obj_detector_convolve_fu_521_ap_done)))) then 
                i_reg_428 <= i_1_reg_945;
            end if; 
        end if;
    end process;

    -- indvar1_reg_404 assign process. --
    indvar1_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_13)) then 
                indvar1_reg_404 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_14) and (ap_const_lv1_0 = exitcond3_reg_908) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                indvar1_reg_404 <= indvar_next1_reg_912;
            end if; 
        end if;
    end process;

    -- indvar2_reg_416 assign process. --
    indvar2_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
                indvar2_reg_416 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_21) and (ap_const_lv1_0 = exitcond5_reg_928) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then 
                indvar2_reg_416 <= indvar_next2_reg_932;
            end if; 
        end if;
    end process;

    -- indvar3_reg_510 assign process. --
    indvar3_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_41) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not(((ap_const_lv1_0 = exitcond6_reg_1029) and (ap_const_logic_0 = ap_sig_ioackin_HP3_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) and (ap_const_lv1_0 = exitcond6_fu_840_p2))) then 
                indvar3_reg_510 <= indvar_next3_fu_846_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_40) and not(((ap_const_logic_0 = ap_sig_ioackin_HP3_AWREADY) or (ap_const_logic_0 = grp_obj_detector_softmax_fu_532_ap_done))))) then 
                indvar3_reg_510 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- indvar_reg_392 assign process. --
    indvar_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and (exitcond4_reg_888 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                indvar_reg_392 <= indvar_next_reg_892;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                indvar_reg_392 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and (exitcond4_reg_888 = ap_const_lv1_0) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                HP0_addr_read_reg_897 <= HP0_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_14) and (ap_const_lv1_0 = exitcond3_reg_908) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                HP1_addr_read_reg_917 <= HP1_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_21) and (ap_const_lv1_0 = exitcond5_reg_928) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                HP2_addr_read_reg_937 <= HP2_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_14) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                ap_reg_ppstg_exitcond3_reg_908_pp1_it1 <= exitcond3_reg_908;
                ap_reg_ppstg_indvar1_reg_404_pp1_it1 <= indvar1_reg_404;
                exitcond3_reg_908 <= exitcond3_fu_692_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond4_reg_888_pp0_it1 <= exitcond4_reg_888;
                ap_reg_ppstg_indvar_reg_392_pp0_it1 <= indvar_reg_392;
                exitcond4_reg_888 <= exitcond4_fu_665_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_21) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                ap_reg_ppstg_exitcond5_reg_928_pp2_it1 <= exitcond5_reg_928;
                ap_reg_ppstg_indvar2_reg_416_pp2_it1 <= indvar2_reg_416;
                exitcond5_reg_928 <= exitcond5_fu_719_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_34)) then
                ap_reg_ppstg_exitcond_i1_reg_990_pp4_it1 <= exitcond_i1_reg_990;
                exitcond_i1_reg_990 <= exitcond_i1_fu_790_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29)) then
                ap_reg_ppstg_exitcond_i_reg_966_pp3_it1 <= exitcond_i_reg_966;
                exitcond_i_reg_966 <= exitcond_i_fu_772_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_41) and not(((ap_const_lv1_0 = exitcond6_reg_1029) and (ap_const_logic_0 = ap_sig_ioackin_HP3_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))))) then
                exitcond6_reg_1029 <= exitcond6_fu_840_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_22)) then
                i_1_reg_945 <= i_1_fu_742_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_24)) then
                i_2_reg_953 <= i_2_fu_754_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_26)) then
                i_3_reg_961 <= i_3_fu_766_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29))) then
                i_4_reg_970 <= i_4_fu_778_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_34))) then
                i_5_reg_994 <= i_5_fu_796_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_14) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                indvar_next1_reg_912 <= indvar_next1_fu_698_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                indvar_next2_reg_932 <= indvar_next2_fu_725_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                indvar_next_reg_892 <= indvar_next_fu_671_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_40) and not(((ap_const_logic_0 = ap_sig_ioackin_HP3_AWREADY) or (ap_const_logic_0 = grp_obj_detector_softmax_fu_532_ap_done))))) then
                local_res_0_reg_1014 <= grp_obj_detector_softmax_fu_532_ap_return_0;
                local_res_1_reg_1019 <= grp_obj_detector_softmax_fu_532_ap_return_1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_41) and not(((ap_const_lv1_0 = exitcond6_reg_1029) and (ap_const_logic_0 = ap_sig_ioackin_HP3_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) and (ap_const_lv1_0 = exitcond6_fu_840_p2))) then
                local_res_load_phi_reg_1038 <= local_res_load_phi_fu_856_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = exitcond_i_reg_966) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_33)) or ((ap_const_lv1_0 = exitcond_i1_reg_990) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg4_fsm_38)))) then
                reg_610 <= grp_fu_594_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_36_reg_867 <= W1(31 downto 2);
                tmp_37_reg_872 <= W0(31 downto 2);
                tmp_38_reg_877 <= A(31 downto 2);
                tmp_reg_862 <= res(31 downto 2);
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, HP3_BVALID, ap_reg_ppiten_pp0_it0, ap_sig_bdd_640, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp1_it0, ap_sig_bdd_664, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ppiten_pp2_it0, ap_sig_bdd_688, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it2, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp4_it0, ap_reg_ppiten_pp4_it1, ap_sig_cseq_ST_pp3_stg4_fsm_33, ap_sig_cseq_ST_pp4_stg4_fsm_38, ap_sig_ioackin_HP0_ARREADY, exitcond4_fu_665_p2, ap_sig_ioackin_HP1_ARREADY, exitcond3_fu_692_p2, ap_sig_ioackin_HP2_ARREADY, exitcond5_fu_719_p2, exitcond_i_fu_772_p2, exitcond_i1_fu_790_p2, ap_sig_ioackin_HP3_AWREADY, grp_obj_detector_softmax_fu_532_ap_done, exitcond6_fu_840_p2, exitcond6_reg_1029, ap_reg_ppiten_pp5_it0, ap_sig_ioackin_HP3_WREADY, ap_reg_ppiten_pp5_it1, grp_obj_detector_flatten_fu_540_ap_done, grp_obj_detector_convolve_fu_521_ap_done, grp_obj_detector_maxpool_fu_557_ap_done, grp_obj_detector_ReLU_fu_578_ap_done, exitcond2_fu_736_p2, exitcond1_fu_748_p2, exitcond_fu_760_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_HP0_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_7;
            when ap_ST_pp0_stg0_fsm_7 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_665_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_7;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_665_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_7;
                end if;
            when ap_ST_st11_fsm_8 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_HP1_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_8;
                end if;
            when ap_ST_st12_fsm_9 => 
                ap_NS_fsm <= ap_ST_st13_fsm_10;
            when ap_ST_st13_fsm_10 => 
                ap_NS_fsm <= ap_ST_st14_fsm_11;
            when ap_ST_st14_fsm_11 => 
                ap_NS_fsm <= ap_ST_st15_fsm_12;
            when ap_ST_st15_fsm_12 => 
                ap_NS_fsm <= ap_ST_st16_fsm_13;
            when ap_ST_st16_fsm_13 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_14;
            when ap_ST_pp1_stg0_fsm_14 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_fu_692_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_14;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_fu_692_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_14;
                end if;
            when ap_ST_st20_fsm_15 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_HP2_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_15;
                end if;
            when ap_ST_st21_fsm_16 => 
                ap_NS_fsm <= ap_ST_st22_fsm_17;
            when ap_ST_st22_fsm_17 => 
                ap_NS_fsm <= ap_ST_st23_fsm_18;
            when ap_ST_st23_fsm_18 => 
                ap_NS_fsm <= ap_ST_st24_fsm_19;
            when ap_ST_st24_fsm_19 => 
                ap_NS_fsm <= ap_ST_st25_fsm_20;
            when ap_ST_st25_fsm_20 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_21;
            when ap_ST_pp2_stg0_fsm_21 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_lv1_0 = exitcond5_fu_719_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_21;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_lv1_0 = exitcond5_fu_719_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_21;
                end if;
            when ap_ST_st29_fsm_22 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_736_p2))) then
                    ap_NS_fsm <= ap_ST_st31_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st30_fsm_23;
                end if;
            when ap_ST_st30_fsm_23 => 
                if (not((ap_const_logic_0 = grp_obj_detector_convolve_fu_521_ap_done))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st30_fsm_23;
                end if;
            when ap_ST_st31_fsm_24 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_748_p2))) then
                    ap_NS_fsm <= ap_ST_st33_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_25;
                end if;
            when ap_ST_st32_fsm_25 => 
                if (not((ap_const_logic_0 = grp_obj_detector_ReLU_fu_578_ap_done))) then
                    ap_NS_fsm <= ap_ST_st31_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_25;
                end if;
            when ap_ST_st33_fsm_26 => 
                if (not((ap_const_lv1_0 = exitcond_fu_760_p2))) then
                    ap_NS_fsm <= ap_ST_st35_fsm_28;
                else
                    ap_NS_fsm <= ap_ST_st34_fsm_27;
                end if;
            when ap_ST_st34_fsm_27 => 
                if (not((ap_const_logic_0 = grp_obj_detector_maxpool_fu_557_ap_done))) then
                    ap_NS_fsm <= ap_ST_st33_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st34_fsm_27;
                end if;
            when ap_ST_st35_fsm_28 => 
                if (not((ap_const_logic_0 = grp_obj_detector_flatten_fu_540_ap_done))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_29;
                else
                    ap_NS_fsm <= ap_ST_st35_fsm_28;
                end if;
            when ap_ST_pp3_stg0_fsm_29 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_const_lv1_0 = exitcond_i_fu_772_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg1_fsm_30;
                else
                    ap_NS_fsm <= ap_ST_pp4_stg0_fsm_34;
                end if;
            when ap_ST_pp3_stg1_fsm_30 => 
                ap_NS_fsm <= ap_ST_pp3_stg2_fsm_31;
            when ap_ST_pp3_stg2_fsm_31 => 
                ap_NS_fsm <= ap_ST_pp3_stg3_fsm_32;
            when ap_ST_pp3_stg3_fsm_32 => 
                ap_NS_fsm <= ap_ST_pp3_stg4_fsm_33;
            when ap_ST_pp3_stg4_fsm_33 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_33) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it0))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_29;
                else
                    ap_NS_fsm <= ap_ST_pp4_stg0_fsm_34;
                end if;
            when ap_ST_pp4_stg0_fsm_34 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and not((ap_const_lv1_0 = exitcond_i1_fu_790_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp4_it1))))) then
                    ap_NS_fsm <= ap_ST_pp4_stg1_fsm_35;
                else
                    ap_NS_fsm <= ap_ST_st56_fsm_39;
                end if;
            when ap_ST_pp4_stg1_fsm_35 => 
                ap_NS_fsm <= ap_ST_pp4_stg2_fsm_36;
            when ap_ST_pp4_stg2_fsm_36 => 
                ap_NS_fsm <= ap_ST_pp4_stg3_fsm_37;
            when ap_ST_pp4_stg3_fsm_37 => 
                ap_NS_fsm <= ap_ST_pp4_stg4_fsm_38;
            when ap_ST_pp4_stg4_fsm_38 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg4_fsm_38) and not((ap_const_logic_1 = ap_reg_ppiten_pp4_it0))))) then
                    ap_NS_fsm <= ap_ST_pp4_stg0_fsm_34;
                else
                    ap_NS_fsm <= ap_ST_st56_fsm_39;
                end if;
            when ap_ST_st56_fsm_39 => 
                ap_NS_fsm <= ap_ST_st57_fsm_40;
            when ap_ST_st57_fsm_40 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_HP3_AWREADY) or (ap_const_logic_0 = grp_obj_detector_softmax_fu_532_ap_done)))) then
                    ap_NS_fsm <= ap_ST_pp5_stg0_fsm_41;
                else
                    ap_NS_fsm <= ap_ST_st57_fsm_40;
                end if;
            when ap_ST_pp5_stg0_fsm_41 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not(((ap_const_lv1_0 = exitcond6_reg_1029) and (ap_const_logic_0 = ap_sig_ioackin_HP3_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) and not((ap_const_lv1_0 = exitcond6_fu_840_p2))))) then
                    ap_NS_fsm <= ap_ST_pp5_stg0_fsm_41;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not(((ap_const_lv1_0 = exitcond6_reg_1029) and (ap_const_logic_0 = ap_sig_ioackin_HP3_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) and not((ap_const_lv1_0 = exitcond6_fu_840_p2)))) then
                    ap_NS_fsm <= ap_ST_st60_fsm_42;
                else
                    ap_NS_fsm <= ap_ST_pp5_stg0_fsm_41;
                end if;
            when ap_ST_st60_fsm_42 => 
                ap_NS_fsm <= ap_ST_st61_fsm_43;
            when ap_ST_st61_fsm_43 => 
                ap_NS_fsm <= ap_ST_st62_fsm_44;
            when ap_ST_st62_fsm_44 => 
                ap_NS_fsm <= ap_ST_st63_fsm_45;
            when ap_ST_st63_fsm_45 => 
                if (not((HP3_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st63_fsm_45;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    HP0_ARADDR <= tmp_39_fu_655_p1(32 - 1 downto 0);
    HP0_ARBURST <= ap_const_lv2_0;
    HP0_ARCACHE <= ap_const_lv4_0;
    HP0_ARID <= ap_const_lv1_0;
    HP0_ARLEN <= ap_const_lv32_310;
    HP0_ARLOCK <= ap_const_lv2_0;
    HP0_ARPROT <= ap_const_lv3_0;
    HP0_ARQOS <= ap_const_lv4_0;
    HP0_ARREGION <= ap_const_lv4_0;
    HP0_ARSIZE <= ap_const_lv3_0;
    HP0_ARUSER <= ap_const_lv1_0;

    -- HP0_ARVALID assign process. --
    HP0_ARVALID_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_reg_ioackin_HP0_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_0 = ap_reg_ioackin_HP0_ARREADY))) then 
            HP0_ARVALID <= ap_const_logic_1;
        else 
            HP0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    HP0_AWADDR <= ap_const_lv32_0;
    HP0_AWBURST <= ap_const_lv2_0;
    HP0_AWCACHE <= ap_const_lv4_0;
    HP0_AWID <= ap_const_lv1_0;
    HP0_AWLEN <= ap_const_lv32_0;
    HP0_AWLOCK <= ap_const_lv2_0;
    HP0_AWPROT <= ap_const_lv3_0;
    HP0_AWQOS <= ap_const_lv4_0;
    HP0_AWREGION <= ap_const_lv4_0;
    HP0_AWSIZE <= ap_const_lv3_0;
    HP0_AWUSER <= ap_const_lv1_0;
    HP0_AWVALID <= ap_const_logic_0;
    HP0_BREADY <= ap_const_logic_0;

    -- HP0_RREADY assign process. --
    HP0_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_7, exitcond4_reg_888, ap_sig_bdd_640, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and (exitcond4_reg_888 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            HP0_RREADY <= ap_const_logic_1;
        else 
            HP0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    HP0_WDATA <= ap_const_lv32_0;
    HP0_WID <= ap_const_lv1_0;
    HP0_WLAST <= ap_const_logic_0;
    HP0_WSTRB <= ap_const_lv4_0;
    HP0_WUSER <= ap_const_lv1_0;
    HP0_WVALID <= ap_const_logic_0;
    HP1_ARADDR <= tmp_40_fu_682_p1(32 - 1 downto 0);
    HP1_ARBURST <= ap_const_lv2_0;
    HP1_ARCACHE <= ap_const_lv4_0;
    HP1_ARID <= ap_const_lv1_0;
    HP1_ARLEN <= ap_const_lv32_96;
    HP1_ARLOCK <= ap_const_lv2_0;
    HP1_ARPROT <= ap_const_lv3_0;
    HP1_ARQOS <= ap_const_lv4_0;
    HP1_ARREGION <= ap_const_lv4_0;
    HP1_ARSIZE <= ap_const_lv3_0;
    HP1_ARUSER <= ap_const_lv1_0;

    -- HP1_ARVALID assign process. --
    HP1_ARVALID_assign_proc : process(ap_sig_cseq_ST_st11_fsm_8, ap_reg_ioackin_HP1_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_8) and (ap_const_logic_0 = ap_reg_ioackin_HP1_ARREADY))) then 
            HP1_ARVALID <= ap_const_logic_1;
        else 
            HP1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    HP1_AWADDR <= ap_const_lv32_0;
    HP1_AWBURST <= ap_const_lv2_0;
    HP1_AWCACHE <= ap_const_lv4_0;
    HP1_AWID <= ap_const_lv1_0;
    HP1_AWLEN <= ap_const_lv32_0;
    HP1_AWLOCK <= ap_const_lv2_0;
    HP1_AWPROT <= ap_const_lv3_0;
    HP1_AWQOS <= ap_const_lv4_0;
    HP1_AWREGION <= ap_const_lv4_0;
    HP1_AWSIZE <= ap_const_lv3_0;
    HP1_AWUSER <= ap_const_lv1_0;
    HP1_AWVALID <= ap_const_logic_0;
    HP1_BREADY <= ap_const_logic_0;

    -- HP1_RREADY assign process. --
    HP1_RREADY_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_14, exitcond3_reg_908, ap_sig_bdd_664, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_14) and (ap_const_lv1_0 = exitcond3_reg_908) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
            HP1_RREADY <= ap_const_logic_1;
        else 
            HP1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    HP1_WDATA <= ap_const_lv32_0;
    HP1_WID <= ap_const_lv1_0;
    HP1_WLAST <= ap_const_logic_0;
    HP1_WSTRB <= ap_const_lv4_0;
    HP1_WUSER <= ap_const_lv1_0;
    HP1_WVALID <= ap_const_logic_0;
    HP2_ARADDR <= tmp_41_fu_709_p1(32 - 1 downto 0);
    HP2_ARBURST <= ap_const_lv2_0;
    HP2_ARCACHE <= ap_const_lv4_0;
    HP2_ARID <= ap_const_lv1_0;
    HP2_ARLEN <= ap_const_lv32_6C0;
    HP2_ARLOCK <= ap_const_lv2_0;
    HP2_ARPROT <= ap_const_lv3_0;
    HP2_ARQOS <= ap_const_lv4_0;
    HP2_ARREGION <= ap_const_lv4_0;
    HP2_ARSIZE <= ap_const_lv3_0;
    HP2_ARUSER <= ap_const_lv1_0;

    -- HP2_ARVALID assign process. --
    HP2_ARVALID_assign_proc : process(ap_sig_cseq_ST_st20_fsm_15, ap_reg_ioackin_HP2_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_15) and (ap_const_logic_0 = ap_reg_ioackin_HP2_ARREADY))) then 
            HP2_ARVALID <= ap_const_logic_1;
        else 
            HP2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    HP2_AWADDR <= ap_const_lv32_0;
    HP2_AWBURST <= ap_const_lv2_0;
    HP2_AWCACHE <= ap_const_lv4_0;
    HP2_AWID <= ap_const_lv1_0;
    HP2_AWLEN <= ap_const_lv32_0;
    HP2_AWLOCK <= ap_const_lv2_0;
    HP2_AWPROT <= ap_const_lv3_0;
    HP2_AWQOS <= ap_const_lv4_0;
    HP2_AWREGION <= ap_const_lv4_0;
    HP2_AWSIZE <= ap_const_lv3_0;
    HP2_AWUSER <= ap_const_lv1_0;
    HP2_AWVALID <= ap_const_logic_0;
    HP2_BREADY <= ap_const_logic_0;

    -- HP2_RREADY assign process. --
    HP2_RREADY_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_21, exitcond5_reg_928, ap_sig_bdd_688, ap_reg_ppiten_pp2_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_21) and (ap_const_lv1_0 = exitcond5_reg_928) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then 
            HP2_RREADY <= ap_const_logic_1;
        else 
            HP2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    HP2_WDATA <= ap_const_lv32_0;
    HP2_WID <= ap_const_lv1_0;
    HP2_WLAST <= ap_const_logic_0;
    HP2_WSTRB <= ap_const_lv4_0;
    HP2_WUSER <= ap_const_lv1_0;
    HP2_WVALID <= ap_const_logic_0;
    HP3_ARADDR <= ap_const_lv32_0;
    HP3_ARBURST <= ap_const_lv2_0;
    HP3_ARCACHE <= ap_const_lv4_0;
    HP3_ARID <= ap_const_lv1_0;
    HP3_ARLEN <= ap_const_lv32_0;
    HP3_ARLOCK <= ap_const_lv2_0;
    HP3_ARPROT <= ap_const_lv3_0;
    HP3_ARQOS <= ap_const_lv4_0;
    HP3_ARREGION <= ap_const_lv4_0;
    HP3_ARSIZE <= ap_const_lv3_0;
    HP3_ARUSER <= ap_const_lv1_0;
    HP3_ARVALID <= ap_const_logic_0;
    HP3_AWADDR <= tmp_42_fu_830_p1(32 - 1 downto 0);
    HP3_AWBURST <= ap_const_lv2_0;
    HP3_AWCACHE <= ap_const_lv4_0;
    HP3_AWID <= ap_const_lv1_0;
    HP3_AWLEN <= ap_const_lv32_2;
    HP3_AWLOCK <= ap_const_lv2_0;
    HP3_AWPROT <= ap_const_lv3_0;
    HP3_AWQOS <= ap_const_lv4_0;
    HP3_AWREGION <= ap_const_lv4_0;
    HP3_AWSIZE <= ap_const_lv3_0;
    HP3_AWUSER <= ap_const_lv1_0;

    -- HP3_AWVALID assign process. --
    HP3_AWVALID_assign_proc : process(ap_sig_cseq_ST_st57_fsm_40, grp_obj_detector_softmax_fu_532_ap_done, ap_reg_ioackin_HP3_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_40) and not((ap_const_logic_0 = grp_obj_detector_softmax_fu_532_ap_done)) and (ap_const_logic_0 = ap_reg_ioackin_HP3_AWREADY))) then 
            HP3_AWVALID <= ap_const_logic_1;
        else 
            HP3_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- HP3_BREADY assign process. --
    HP3_BREADY_assign_proc : process(HP3_BVALID, ap_sig_cseq_ST_st63_fsm_45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_45) and not((HP3_BVALID = ap_const_logic_0)))) then 
            HP3_BREADY <= ap_const_logic_1;
        else 
            HP3_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    HP3_RREADY <= ap_const_logic_0;
    HP3_WDATA <= local_res_load_phi_reg_1038;
    HP3_WID <= ap_const_lv1_0;
    HP3_WLAST <= ap_const_logic_0;
    HP3_WSTRB <= ap_const_lv4_F;
    HP3_WUSER <= ap_const_lv1_0;

    -- HP3_WVALID assign process. --
    HP3_WVALID_assign_proc : process(exitcond6_reg_1029, ap_sig_cseq_ST_pp5_stg0_fsm_41, ap_reg_ppiten_pp5_it1, ap_reg_ioackin_HP3_WREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_41) and (ap_const_lv1_0 = exitcond6_reg_1029) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1) and (ap_const_logic_0 = ap_reg_ioackin_HP3_WREADY))) then 
            HP3_WVALID <= ap_const_logic_1;
        else 
            HP3_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(HP3_BVALID, ap_sig_cseq_ST_st63_fsm_45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_45) and not((HP3_BVALID = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(HP3_BVALID, ap_sig_cseq_ST_st63_fsm_45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_45) and not((HP3_BVALID = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_1001 assign process. --
    ap_sig_bdd_1001_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1001 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_110 assign process. --
    ap_sig_bdd_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_110 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_1465 assign process. --
    ap_sig_bdd_1465_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1465 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_1479 assign process. --
    ap_sig_bdd_1479_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1479 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_1495 assign process. --
    ap_sig_bdd_1495_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1495 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_1525 assign process. --
    ap_sig_bdd_1525_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1525 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    -- ap_sig_bdd_1595 assign process. --
    ap_sig_bdd_1595_assign_proc : process(exitcond6_reg_1029, ap_sig_cseq_ST_pp5_stg0_fsm_41, ap_reg_ppiten_pp5_it1)
    begin
                ap_sig_bdd_1595 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_41) and (ap_const_lv1_0 = exitcond6_reg_1029) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it1));
    end process;


    -- ap_sig_bdd_1607 assign process. --
    ap_sig_bdd_1607_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1607 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    -- ap_sig_bdd_1925 assign process. --
    ap_sig_bdd_1925_assign_proc : process(HP3_AWREADY, grp_obj_detector_softmax_fu_532_ap_done)
    begin
                ap_sig_bdd_1925 <= ((ap_const_logic_1 = HP3_AWREADY) and not((ap_const_logic_0 = grp_obj_detector_softmax_fu_532_ap_done)));
    end process;


    -- ap_sig_bdd_631 assign process. --
    ap_sig_bdd_631_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_631 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_640 assign process. --
    ap_sig_bdd_640_assign_proc : process(HP0_RVALID, exitcond4_reg_888)
    begin
                ap_sig_bdd_640 <= ((HP0_RVALID = ap_const_logic_0) and (exitcond4_reg_888 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_656 assign process. --
    ap_sig_bdd_656_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_656 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_664 assign process. --
    ap_sig_bdd_664_assign_proc : process(HP1_RVALID, exitcond3_reg_908)
    begin
                ap_sig_bdd_664 <= ((HP1_RVALID = ap_const_logic_0) and (ap_const_lv1_0 = exitcond3_reg_908));
    end process;


    -- ap_sig_bdd_680 assign process. --
    ap_sig_bdd_680_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_680 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_688 assign process. --
    ap_sig_bdd_688_assign_proc : process(HP2_RVALID, exitcond5_reg_928)
    begin
                ap_sig_bdd_688 <= ((HP2_RVALID = ap_const_logic_0) and (ap_const_lv1_0 = exitcond5_reg_928));
    end process;


    -- ap_sig_bdd_713 assign process. --
    ap_sig_bdd_713_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_713 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_727 assign process. --
    ap_sig_bdd_727_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_727 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_746 assign process. --
    ap_sig_bdd_746_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_746 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_754 assign process. --
    ap_sig_bdd_754_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_754 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_776 assign process. --
    ap_sig_bdd_776_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_776 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_799 assign process. --
    ap_sig_bdd_799_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_799 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_822 assign process. --
    ap_sig_bdd_822_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_822 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_845 assign process. --
    ap_sig_bdd_845_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_845 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_854 assign process. --
    ap_sig_bdd_854_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_854 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_863 assign process. --
    ap_sig_bdd_863_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_863 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_871 assign process. --
    ap_sig_bdd_871_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_871 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_895 assign process. --
    ap_sig_bdd_895_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_895 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_919 assign process. --
    ap_sig_bdd_919_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_919 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_939 assign process. --
    ap_sig_bdd_939_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_939 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_965 assign process. --
    ap_sig_bdd_965_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_965 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_977 assign process. --
    ap_sig_bdd_977_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_977 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_989 assign process. --
    ap_sig_bdd_989_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_989 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_7_assign_proc : process(ap_sig_bdd_631)
    begin
        if (ap_sig_bdd_631) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_14 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_14_assign_proc : process(ap_sig_bdd_656)
    begin
        if (ap_sig_bdd_656) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_21 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_21_assign_proc : process(ap_sig_bdd_680)
    begin
        if (ap_sig_bdd_680) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg0_fsm_29 assign process. --
    ap_sig_cseq_ST_pp3_stg0_fsm_29_assign_proc : process(ap_sig_bdd_871)
    begin
        if (ap_sig_bdd_871) then 
            ap_sig_cseq_ST_pp3_stg0_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg0_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg1_fsm_30 assign process. --
    ap_sig_cseq_ST_pp3_stg1_fsm_30_assign_proc : process(ap_sig_bdd_713)
    begin
        if (ap_sig_bdd_713) then 
            ap_sig_cseq_ST_pp3_stg1_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg1_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg4_fsm_33 assign process. --
    ap_sig_cseq_ST_pp3_stg4_fsm_33_assign_proc : process(ap_sig_bdd_746)
    begin
        if (ap_sig_bdd_746) then 
            ap_sig_cseq_ST_pp3_stg4_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg4_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp4_stg0_fsm_34 assign process. --
    ap_sig_cseq_ST_pp4_stg0_fsm_34_assign_proc : process(ap_sig_bdd_895)
    begin
        if (ap_sig_bdd_895) then 
            ap_sig_cseq_ST_pp4_stg0_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp4_stg0_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp4_stg1_fsm_35 assign process. --
    ap_sig_cseq_ST_pp4_stg1_fsm_35_assign_proc : process(ap_sig_bdd_727)
    begin
        if (ap_sig_bdd_727) then 
            ap_sig_cseq_ST_pp4_stg1_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp4_stg1_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp4_stg4_fsm_38 assign process. --
    ap_sig_cseq_ST_pp4_stg4_fsm_38_assign_proc : process(ap_sig_bdd_754)
    begin
        if (ap_sig_bdd_754) then 
            ap_sig_cseq_ST_pp4_stg4_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp4_stg4_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp5_stg0_fsm_41 assign process. --
    ap_sig_cseq_ST_pp5_stg0_fsm_41_assign_proc : process(ap_sig_bdd_939)
    begin
        if (ap_sig_bdd_939) then 
            ap_sig_cseq_ST_pp5_stg0_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp5_stg0_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_8 assign process. --
    ap_sig_cseq_ST_st11_fsm_8_assign_proc : process(ap_sig_bdd_799)
    begin
        if (ap_sig_bdd_799) then 
            ap_sig_cseq_ST_st11_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_13 assign process. --
    ap_sig_cseq_ST_st16_fsm_13_assign_proc : process(ap_sig_bdd_977)
    begin
        if (ap_sig_bdd_977) then 
            ap_sig_cseq_ST_st16_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_110)
    begin
        if (ap_sig_bdd_110) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_15 assign process. --
    ap_sig_cseq_ST_st20_fsm_15_assign_proc : process(ap_sig_bdd_822)
    begin
        if (ap_sig_bdd_822) then 
            ap_sig_cseq_ST_st20_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_20 assign process. --
    ap_sig_cseq_ST_st25_fsm_20_assign_proc : process(ap_sig_bdd_989)
    begin
        if (ap_sig_bdd_989) then 
            ap_sig_cseq_ST_st25_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_22 assign process. --
    ap_sig_cseq_ST_st29_fsm_22_assign_proc : process(ap_sig_bdd_845)
    begin
        if (ap_sig_bdd_845) then 
            ap_sig_cseq_ST_st29_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_776)
    begin
        if (ap_sig_bdd_776) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_23 assign process. --
    ap_sig_cseq_ST_st30_fsm_23_assign_proc : process(ap_sig_bdd_1465)
    begin
        if (ap_sig_bdd_1465) then 
            ap_sig_cseq_ST_st30_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_24 assign process. --
    ap_sig_cseq_ST_st31_fsm_24_assign_proc : process(ap_sig_bdd_854)
    begin
        if (ap_sig_bdd_854) then 
            ap_sig_cseq_ST_st31_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_25 assign process. --
    ap_sig_cseq_ST_st32_fsm_25_assign_proc : process(ap_sig_bdd_1479)
    begin
        if (ap_sig_bdd_1479) then 
            ap_sig_cseq_ST_st32_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_26 assign process. --
    ap_sig_cseq_ST_st33_fsm_26_assign_proc : process(ap_sig_bdd_863)
    begin
        if (ap_sig_bdd_863) then 
            ap_sig_cseq_ST_st33_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_27 assign process. --
    ap_sig_cseq_ST_st34_fsm_27_assign_proc : process(ap_sig_bdd_1495)
    begin
        if (ap_sig_bdd_1495) then 
            ap_sig_cseq_ST_st34_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st35_fsm_28 assign process. --
    ap_sig_cseq_ST_st35_fsm_28_assign_proc : process(ap_sig_bdd_1001)
    begin
        if (ap_sig_bdd_1001) then 
            ap_sig_cseq_ST_st35_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st56_fsm_39 assign process. --
    ap_sig_cseq_ST_st56_fsm_39_assign_proc : process(ap_sig_bdd_1525)
    begin
        if (ap_sig_bdd_1525) then 
            ap_sig_cseq_ST_st56_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st56_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st57_fsm_40 assign process. --
    ap_sig_cseq_ST_st57_fsm_40_assign_proc : process(ap_sig_bdd_919)
    begin
        if (ap_sig_bdd_919) then 
            ap_sig_cseq_ST_st57_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st57_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st63_fsm_45 assign process. --
    ap_sig_cseq_ST_st63_fsm_45_assign_proc : process(ap_sig_bdd_1607)
    begin
        if (ap_sig_bdd_1607) then 
            ap_sig_cseq_ST_st63_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st63_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_965)
    begin
        if (ap_sig_bdd_965) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_HP0_ARREADY assign process. --
    ap_sig_ioackin_HP0_ARREADY_assign_proc : process(HP0_ARREADY, ap_reg_ioackin_HP0_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_HP0_ARREADY)) then 
            ap_sig_ioackin_HP0_ARREADY <= HP0_ARREADY;
        else 
            ap_sig_ioackin_HP0_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_HP1_ARREADY assign process. --
    ap_sig_ioackin_HP1_ARREADY_assign_proc : process(HP1_ARREADY, ap_reg_ioackin_HP1_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_HP1_ARREADY)) then 
            ap_sig_ioackin_HP1_ARREADY <= HP1_ARREADY;
        else 
            ap_sig_ioackin_HP1_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_HP2_ARREADY assign process. --
    ap_sig_ioackin_HP2_ARREADY_assign_proc : process(HP2_ARREADY, ap_reg_ioackin_HP2_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_HP2_ARREADY)) then 
            ap_sig_ioackin_HP2_ARREADY <= HP2_ARREADY;
        else 
            ap_sig_ioackin_HP2_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_HP3_AWREADY assign process. --
    ap_sig_ioackin_HP3_AWREADY_assign_proc : process(HP3_AWREADY, ap_reg_ioackin_HP3_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_HP3_AWREADY)) then 
            ap_sig_ioackin_HP3_AWREADY <= HP3_AWREADY;
        else 
            ap_sig_ioackin_HP3_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_HP3_WREADY assign process. --
    ap_sig_ioackin_HP3_WREADY_assign_proc : process(HP3_WREADY, ap_reg_ioackin_HP3_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_HP3_WREADY)) then 
            ap_sig_ioackin_HP3_WREADY <= HP3_WREADY;
        else 
            ap_sig_ioackin_HP3_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond1_fu_748_p2 <= "1" when (i1_reg_440 = ap_const_lv3_6) else "0";
    exitcond2_fu_736_p2 <= "1" when (i_reg_428 = ap_const_lv3_6) else "0";
    exitcond3_fu_692_p2 <= "1" when (indvar1_phi_fu_408_p4 = ap_const_lv8_96) else "0";
    exitcond4_fu_665_p2 <= "1" when (indvar_phi_fu_396_p4 = ap_const_lv10_310) else "0";
    exitcond5_fu_719_p2 <= "1" when (indvar2_phi_fu_420_p4 = ap_const_lv11_6C0) else "0";
    exitcond6_fu_840_p2 <= "1" when (indvar3_reg_510 = ap_const_lv2_2) else "0";
    exitcond_fu_760_p2 <= "1" when (i2_reg_452 = ap_const_lv3_6) else "0";
    exitcond_i1_fu_790_p2 <= "1" when (i_i1_phi_fu_503_p4 = ap_const_lv10_360) else "0";
    exitcond_i_fu_772_p2 <= "1" when (i_i_phi_fu_480_p4 = ap_const_lv10_360) else "0";
    grp_fu_588_ce <= ap_const_logic_1;

    -- grp_fu_588_p0 assign process. --
    grp_fu_588_p0_assign_proc : process(cost_0_reg_464, cost_1_reg_487, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp4_it1, ap_sig_cseq_ST_pp3_stg0_fsm_29, ap_sig_cseq_ST_pp4_stg0_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_34))) then 
            grp_fu_588_p0 <= cost_1_reg_487;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29))) then 
            grp_fu_588_p0 <= cost_0_reg_464;
        else 
            grp_fu_588_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_588_p1 <= reg_610;
    grp_fu_594_ce <= ap_const_logic_1;
    grp_fu_594_p0 <= s3_q0;
    grp_fu_594_p1 <= local_W1_q0;
    grp_obj_detector_ReLU_fu_578_ap_start <= grp_obj_detector_ReLU_fu_578_ap_start_ap_start_reg;
    grp_obj_detector_ReLU_fu_578_inp_q0 <= s0_q0;
    grp_obj_detector_ReLU_fu_578_tmp_21 <= i1_reg_440;
    grp_obj_detector_ReLU_fu_578_tmp_211 <= i1_reg_440;
    grp_obj_detector_convolve_fu_521_A_q0 <= local_A_q0;
    grp_obj_detector_convolve_fu_521_A_q1 <= local_A_q1;
    grp_obj_detector_convolve_fu_521_B_q0 <= local_W0_q0;
    grp_obj_detector_convolve_fu_521_B_q1 <= local_W0_q1;
    grp_obj_detector_convolve_fu_521_ap_start <= grp_obj_detector_convolve_fu_521_ap_start_ap_start_reg;
    grp_obj_detector_convolve_fu_521_tmp_20 <= i_reg_428;
    grp_obj_detector_convolve_fu_521_tmp_201 <= i_reg_428;
    grp_obj_detector_flatten_fu_540_ap_start <= grp_obj_detector_flatten_fu_540_ap_start_ap_start_reg;
    grp_obj_detector_flatten_fu_540_inp_0_q0 <= s2_0_q0;
    grp_obj_detector_flatten_fu_540_inp_0_q1 <= s2_0_q1;
    grp_obj_detector_flatten_fu_540_inp_10_q0 <= s2_10_q0;
    grp_obj_detector_flatten_fu_540_inp_10_q1 <= s2_10_q1;
    grp_obj_detector_flatten_fu_540_inp_11_q0 <= s2_11_q0;
    grp_obj_detector_flatten_fu_540_inp_11_q1 <= s2_11_q1;
    grp_obj_detector_flatten_fu_540_inp_1_q0 <= s2_1_q0;
    grp_obj_detector_flatten_fu_540_inp_1_q1 <= s2_1_q1;
    grp_obj_detector_flatten_fu_540_inp_2_q0 <= s2_2_q0;
    grp_obj_detector_flatten_fu_540_inp_2_q1 <= s2_2_q1;
    grp_obj_detector_flatten_fu_540_inp_3_q0 <= s2_3_q0;
    grp_obj_detector_flatten_fu_540_inp_3_q1 <= s2_3_q1;
    grp_obj_detector_flatten_fu_540_inp_4_q0 <= s2_4_q0;
    grp_obj_detector_flatten_fu_540_inp_4_q1 <= s2_4_q1;
    grp_obj_detector_flatten_fu_540_inp_5_q0 <= s2_5_q0;
    grp_obj_detector_flatten_fu_540_inp_5_q1 <= s2_5_q1;
    grp_obj_detector_flatten_fu_540_inp_6_q0 <= s2_6_q0;
    grp_obj_detector_flatten_fu_540_inp_6_q1 <= s2_6_q1;
    grp_obj_detector_flatten_fu_540_inp_7_q0 <= s2_7_q0;
    grp_obj_detector_flatten_fu_540_inp_7_q1 <= s2_7_q1;
    grp_obj_detector_flatten_fu_540_inp_8_q0 <= s2_8_q0;
    grp_obj_detector_flatten_fu_540_inp_8_q1 <= s2_8_q1;
    grp_obj_detector_flatten_fu_540_inp_9_q0 <= s2_9_q0;
    grp_obj_detector_flatten_fu_540_inp_9_q1 <= s2_9_q1;
    grp_obj_detector_maxpool_fu_557_ap_start <= grp_obj_detector_maxpool_fu_557_ap_start_ap_start_reg;
    grp_obj_detector_maxpool_fu_557_inp_q0 <= s1_q0;
    grp_obj_detector_maxpool_fu_557_inp_q1 <= s1_q1;
    grp_obj_detector_maxpool_fu_557_tmp_24 <= i2_reg_452;
    grp_obj_detector_maxpool_fu_557_tmp_241 <= i2_reg_452;
    grp_obj_detector_softmax_fu_532_ap_start <= grp_obj_detector_softmax_fu_532_ap_start_ap_start_reg;
    grp_obj_detector_softmax_fu_532_inp_0_read <= cost_0_reg_464;
    grp_obj_detector_softmax_fu_532_inp_1_read <= cost_1_reg_487;
    i_1_fu_742_p2 <= std_logic_vector(unsigned(i_reg_428) + unsigned(ap_const_lv3_1));
    i_2_fu_754_p2 <= std_logic_vector(unsigned(i1_reg_440) + unsigned(ap_const_lv3_1));
    i_3_fu_766_p2 <= std_logic_vector(unsigned(i2_reg_452) + unsigned(ap_const_lv3_1));
    i_4_fu_778_p2 <= std_logic_vector(unsigned(i_i_phi_fu_480_p4) + unsigned(ap_const_lv10_1));
    i_5_fu_796_p2 <= std_logic_vector(unsigned(i_i1_phi_fu_503_p4) + unsigned(ap_const_lv10_1));

    -- i_i1_phi_fu_503_p4 assign process. --
    i_i1_phi_fu_503_p4_assign_proc : process(i_i1_reg_499, ap_reg_ppiten_pp4_it1, exitcond_i1_reg_990, ap_sig_cseq_ST_pp4_stg0_fsm_34, i_5_reg_994)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and (ap_const_lv1_0 = exitcond_i1_reg_990) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_34))) then 
            i_i1_phi_fu_503_p4 <= i_5_reg_994;
        else 
            i_i1_phi_fu_503_p4 <= i_i1_reg_499;
        end if; 
    end process;


    -- i_i_phi_fu_480_p4 assign process. --
    i_i_phi_fu_480_p4_assign_proc : process(i_i_reg_476, ap_reg_ppiten_pp3_it1, exitcond_i_reg_966, ap_sig_cseq_ST_pp3_stg0_fsm_29, i_4_reg_970)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_i_reg_966) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29))) then 
            i_i_phi_fu_480_p4 <= i_4_reg_970;
        else 
            i_i_phi_fu_480_p4 <= i_i_reg_476;
        end if; 
    end process;


    -- indvar1_phi_fu_408_p4 assign process. --
    indvar1_phi_fu_408_p4_assign_proc : process(indvar1_reg_404, ap_sig_cseq_ST_pp1_stg0_fsm_14, exitcond3_reg_908, ap_reg_ppiten_pp1_it1, indvar_next1_reg_912)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_14) and (ap_const_lv1_0 = exitcond3_reg_908) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            indvar1_phi_fu_408_p4 <= indvar_next1_reg_912;
        else 
            indvar1_phi_fu_408_p4 <= indvar1_reg_404;
        end if; 
    end process;


    -- indvar2_phi_fu_420_p4 assign process. --
    indvar2_phi_fu_420_p4_assign_proc : process(indvar2_reg_416, ap_sig_cseq_ST_pp2_stg0_fsm_21, exitcond5_reg_928, ap_reg_ppiten_pp2_it1, indvar_next2_reg_932)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_21) and (ap_const_lv1_0 = exitcond5_reg_928) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) then 
            indvar2_phi_fu_420_p4 <= indvar_next2_reg_932;
        else 
            indvar2_phi_fu_420_p4 <= indvar2_reg_416;
        end if; 
    end process;

    indvar_next1_fu_698_p2 <= std_logic_vector(unsigned(indvar1_phi_fu_408_p4) + unsigned(ap_const_lv8_1));
    indvar_next2_fu_725_p2 <= std_logic_vector(unsigned(indvar2_phi_fu_420_p4) + unsigned(ap_const_lv11_1));
    indvar_next3_fu_846_p2 <= std_logic_vector(unsigned(indvar3_reg_510) + unsigned(ap_const_lv2_1));
    indvar_next_fu_671_p2 <= std_logic_vector(unsigned(indvar_phi_fu_396_p4) + unsigned(ap_const_lv10_1));

    -- indvar_phi_fu_396_p4 assign process. --
    indvar_phi_fu_396_p4_assign_proc : process(indvar_reg_392, ap_sig_cseq_ST_pp0_stg0_fsm_7, exitcond4_reg_888, ap_reg_ppiten_pp0_it1, indvar_next_reg_892)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and (exitcond4_reg_888 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_396_p4 <= indvar_next_reg_892;
        else 
            indvar_phi_fu_396_p4 <= indvar_reg_392;
        end if; 
    end process;


    -- local_A_address0 assign process. --
    local_A_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, grp_obj_detector_convolve_fu_521_A_address0, ap_sig_cseq_ST_st30_fsm_23, tmp_s_fu_677_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            local_A_address0 <= tmp_s_fu_677_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_23)) then 
            local_A_address0 <= grp_obj_detector_convolve_fu_521_A_address0;
        else 
            local_A_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    local_A_address1 <= grp_obj_detector_convolve_fu_521_A_address1;

    -- local_A_ce0 assign process. --
    local_A_ce0_assign_proc : process(ap_sig_bdd_640, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, grp_obj_detector_convolve_fu_521_A_ce0, ap_sig_cseq_ST_st30_fsm_23)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            local_A_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_23)) then 
            local_A_ce0 <= grp_obj_detector_convolve_fu_521_A_ce0;
        else 
            local_A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- local_A_ce1 assign process. --
    local_A_ce1_assign_proc : process(grp_obj_detector_convolve_fu_521_A_ce1, ap_sig_cseq_ST_st30_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_23)) then 
            local_A_ce1 <= grp_obj_detector_convolve_fu_521_A_ce1;
        else 
            local_A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    local_A_d0 <= HP0_addr_read_reg_897;

    -- local_A_we0 assign process. --
    local_A_we0_assign_proc : process(ap_sig_bdd_640, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond4_reg_888_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_640 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_888_pp0_it1)))) then 
            local_A_we0 <= ap_const_logic_1;
        else 
            local_A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- local_W0_address0 assign process. --
    local_W0_address0_assign_proc : process(ap_reg_ppiten_pp1_it2, grp_obj_detector_convolve_fu_521_B_address0, ap_sig_cseq_ST_st30_fsm_23, tmp_287_fu_704_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) then 
            local_W0_address0 <= tmp_287_fu_704_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_23)) then 
            local_W0_address0 <= grp_obj_detector_convolve_fu_521_B_address0;
        else 
            local_W0_address0 <= "XXXXXXXX";
        end if; 
    end process;

    local_W0_address1 <= grp_obj_detector_convolve_fu_521_B_address1;

    -- local_W0_ce0 assign process. --
    local_W0_ce0_assign_proc : process(ap_sig_bdd_664, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, grp_obj_detector_convolve_fu_521_B_ce0, ap_sig_cseq_ST_st30_fsm_23)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
            local_W0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_23)) then 
            local_W0_ce0 <= grp_obj_detector_convolve_fu_521_B_ce0;
        else 
            local_W0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- local_W0_ce1 assign process. --
    local_W0_ce1_assign_proc : process(grp_obj_detector_convolve_fu_521_B_ce1, ap_sig_cseq_ST_st30_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_23)) then 
            local_W0_ce1 <= grp_obj_detector_convolve_fu_521_B_ce1;
        else 
            local_W0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    local_W0_d0 <= HP1_addr_read_reg_917;

    -- local_W0_we0 assign process. --
    local_W0_we0_assign_proc : process(ap_sig_bdd_664, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_exitcond3_reg_908_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_664 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_908_pp1_it1)))) then 
            local_W0_we0 <= ap_const_logic_1;
        else 
            local_W0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- local_W1_address0 assign process. --
    local_W1_address0_assign_proc : process(ap_reg_ppiten_pp2_it2, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp4_it0, ap_sig_cseq_ST_pp3_stg0_fsm_29, ap_sig_cseq_ST_pp4_stg0_fsm_34, tmp_288_fu_731_p1, tmp_i_fu_784_p1, tmp_289_fu_817_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it2)) then 
            local_W1_address0 <= tmp_288_fu_731_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_34))) then 
            local_W1_address0 <= tmp_289_fu_817_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29))) then 
            local_W1_address0 <= tmp_i_fu_784_p1(11 - 1 downto 0);
        else 
            local_W1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- local_W1_ce0 assign process. --
    local_W1_ce0_assign_proc : process(ap_sig_bdd_688, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it2, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp4_it0, ap_sig_cseq_ST_pp3_stg0_fsm_29, ap_sig_cseq_ST_pp4_stg0_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29)) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_34)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then 
            local_W1_ce0 <= ap_const_logic_1;
        else 
            local_W1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_W1_d0 <= HP2_addr_read_reg_937;

    -- local_W1_we0 assign process. --
    local_W1_we0_assign_proc : process(ap_sig_bdd_688, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it2, ap_reg_ppstg_exitcond5_reg_928_pp2_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not((ap_sig_bdd_688 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_928_pp2_it1)))) then 
            local_W1_we0 <= ap_const_logic_1;
        else 
            local_W1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_res_load_phi_fu_856_p3 <= 
        local_res_1_reg_1019 when (tmp_43_fu_852_p1(0) = '1') else 
        local_res_0_reg_1014;
    obj_detector_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    obj_detector_HP0_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    obj_detector_HP1_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    obj_detector_HP2_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    obj_detector_HP3_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    obj_detector_control_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    p_addr7_fu_811_p2 <= std_logic_vector(unsigned(tmp_i1_trn_cast_fu_807_p1) + unsigned(ap_const_lv11_360));

    -- s0_address0 assign process. --
    s0_address0_assign_proc : process(grp_obj_detector_convolve_fu_521_conv_address0, grp_obj_detector_ReLU_fu_578_inp_address0, ap_sig_cseq_ST_st30_fsm_23, ap_sig_cseq_ST_st32_fsm_25)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_25)) then 
            s0_address0 <= grp_obj_detector_ReLU_fu_578_inp_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_23)) then 
            s0_address0 <= grp_obj_detector_convolve_fu_521_conv_address0;
        else 
            s0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    s0_address1 <= grp_obj_detector_convolve_fu_521_conv_address1;

    -- s0_ce0 assign process. --
    s0_ce0_assign_proc : process(grp_obj_detector_convolve_fu_521_conv_ce0, grp_obj_detector_ReLU_fu_578_inp_ce0, ap_sig_cseq_ST_st30_fsm_23, ap_sig_cseq_ST_st32_fsm_25)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_25)) then 
            s0_ce0 <= grp_obj_detector_ReLU_fu_578_inp_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_23)) then 
            s0_ce0 <= grp_obj_detector_convolve_fu_521_conv_ce0;
        else 
            s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s0_ce1 assign process. --
    s0_ce1_assign_proc : process(grp_obj_detector_convolve_fu_521_conv_ce1, ap_sig_cseq_ST_st30_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_23)) then 
            s0_ce1 <= grp_obj_detector_convolve_fu_521_conv_ce1;
        else 
            s0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s0_d0 <= grp_obj_detector_convolve_fu_521_conv_d0;
    s0_d1 <= grp_obj_detector_convolve_fu_521_conv_d1;

    -- s0_we0 assign process. --
    s0_we0_assign_proc : process(grp_obj_detector_convolve_fu_521_conv_we0, ap_sig_cseq_ST_st30_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_23)) then 
            s0_we0 <= grp_obj_detector_convolve_fu_521_conv_we0;
        else 
            s0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s0_we1 assign process. --
    s0_we1_assign_proc : process(grp_obj_detector_convolve_fu_521_conv_we1, ap_sig_cseq_ST_st30_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_23)) then 
            s0_we1 <= grp_obj_detector_convolve_fu_521_conv_we1;
        else 
            s0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- s1_address0 assign process. --
    s1_address0_assign_proc : process(grp_obj_detector_maxpool_fu_557_inp_address0, grp_obj_detector_ReLU_fu_578_out_r_address0, ap_sig_cseq_ST_st32_fsm_25, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_25)) then 
            s1_address0 <= grp_obj_detector_ReLU_fu_578_out_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s1_address0 <= grp_obj_detector_maxpool_fu_557_inp_address0;
        else 
            s1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    s1_address1 <= grp_obj_detector_maxpool_fu_557_inp_address1;

    -- s1_ce0 assign process. --
    s1_ce0_assign_proc : process(grp_obj_detector_maxpool_fu_557_inp_ce0, grp_obj_detector_ReLU_fu_578_out_r_ce0, ap_sig_cseq_ST_st32_fsm_25, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_25)) then 
            s1_ce0 <= grp_obj_detector_ReLU_fu_578_out_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s1_ce0 <= grp_obj_detector_maxpool_fu_557_inp_ce0;
        else 
            s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s1_ce1 assign process. --
    s1_ce1_assign_proc : process(grp_obj_detector_maxpool_fu_557_inp_ce1, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s1_ce1 <= grp_obj_detector_maxpool_fu_557_inp_ce1;
        else 
            s1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s1_d0 <= grp_obj_detector_ReLU_fu_578_out_r_d0;

    -- s1_we0 assign process. --
    s1_we0_assign_proc : process(grp_obj_detector_ReLU_fu_578_out_r_we0, ap_sig_cseq_ST_st32_fsm_25)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_25)) then 
            s1_we0 <= grp_obj_detector_ReLU_fu_578_out_r_we0;
        else 
            s1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_0_address0 assign process. --
    s2_0_address0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_0_address0, grp_obj_detector_maxpool_fu_557_out_0_address0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_0_address0 <= grp_obj_detector_maxpool_fu_557_out_0_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_0_address0 <= grp_obj_detector_flatten_fu_540_inp_0_address0;
        else 
            s2_0_address0 <= "XXXXXXX";
        end if; 
    end process;

    s2_0_address1 <= grp_obj_detector_flatten_fu_540_inp_0_address1;

    -- s2_0_ce0 assign process. --
    s2_0_ce0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_0_ce0, grp_obj_detector_maxpool_fu_557_out_0_ce0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_0_ce0 <= grp_obj_detector_maxpool_fu_557_out_0_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_0_ce0 <= grp_obj_detector_flatten_fu_540_inp_0_ce0;
        else 
            s2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_0_ce1 assign process. --
    s2_0_ce1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_0_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_0_ce1 <= grp_obj_detector_flatten_fu_540_inp_0_ce1;
        else 
            s2_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s2_0_d0 <= grp_obj_detector_maxpool_fu_557_out_0_d0;

    -- s2_0_we0 assign process. --
    s2_0_we0_assign_proc : process(grp_obj_detector_maxpool_fu_557_out_0_we0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_0_we0 <= grp_obj_detector_maxpool_fu_557_out_0_we0;
        else 
            s2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_10_address0 assign process. --
    s2_10_address0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_10_address0, grp_obj_detector_maxpool_fu_557_out_10_address0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_10_address0 <= grp_obj_detector_maxpool_fu_557_out_10_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_10_address0 <= grp_obj_detector_flatten_fu_540_inp_10_address0;
        else 
            s2_10_address0 <= "XXXXXXX";
        end if; 
    end process;

    s2_10_address1 <= grp_obj_detector_flatten_fu_540_inp_10_address1;

    -- s2_10_ce0 assign process. --
    s2_10_ce0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_10_ce0, grp_obj_detector_maxpool_fu_557_out_10_ce0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_10_ce0 <= grp_obj_detector_maxpool_fu_557_out_10_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_10_ce0 <= grp_obj_detector_flatten_fu_540_inp_10_ce0;
        else 
            s2_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_10_ce1 assign process. --
    s2_10_ce1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_10_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_10_ce1 <= grp_obj_detector_flatten_fu_540_inp_10_ce1;
        else 
            s2_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s2_10_d0 <= grp_obj_detector_maxpool_fu_557_out_10_d0;

    -- s2_10_we0 assign process. --
    s2_10_we0_assign_proc : process(grp_obj_detector_maxpool_fu_557_out_10_we0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_10_we0 <= grp_obj_detector_maxpool_fu_557_out_10_we0;
        else 
            s2_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_11_address0 assign process. --
    s2_11_address0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_11_address0, grp_obj_detector_maxpool_fu_557_out_11_address0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_11_address0 <= grp_obj_detector_maxpool_fu_557_out_11_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_11_address0 <= grp_obj_detector_flatten_fu_540_inp_11_address0;
        else 
            s2_11_address0 <= "XXXXXXX";
        end if; 
    end process;

    s2_11_address1 <= grp_obj_detector_flatten_fu_540_inp_11_address1;

    -- s2_11_ce0 assign process. --
    s2_11_ce0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_11_ce0, grp_obj_detector_maxpool_fu_557_out_11_ce0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_11_ce0 <= grp_obj_detector_maxpool_fu_557_out_11_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_11_ce0 <= grp_obj_detector_flatten_fu_540_inp_11_ce0;
        else 
            s2_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_11_ce1 assign process. --
    s2_11_ce1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_11_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_11_ce1 <= grp_obj_detector_flatten_fu_540_inp_11_ce1;
        else 
            s2_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s2_11_d0 <= grp_obj_detector_maxpool_fu_557_out_11_d0;

    -- s2_11_we0 assign process. --
    s2_11_we0_assign_proc : process(grp_obj_detector_maxpool_fu_557_out_11_we0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_11_we0 <= grp_obj_detector_maxpool_fu_557_out_11_we0;
        else 
            s2_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_1_address0 assign process. --
    s2_1_address0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_1_address0, grp_obj_detector_maxpool_fu_557_out_1_address0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_1_address0 <= grp_obj_detector_maxpool_fu_557_out_1_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_1_address0 <= grp_obj_detector_flatten_fu_540_inp_1_address0;
        else 
            s2_1_address0 <= "XXXXXXX";
        end if; 
    end process;

    s2_1_address1 <= grp_obj_detector_flatten_fu_540_inp_1_address1;

    -- s2_1_ce0 assign process. --
    s2_1_ce0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_1_ce0, grp_obj_detector_maxpool_fu_557_out_1_ce0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_1_ce0 <= grp_obj_detector_maxpool_fu_557_out_1_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_1_ce0 <= grp_obj_detector_flatten_fu_540_inp_1_ce0;
        else 
            s2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_1_ce1 assign process. --
    s2_1_ce1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_1_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_1_ce1 <= grp_obj_detector_flatten_fu_540_inp_1_ce1;
        else 
            s2_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s2_1_d0 <= grp_obj_detector_maxpool_fu_557_out_1_d0;

    -- s2_1_we0 assign process. --
    s2_1_we0_assign_proc : process(grp_obj_detector_maxpool_fu_557_out_1_we0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_1_we0 <= grp_obj_detector_maxpool_fu_557_out_1_we0;
        else 
            s2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_2_address0 assign process. --
    s2_2_address0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_2_address0, grp_obj_detector_maxpool_fu_557_out_2_address0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_2_address0 <= grp_obj_detector_maxpool_fu_557_out_2_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_2_address0 <= grp_obj_detector_flatten_fu_540_inp_2_address0;
        else 
            s2_2_address0 <= "XXXXXXX";
        end if; 
    end process;

    s2_2_address1 <= grp_obj_detector_flatten_fu_540_inp_2_address1;

    -- s2_2_ce0 assign process. --
    s2_2_ce0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_2_ce0, grp_obj_detector_maxpool_fu_557_out_2_ce0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_2_ce0 <= grp_obj_detector_maxpool_fu_557_out_2_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_2_ce0 <= grp_obj_detector_flatten_fu_540_inp_2_ce0;
        else 
            s2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_2_ce1 assign process. --
    s2_2_ce1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_2_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_2_ce1 <= grp_obj_detector_flatten_fu_540_inp_2_ce1;
        else 
            s2_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s2_2_d0 <= grp_obj_detector_maxpool_fu_557_out_2_d0;

    -- s2_2_we0 assign process. --
    s2_2_we0_assign_proc : process(grp_obj_detector_maxpool_fu_557_out_2_we0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_2_we0 <= grp_obj_detector_maxpool_fu_557_out_2_we0;
        else 
            s2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_3_address0 assign process. --
    s2_3_address0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_3_address0, grp_obj_detector_maxpool_fu_557_out_3_address0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_3_address0 <= grp_obj_detector_maxpool_fu_557_out_3_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_3_address0 <= grp_obj_detector_flatten_fu_540_inp_3_address0;
        else 
            s2_3_address0 <= "XXXXXXX";
        end if; 
    end process;

    s2_3_address1 <= grp_obj_detector_flatten_fu_540_inp_3_address1;

    -- s2_3_ce0 assign process. --
    s2_3_ce0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_3_ce0, grp_obj_detector_maxpool_fu_557_out_3_ce0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_3_ce0 <= grp_obj_detector_maxpool_fu_557_out_3_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_3_ce0 <= grp_obj_detector_flatten_fu_540_inp_3_ce0;
        else 
            s2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_3_ce1 assign process. --
    s2_3_ce1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_3_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_3_ce1 <= grp_obj_detector_flatten_fu_540_inp_3_ce1;
        else 
            s2_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s2_3_d0 <= grp_obj_detector_maxpool_fu_557_out_3_d0;

    -- s2_3_we0 assign process. --
    s2_3_we0_assign_proc : process(grp_obj_detector_maxpool_fu_557_out_3_we0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_3_we0 <= grp_obj_detector_maxpool_fu_557_out_3_we0;
        else 
            s2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_4_address0 assign process. --
    s2_4_address0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_4_address0, grp_obj_detector_maxpool_fu_557_out_4_address0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_4_address0 <= grp_obj_detector_maxpool_fu_557_out_4_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_4_address0 <= grp_obj_detector_flatten_fu_540_inp_4_address0;
        else 
            s2_4_address0 <= "XXXXXXX";
        end if; 
    end process;

    s2_4_address1 <= grp_obj_detector_flatten_fu_540_inp_4_address1;

    -- s2_4_ce0 assign process. --
    s2_4_ce0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_4_ce0, grp_obj_detector_maxpool_fu_557_out_4_ce0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_4_ce0 <= grp_obj_detector_maxpool_fu_557_out_4_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_4_ce0 <= grp_obj_detector_flatten_fu_540_inp_4_ce0;
        else 
            s2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_4_ce1 assign process. --
    s2_4_ce1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_4_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_4_ce1 <= grp_obj_detector_flatten_fu_540_inp_4_ce1;
        else 
            s2_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s2_4_d0 <= grp_obj_detector_maxpool_fu_557_out_4_d0;

    -- s2_4_we0 assign process. --
    s2_4_we0_assign_proc : process(grp_obj_detector_maxpool_fu_557_out_4_we0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_4_we0 <= grp_obj_detector_maxpool_fu_557_out_4_we0;
        else 
            s2_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_5_address0 assign process. --
    s2_5_address0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_5_address0, grp_obj_detector_maxpool_fu_557_out_5_address0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_5_address0 <= grp_obj_detector_maxpool_fu_557_out_5_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_5_address0 <= grp_obj_detector_flatten_fu_540_inp_5_address0;
        else 
            s2_5_address0 <= "XXXXXXX";
        end if; 
    end process;

    s2_5_address1 <= grp_obj_detector_flatten_fu_540_inp_5_address1;

    -- s2_5_ce0 assign process. --
    s2_5_ce0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_5_ce0, grp_obj_detector_maxpool_fu_557_out_5_ce0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_5_ce0 <= grp_obj_detector_maxpool_fu_557_out_5_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_5_ce0 <= grp_obj_detector_flatten_fu_540_inp_5_ce0;
        else 
            s2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_5_ce1 assign process. --
    s2_5_ce1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_5_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_5_ce1 <= grp_obj_detector_flatten_fu_540_inp_5_ce1;
        else 
            s2_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s2_5_d0 <= grp_obj_detector_maxpool_fu_557_out_5_d0;

    -- s2_5_we0 assign process. --
    s2_5_we0_assign_proc : process(grp_obj_detector_maxpool_fu_557_out_5_we0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_5_we0 <= grp_obj_detector_maxpool_fu_557_out_5_we0;
        else 
            s2_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_6_address0 assign process. --
    s2_6_address0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_6_address0, grp_obj_detector_maxpool_fu_557_out_6_address0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_6_address0 <= grp_obj_detector_maxpool_fu_557_out_6_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_6_address0 <= grp_obj_detector_flatten_fu_540_inp_6_address0;
        else 
            s2_6_address0 <= "XXXXXXX";
        end if; 
    end process;

    s2_6_address1 <= grp_obj_detector_flatten_fu_540_inp_6_address1;

    -- s2_6_ce0 assign process. --
    s2_6_ce0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_6_ce0, grp_obj_detector_maxpool_fu_557_out_6_ce0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_6_ce0 <= grp_obj_detector_maxpool_fu_557_out_6_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_6_ce0 <= grp_obj_detector_flatten_fu_540_inp_6_ce0;
        else 
            s2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_6_ce1 assign process. --
    s2_6_ce1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_6_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_6_ce1 <= grp_obj_detector_flatten_fu_540_inp_6_ce1;
        else 
            s2_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s2_6_d0 <= grp_obj_detector_maxpool_fu_557_out_6_d0;

    -- s2_6_we0 assign process. --
    s2_6_we0_assign_proc : process(grp_obj_detector_maxpool_fu_557_out_6_we0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_6_we0 <= grp_obj_detector_maxpool_fu_557_out_6_we0;
        else 
            s2_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_7_address0 assign process. --
    s2_7_address0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_7_address0, grp_obj_detector_maxpool_fu_557_out_7_address0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_7_address0 <= grp_obj_detector_maxpool_fu_557_out_7_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_7_address0 <= grp_obj_detector_flatten_fu_540_inp_7_address0;
        else 
            s2_7_address0 <= "XXXXXXX";
        end if; 
    end process;

    s2_7_address1 <= grp_obj_detector_flatten_fu_540_inp_7_address1;

    -- s2_7_ce0 assign process. --
    s2_7_ce0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_7_ce0, grp_obj_detector_maxpool_fu_557_out_7_ce0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_7_ce0 <= grp_obj_detector_maxpool_fu_557_out_7_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_7_ce0 <= grp_obj_detector_flatten_fu_540_inp_7_ce0;
        else 
            s2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_7_ce1 assign process. --
    s2_7_ce1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_7_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_7_ce1 <= grp_obj_detector_flatten_fu_540_inp_7_ce1;
        else 
            s2_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s2_7_d0 <= grp_obj_detector_maxpool_fu_557_out_7_d0;

    -- s2_7_we0 assign process. --
    s2_7_we0_assign_proc : process(grp_obj_detector_maxpool_fu_557_out_7_we0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_7_we0 <= grp_obj_detector_maxpool_fu_557_out_7_we0;
        else 
            s2_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_8_address0 assign process. --
    s2_8_address0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_8_address0, grp_obj_detector_maxpool_fu_557_out_8_address0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_8_address0 <= grp_obj_detector_maxpool_fu_557_out_8_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_8_address0 <= grp_obj_detector_flatten_fu_540_inp_8_address0;
        else 
            s2_8_address0 <= "XXXXXXX";
        end if; 
    end process;

    s2_8_address1 <= grp_obj_detector_flatten_fu_540_inp_8_address1;

    -- s2_8_ce0 assign process. --
    s2_8_ce0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_8_ce0, grp_obj_detector_maxpool_fu_557_out_8_ce0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_8_ce0 <= grp_obj_detector_maxpool_fu_557_out_8_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_8_ce0 <= grp_obj_detector_flatten_fu_540_inp_8_ce0;
        else 
            s2_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_8_ce1 assign process. --
    s2_8_ce1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_8_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_8_ce1 <= grp_obj_detector_flatten_fu_540_inp_8_ce1;
        else 
            s2_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s2_8_d0 <= grp_obj_detector_maxpool_fu_557_out_8_d0;

    -- s2_8_we0 assign process. --
    s2_8_we0_assign_proc : process(grp_obj_detector_maxpool_fu_557_out_8_we0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_8_we0 <= grp_obj_detector_maxpool_fu_557_out_8_we0;
        else 
            s2_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_9_address0 assign process. --
    s2_9_address0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_9_address0, grp_obj_detector_maxpool_fu_557_out_9_address0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_9_address0 <= grp_obj_detector_maxpool_fu_557_out_9_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_9_address0 <= grp_obj_detector_flatten_fu_540_inp_9_address0;
        else 
            s2_9_address0 <= "XXXXXXX";
        end if; 
    end process;

    s2_9_address1 <= grp_obj_detector_flatten_fu_540_inp_9_address1;

    -- s2_9_ce0 assign process. --
    s2_9_ce0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_9_ce0, grp_obj_detector_maxpool_fu_557_out_9_ce0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_9_ce0 <= grp_obj_detector_maxpool_fu_557_out_9_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_9_ce0 <= grp_obj_detector_flatten_fu_540_inp_9_ce0;
        else 
            s2_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s2_9_ce1 assign process. --
    s2_9_ce1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_inp_9_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s2_9_ce1 <= grp_obj_detector_flatten_fu_540_inp_9_ce1;
        else 
            s2_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s2_9_d0 <= grp_obj_detector_maxpool_fu_557_out_9_d0;

    -- s2_9_we0 assign process. --
    s2_9_we0_assign_proc : process(grp_obj_detector_maxpool_fu_557_out_9_we0, ap_sig_cseq_ST_st34_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
            s2_9_we0 <= grp_obj_detector_maxpool_fu_557_out_9_we0;
        else 
            s2_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s3_address0 assign process. --
    s3_address0_assign_proc : process(ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp4_it0, ap_sig_cseq_ST_pp3_stg0_fsm_29, ap_sig_cseq_ST_pp4_stg0_fsm_34, ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_out_r_address0, tmp_i_fu_784_p1, tmp_i1_fu_802_p1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_34))) then 
            s3_address0 <= tmp_i1_fu_802_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29))) then 
            s3_address0 <= tmp_i_fu_784_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s3_address0 <= grp_obj_detector_flatten_fu_540_out_r_address0;
        else 
            s3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    s3_address1 <= grp_obj_detector_flatten_fu_540_out_r_address1;

    -- s3_ce0 assign process. --
    s3_ce0_assign_proc : process(ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp4_it0, ap_sig_cseq_ST_pp3_stg0_fsm_29, ap_sig_cseq_ST_pp4_stg0_fsm_34, ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_out_r_ce0)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_29)) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_34)))) then 
            s3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s3_ce0 <= grp_obj_detector_flatten_fu_540_out_r_ce0;
        else 
            s3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s3_ce1 assign process. --
    s3_ce1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_out_r_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s3_ce1 <= grp_obj_detector_flatten_fu_540_out_r_ce1;
        else 
            s3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s3_d0 <= grp_obj_detector_flatten_fu_540_out_r_d0;
    s3_d1 <= grp_obj_detector_flatten_fu_540_out_r_d1;

    -- s3_we0 assign process. --
    s3_we0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_out_r_we0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s3_we0 <= grp_obj_detector_flatten_fu_540_out_r_we0;
        else 
            s3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- s3_we1 assign process. --
    s3_we1_assign_proc : process(ap_sig_cseq_ST_st35_fsm_28, grp_obj_detector_flatten_fu_540_out_r_we1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then 
            s3_we1 <= grp_obj_detector_flatten_fu_540_out_r_we1;
        else 
            s3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_287_fu_704_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar1_reg_404_pp1_it1),64));
    tmp_288_fu_731_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar2_reg_416_pp2_it1),64));
    tmp_289_fu_817_p1 <= std_logic_vector(resize(unsigned(p_addr7_fu_811_p2),64));
    tmp_39_fu_655_p1 <= std_logic_vector(resize(unsigned(tmp_38_reg_877),64));
    tmp_40_fu_682_p1 <= std_logic_vector(resize(unsigned(tmp_37_reg_872),64));
    tmp_41_fu_709_p1 <= std_logic_vector(resize(unsigned(tmp_36_reg_867),64));
    tmp_42_fu_830_p1 <= std_logic_vector(resize(unsigned(tmp_reg_862),64));
    tmp_43_fu_852_p1 <= indvar3_reg_510(1 - 1 downto 0);
    tmp_i1_fu_802_p1 <= std_logic_vector(resize(unsigned(i_i1_phi_fu_503_p4),64));
    tmp_i1_trn_cast_fu_807_p1 <= std_logic_vector(resize(unsigned(i_i1_phi_fu_503_p4),11));
    tmp_i_fu_784_p1 <= std_logic_vector(resize(unsigned(i_i_phi_fu_480_p4),64));
    tmp_s_fu_677_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_392_pp0_it1),64));
end behav;
