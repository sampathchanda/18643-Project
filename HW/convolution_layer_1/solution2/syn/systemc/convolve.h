// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _convolve_HH_
#define _convolve_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "convolve_Loop_BUFFER_RESET_proc.h"
#include "convolve_Block_proc.h"

namespace ap_rtl {

struct convolve : public sc_module {
    // Port declarations 23
    sc_in< sc_lv<8> > image_V_dout;
    sc_in< sc_logic > image_V_empty_n;
    sc_out< sc_logic > image_V_read;
    sc_out< sc_lv<5> > weights_address0;
    sc_out< sc_logic > weights_ce0;
    sc_out< sc_lv<32> > weights_d0;
    sc_in< sc_lv<32> > weights_q0;
    sc_out< sc_logic > weights_we0;
    sc_out< sc_lv<5> > weights_address1;
    sc_out< sc_logic > weights_ce1;
    sc_out< sc_lv<32> > weights_d1;
    sc_in< sc_lv<32> > weights_q1;
    sc_out< sc_logic > weights_we1;
    sc_out< sc_lv<8> > conv_output_V_din;
    sc_in< sc_logic > conv_output_V_full_n;
    sc_out< sc_logic > conv_output_V_write;
    sc_out< sc_logic > done;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;


    // Module declarations
    convolve(sc_module_name name);
    SC_HAS_PROCESS(convolve);

    ~convolve();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    convolve_Loop_BUFFER_RESET_proc* convolve_Loop_BUFFER_RESET_proc_U0;
    convolve_Block_proc* convolve_Block_proc_U0;
    sc_signal< sc_logic > convolve_Loop_BUFFER_RESET_proc_U0_ap_start;
    sc_signal< sc_logic > convolve_Loop_BUFFER_RESET_proc_U0_ap_done;
    sc_signal< sc_logic > convolve_Loop_BUFFER_RESET_proc_U0_ap_continue;
    sc_signal< sc_logic > convolve_Loop_BUFFER_RESET_proc_U0_ap_idle;
    sc_signal< sc_logic > convolve_Loop_BUFFER_RESET_proc_U0_ap_ready;
    sc_signal< sc_lv<8> > convolve_Loop_BUFFER_RESET_proc_U0_image_V_dout;
    sc_signal< sc_logic > convolve_Loop_BUFFER_RESET_proc_U0_image_V_empty_n;
    sc_signal< sc_logic > convolve_Loop_BUFFER_RESET_proc_U0_image_V_read;
    sc_signal< sc_lv<5> > convolve_Loop_BUFFER_RESET_proc_U0_weights_address0;
    sc_signal< sc_logic > convolve_Loop_BUFFER_RESET_proc_U0_weights_ce0;
    sc_signal< sc_lv<32> > convolve_Loop_BUFFER_RESET_proc_U0_weights_q0;
    sc_signal< sc_lv<5> > convolve_Loop_BUFFER_RESET_proc_U0_weights_address1;
    sc_signal< sc_logic > convolve_Loop_BUFFER_RESET_proc_U0_weights_ce1;
    sc_signal< sc_lv<32> > convolve_Loop_BUFFER_RESET_proc_U0_weights_q1;
    sc_signal< sc_lv<8> > convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_din;
    sc_signal< sc_logic > convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_full_n;
    sc_signal< sc_logic > convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_write;
    sc_signal< sc_logic > ap_sig_hs_continue;
    sc_signal< sc_logic > convolve_Block_proc_U0_ap_start;
    sc_signal< sc_logic > convolve_Block_proc_U0_ap_done;
    sc_signal< sc_logic > convolve_Block_proc_U0_ap_continue;
    sc_signal< sc_logic > convolve_Block_proc_U0_ap_idle;
    sc_signal< sc_logic > convolve_Block_proc_U0_ap_ready;
    sc_signal< sc_lv<1> > convolve_Block_proc_U0_done;
    sc_signal< sc_logic > convolve_Block_proc_U0_done_ap_vld;
    sc_signal< sc_logic > ap_reg_procdone_convolve_Loop_BUFFER_RESET_proc_U0;
    sc_signal< sc_logic > ap_sig_hs_done;
    sc_signal< sc_logic > ap_reg_procdone_convolve_Block_proc_U0;
    sc_signal< sc_logic > ap_CS;
    sc_signal< sc_logic > ap_sig_top_allready;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_logic ap_const_logic_1;
    static const bool ap_true;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_hs_continue();
    void thread_ap_sig_hs_done();
    void thread_ap_sig_top_allready();
    void thread_conv_output_V_din();
    void thread_conv_output_V_write();
    void thread_convolve_Block_proc_U0_ap_continue();
    void thread_convolve_Block_proc_U0_ap_start();
    void thread_convolve_Loop_BUFFER_RESET_proc_U0_ap_continue();
    void thread_convolve_Loop_BUFFER_RESET_proc_U0_ap_start();
    void thread_convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_full_n();
    void thread_convolve_Loop_BUFFER_RESET_proc_U0_image_V_dout();
    void thread_convolve_Loop_BUFFER_RESET_proc_U0_image_V_empty_n();
    void thread_convolve_Loop_BUFFER_RESET_proc_U0_weights_q0();
    void thread_convolve_Loop_BUFFER_RESET_proc_U0_weights_q1();
    void thread_done();
    void thread_image_V_read();
    void thread_weights_address0();
    void thread_weights_address1();
    void thread_weights_ce0();
    void thread_weights_ce1();
    void thread_weights_d0();
    void thread_weights_d1();
    void thread_weights_we0();
    void thread_weights_we1();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
