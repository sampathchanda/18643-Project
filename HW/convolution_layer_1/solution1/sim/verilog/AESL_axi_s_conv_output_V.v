// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module AESL_axi_s_conv_output_V (
	clk,
	reset,
	TRAN_conv_output_V_TDATA,
	TRAN_conv_output_V_TVALID,
	TRAN_conv_output_V_TREADY,
	ready,
	done);

//------------------------Parameter----------------------
`define TV_OUT_conv_output_V_TDATA "../tv/rtldatafile/rtl.convolve.autotvout_conv_output_V.dat"
`define EGRESS_STATUS_conv_output_V_TDATA "../tv/stream_size/stream_egress_status_conv_output_V.dat"
// Input and Output
input clk;
input reset;
input [7:0] TRAN_conv_output_V_TDATA;
input  TRAN_conv_output_V_TVALID;
output  TRAN_conv_output_V_TREADY;
input ready;
input done;

//------------------------Local signal-------------------
reg [7 : 0] mem_conv_output_V_TDATA [575 : 0];
initial begin : initialize_mem_conv_output_V_TDATA
	integer i;
	for (i = 0; i < 575; i = i + 1) begin
		mem_conv_output_V_TDATA[i] = 0;
	end
end
wire conv_output_V_TDATA_empty;
wire conv_output_V_TDATA_full;
reg [11 : 0] conv_output_V_TDATA_mInPtr = 0;
reg [11 : 0] conv_output_V_TDATA_mOutPtr = 0;
reg conv_output_V_TDATA_mFlag_nEF_hint = 0; // 0: empty hint, 1: full hint

assign conv_output_V_TDATA_empty = ((conv_output_V_TDATA_mInPtr == conv_output_V_TDATA_mOutPtr) && conv_output_V_TDATA_mFlag_nEF_hint == 1'b0) ? 1'b1: 1'b0;
assign conv_output_V_TDATA_full = ((conv_output_V_TDATA_mInPtr == conv_output_V_TDATA_mOutPtr) && conv_output_V_TDATA_mFlag_nEF_hint == 1'b1) ? 1'b1: 1'b0;

assign TRAN_conv_output_V_TREADY = ~(conv_output_V_TDATA_full);

//------------------------Task and function--------------
function is_blank_char(input [7:0] char);
	if (char == " " || char == "\011" || char == "\012" || char == "\015") begin
		is_blank_char = 1;
	end else begin
		is_blank_char = 0;
	end
endfunction

function [183:0] read_token(input integer fp);
	reg [7:0] char;
	begin
		read_token = "";
		char = " ";
		while (is_blank_char(char) && char != 8'hff) begin
			char = $fgetc(fp);
		end
		while (~is_blank_char(char) && char != 8'hff) begin
			read_token = {read_token[183 - 8:0], char[7:0]};
			char = $fgetc(fp);
		end
	end
endfunction

task rm_0x(inout [183:0] token);
	reg [183:0] token_tmp;
	integer i;
	begin
		token_tmp = "";
		for (i = 0; token[15:0] != "0x"; token = token >> 8) begin
			token_tmp = (token[7:0] << (8 * i)) | token_tmp;
			i = i + 1;
		end
		token = token_tmp;
	end
endtask

//------------------------Write-only axi_s-------------------

// Write operation for write-only axi_s
always @ (posedge clk) begin
    if (reset === 0) begin
	    conv_output_V_TDATA_mInPtr = 0;
  end
  else if (TRAN_conv_output_V_TVALID && TRAN_conv_output_V_TREADY) begin
	    if (conv_output_V_TDATA_mInPtr < 575) begin
          mem_conv_output_V_TDATA[conv_output_V_TDATA_mInPtr] = TRAN_conv_output_V_TDATA;
	        conv_output_V_TDATA_mInPtr <= conv_output_V_TDATA_mInPtr + 1;
	    end
  end
end

// Reset mInPtr when done is pulled up
initial begin : done_reset_conv_output_V_TDATA_mInPtr_process
  while (1) begin
      @(posedge clk);
      # 0.2;
      while (done !== 1) begin
          @(posedge clk);
          # 0.2;
      end
      conv_output_V_TDATA_mInPtr = 0;
  end
end

// Read operation for write-only axi_s signal conv_output_V_TDATA
initial begin : conv_output_V_TDATA_write_file_process
  integer fp;
  integer transaction_idx;
  reg [8*5 : 1] str;
  integer idx;
  transaction_idx = 0;
  conv_output_V_TDATA_mOutPtr = 576;
  conv_output_V_TDATA_mFlag_nEF_hint = 1;
  while (1) begin
      @(posedge clk);
      # 0.1;
      while (done !== 1) begin
          @(posedge clk);
          # 0.1;
      end
	    fp = $fopen(`TV_OUT_conv_output_V_TDATA, "a");
	    if (fp == 0) begin // Failed to open file
	        $display("Failed to open file \"%s\"!", `TV_OUT_conv_output_V_TDATA);
	        $finish;
	    end
	    $fdisplay(fp, "[[transaction]] %d", transaction_idx);
	    for (idx = 0; idx < conv_output_V_TDATA_mInPtr; idx = idx + 1) begin
	        $fdisplay(fp, "0x%x", mem_conv_output_V_TDATA[idx]);
	    end
	    $fdisplay(fp, "[[/transaction]]");
	    transaction_idx = transaction_idx + 1;
	    $fclose(fp);
  end
end

endmodule
