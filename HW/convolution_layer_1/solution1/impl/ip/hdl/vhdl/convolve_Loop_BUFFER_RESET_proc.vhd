-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve_Loop_BUFFER_RESET_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    weights_ce0 : OUT STD_LOGIC;
    weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    image_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    image_V_empty_n : IN STD_LOGIC;
    image_V_read : OUT STD_LOGIC;
    conv_output_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_output_V_full_n : IN STD_LOGIC;
    conv_output_V_write : OUT STD_LOGIC );
end;


architecture behav of convolve_Loop_BUFFER_RESET_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_pp2_stg0_fsm_5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_pp2_stg1_fsm_6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_pp2_stg2_fsm_7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_pp2_stg3_fsm_8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_pp2_stg4_fsm_9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_st23_fsm_10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_st24_fsm_11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_st25_fsm_12 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_st26_fsm_13 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_st27_fsm_14 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_st28_fsm_15 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_st29_fsm_16 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_st30_fsm_17 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_st31_fsm_18 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_75 : STD_LOGIC_VECTOR (6 downto 0) := "1110101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv7_74 : STD_LOGIC_VECTOR (6 downto 0) := "1110100";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_74 : STD_LOGIC_VECTOR (9 downto 0) := "0001110100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_38 : BOOLEAN;
    signal indvar_flatten_reg_232 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_243 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_02_1_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_266 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp2_stg2_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_74 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_92 : BOOLEAN;
    signal pos_fu_308_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal exitcond6_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_111 : BOOLEAN;
    signal ap_sig_bdd_116 : BOOLEAN;
    signal pixels_read_1_fu_325_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal pixels_read_1_reg_738 : STD_LOGIC_VECTOR (9 downto 0);
    signal read_reg_743 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_753 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_t_fu_353_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_t_reg_758 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_137 : BOOLEAN;
    signal pos_1_fu_367_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal pos_1_reg_767 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_flatten_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_151 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it3 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_403_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_781 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_mid2_fu_429_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_mid2_reg_786 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_20_fu_504_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_reg_796 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_tmp_20_reg_796_pp2_it1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_fu_510_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_801 : STD_LOGIC_VECTOR (2 downto 0);
    signal linebuff_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuff_load_1_reg_806 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp2_stg1_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_181 : BOOLEAN;
    signal tmp_18_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp2_stg3_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_196 : BOOLEAN;
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_assign_to_int_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_assign_to_int_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_215 : BOOLEAN;
    signal tmp_13_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_841 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_846 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_fu_714_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_850 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_228 : BOOLEAN;
    signal output_s_fu_722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_237 : BOOLEAN;
    signal ap_sig_cseq_ST_pp2_stg4_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_248 : BOOLEAN;
    signal linebuff_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal linebuff_ce0 : STD_LOGIC;
    signal linebuff_we0 : STD_LOGIC;
    signal linebuff_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pos_0_i_i_reg_186 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_bdd_269 : BOOLEAN;
    signal exitcond7_i_i_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_282 : BOOLEAN;
    signal ap_sig_bdd_288 : BOOLEAN;
    signal pixels_read_reg_208 : STD_LOGIC_VECTOR (9 downto 0);
    signal pos1_reg_220 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_303 : BOOLEAN;
    signal indvar_flatten_phi_fu_236_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_phi_fu_247_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_phi_fu_270_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_384_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_282_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_290_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixels_read_cast9_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_423_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl2_fu_441_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_fu_453_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_449_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_461_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_mid2_fu_415_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_cast5_fu_475_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_465_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_479_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_cast_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast4_cast_fu_471_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast7_cast_fu_437_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp2_fu_494_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp2_cast_fu_500_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_528_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_538_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_572_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_s_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_604_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_1_fu_620_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_s_fu_624_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal loc_V_fu_610_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_cast_i_fu_636_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_640_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_i_i_fu_654_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_646_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_cast_i_fu_660_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_664_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_i_cast_i_cast_fu_672_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_cast_i_fu_632_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_i_cast_i_fu_682_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_i_i_fu_676_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_23_fu_692_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_i_fu_686_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_14_fu_700_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_704_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_277_ce : STD_LOGIC;
    signal grp_fu_282_ce : STD_LOGIC;
    signal grp_fu_287_ce : STD_LOGIC;
    signal tmp_11_fu_290_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component convolve_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component convolve_Loop_BUFFER_RESET_proc_linebuff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    linebuff_U : component convolve_Loop_BUFFER_RESET_proc_linebuff
    generic map (
        DataWidth => 8,
        AddressRange => 117,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuff_address0,
        ce0 => linebuff_ce0,
        we0 => linebuff_we0,
        d0 => linebuff_d0,
        q0 => linebuff_q0);

    convolve_fadd_32ns_32ns_32_5_full_dsp_U1 : component convolve_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_277_p0,
        din1 => grp_fu_277_p1,
        ce => grp_fu_277_ce,
        dout => grp_fu_277_p2);

    convolve_fmul_32ns_32ns_32_4_max_dsp_U2 : component convolve_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_282_p0,
        din1 => grp_fu_282_p1,
        ce => grp_fu_282_ce,
        dout => grp_fu_282_p2);

    convolve_sitofp_32ns_32_6_U3 : component convolve_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_287_p0,
        ce => grp_fu_287_ce,
        dout => grp_fu_287_p1);

    convolve_fcmp_32ns_32ns_1_1_U4 : component convolve_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_11_fu_290_p0,
        din1 => tmp_11_fu_290_p1,
        opcode => tmp_11_fu_290_opcode,
        dout => tmp_11_fu_290_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_116) and not((ap_const_lv1_0 = exitcond6_fu_319_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and not((ap_const_lv1_0 = exitcond_flatten_fu_397_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond5_fu_361_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_777 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg4_fsm_9))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond5_fu_361_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg4_fsm_9) and not((exitcond_flatten_reg_777 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg4_fsm_9)) then 
                    ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it3 assign process. --
    ap_reg_ppiten_pp2_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg4_fsm_9)) then 
                    ap_reg_ppiten_pp2_it3 <= ap_reg_ppiten_pp2_it2;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond5_fu_361_p2)))) then 
                    ap_reg_ppiten_pp2_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_243 assign process. --
    i_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond5_fu_361_p2)))) then 
                i_reg_243 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (exitcond_flatten_reg_777 = ap_const_lv1_0))) then 
                i_reg_243 <= i_mid2_reg_786;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_232 assign process. --
    indvar_flatten_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond5_fu_361_p2)))) then 
                indvar_flatten_reg_232 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (exitcond_flatten_reg_777 = ap_const_lv1_0))) then 
                indvar_flatten_reg_232 <= indvar_flatten_next_reg_781;
            end if; 
        end if;
    end process;

    -- j_reg_266 assign process. --
    j_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond5_fu_361_p2)))) then 
                j_reg_266 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (exitcond_flatten_reg_777 = ap_const_lv1_0))) then 
                j_reg_266 <= j_1_reg_801;
            end if; 
        end if;
    end process;

    -- p_02_1_reg_254 assign process. --
    p_02_1_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond5_fu_361_p2)))) then 
                p_02_1_reg_254 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it3) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_6) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it3))) then 
                p_02_1_reg_254 <= grp_fu_277_p2;
            end if; 
        end if;
    end process;

    -- pixels_read_reg_208 assign process. --
    pixels_read_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond7_i_i_fu_302_p2)))) then 
                pixels_read_reg_208 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_18) and not(ap_sig_bdd_288))) then 
                pixels_read_reg_208 <= pixels_read_1_reg_738;
            end if; 
        end if;
    end process;

    -- pos1_reg_220 assign process. --
    pos1_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond5_reg_763))) then 
                pos1_reg_220 <= pos_1_reg_767;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond6_fu_319_p2) and not(ap_sig_bdd_116))) then 
                pos1_reg_220 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- pos_0_i_i_reg_186 assign process. --
    pos_0_i_i_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond7_i_i_fu_302_p2))) then 
                pos_0_i_i_reg_186 <= pos_fu_308_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_269))) then 
                pos_0_i_i_reg_186 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- t_reg_197 assign process. --
    t_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond7_i_i_fu_302_p2)))) then 
                t_reg_197 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_18) and not(ap_sig_bdd_288))) then 
                t_reg_197 <= p_t_reg_758;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5)) then
                ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it1 <= exitcond_flatten_reg_777;
                ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it2 <= ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it1;
                ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it3 <= ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it2;
                ap_reg_ppstg_tmp_20_reg_796_pp2_it1 <= tmp_20_reg_796;
                exitcond_flatten_reg_777 <= exitcond_flatten_fu_397_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                exitcond5_reg_763 <= exitcond5_fu_361_p2;
                pos_1_reg_767 <= pos_1_fu_367_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (ap_const_lv1_0 = exitcond_flatten_fu_397_p2))) then
                i_mid2_reg_786 <= i_mid2_fu_429_p3;
                j_1_reg_801 <= j_1_fu_510_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5))) then
                indvar_flatten_next_reg_781 <= indvar_flatten_next_fu_403_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_10)) then
                input_assign_to_int_reg_836 <= input_assign_to_int_fu_524_p1;
                or_cond_reg_846 <= or_cond_fu_598_p2;
                tmp_13_reg_841 <= tmp_13_fu_560_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_6) and (exitcond_flatten_reg_777 = ap_const_lv1_0))) then
                linebuff_load_1_reg_806 <= linebuff_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond6_fu_319_p2) and not(ap_sig_bdd_116))) then
                m_reg_748 <= m_fu_335_p2;
                p_t_reg_758 <= p_t_fu_353_p3;
                read_reg_743 <= image_V_dout;
                tmp_4_reg_753 <= tmp_4_fu_341_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_116))) then
                pixels_read_1_reg_738 <= pixels_read_1_fu_325_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg2_fsm_7) and (ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_17))) then
                reg_296 <= grp_fu_287_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_11)) then
                result_V_reg_850 <= result_V_fu_714_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (ap_const_lv1_0 = exitcond_flatten_fu_397_p2))) then
                tmp_20_reg_796 <= tmp_20_fu_504_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_6) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it2))) then
                tmp_22_reg_826 <= grp_fu_282_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it2, exitcond6_fu_319_p2, ap_sig_bdd_116, exitcond5_fu_361_p2, exitcond_flatten_fu_397_p2, ap_reg_ppiten_pp2_it3, ap_sig_cseq_ST_pp2_stg1_fsm_6, ap_sig_bdd_269, exitcond7_i_i_fu_302_p2, ap_sig_bdd_288)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_269)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond7_i_i_fu_302_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((not(ap_sig_bdd_116) and not((ap_const_lv1_0 = exitcond6_fu_319_p2)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((ap_const_lv1_0 = exitcond6_fu_319_p2) and not(ap_sig_bdd_116))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond5_fu_361_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_5;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_pp2_stg0_fsm_5 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_397_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg1_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_10;
                end if;
            when ap_ST_pp2_stg1_fsm_6 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it3) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_6) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it2))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg2_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_10;
                end if;
            when ap_ST_pp2_stg2_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp2_stg3_fsm_8;
            when ap_ST_pp2_stg3_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp2_stg4_fsm_9;
            when ap_ST_pp2_stg4_fsm_9 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_5;
            when ap_ST_st23_fsm_10 => 
                ap_NS_fsm <= ap_ST_st24_fsm_11;
            when ap_ST_st24_fsm_11 => 
                ap_NS_fsm <= ap_ST_st25_fsm_12;
            when ap_ST_st25_fsm_12 => 
                ap_NS_fsm <= ap_ST_st26_fsm_13;
            when ap_ST_st26_fsm_13 => 
                ap_NS_fsm <= ap_ST_st27_fsm_14;
            when ap_ST_st27_fsm_14 => 
                ap_NS_fsm <= ap_ST_st28_fsm_15;
            when ap_ST_st28_fsm_15 => 
                ap_NS_fsm <= ap_ST_st29_fsm_16;
            when ap_ST_st29_fsm_16 => 
                ap_NS_fsm <= ap_ST_st30_fsm_17;
            when ap_ST_st30_fsm_17 => 
                ap_NS_fsm <= ap_ST_st31_fsm_18;
            when ap_ST_st31_fsm_18 => 
                if (not(ap_sig_bdd_288)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st31_fsm_18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond6_fu_319_p2, ap_sig_cseq_ST_st3_fsm_2, ap_sig_bdd_116)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_116) and not((ap_const_lv1_0 = exitcond6_fu_319_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond6_fu_319_p2, ap_sig_cseq_ST_st3_fsm_2, ap_sig_bdd_116)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_bdd_116) and not((ap_const_lv1_0 = exitcond6_fu_319_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_111 assign process. --
    ap_sig_bdd_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_111 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_116 assign process. --
    ap_sig_bdd_116_assign_proc : process(image_V_empty_n, exitcond6_fu_319_p2)
    begin
                ap_sig_bdd_116 <= ((image_V_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond6_fu_319_p2));
    end process;


    -- ap_sig_bdd_137 assign process. --
    ap_sig_bdd_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_137 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_151 assign process. --
    ap_sig_bdd_151_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_151 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_181 assign process. --
    ap_sig_bdd_181_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_181 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_196 assign process. --
    ap_sig_bdd_196_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_196 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_215 assign process. --
    ap_sig_bdd_215_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_215 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_228 assign process. --
    ap_sig_bdd_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_228 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_237 assign process. --
    ap_sig_bdd_237_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_237 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_248 assign process. --
    ap_sig_bdd_248_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_248 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_269 assign process. --
    ap_sig_bdd_269_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_269 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_282 assign process. --
    ap_sig_bdd_282_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_282 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_288 assign process. --
    ap_sig_bdd_288_assign_proc : process(conv_output_V_full_n, or_cond_reg_846)
    begin
                ap_sig_bdd_288 <= ((conv_output_V_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = or_cond_reg_846)));
    end process;


    -- ap_sig_bdd_303 assign process. --
    ap_sig_bdd_303_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_303 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_38 assign process. --
    ap_sig_bdd_38_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_38 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_74 assign process. --
    ap_sig_bdd_74_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_74 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_92 assign process. --
    ap_sig_bdd_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_92 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_5 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_5_assign_proc : process(ap_sig_bdd_151)
    begin
        if (ap_sig_bdd_151) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg1_fsm_6 assign process. --
    ap_sig_cseq_ST_pp2_stg1_fsm_6_assign_proc : process(ap_sig_bdd_181)
    begin
        if (ap_sig_bdd_181) then 
            ap_sig_cseq_ST_pp2_stg1_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg1_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg2_fsm_7 assign process. --
    ap_sig_cseq_ST_pp2_stg2_fsm_7_assign_proc : process(ap_sig_bdd_74)
    begin
        if (ap_sig_bdd_74) then 
            ap_sig_cseq_ST_pp2_stg2_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg2_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg3_fsm_8 assign process. --
    ap_sig_cseq_ST_pp2_stg3_fsm_8_assign_proc : process(ap_sig_bdd_196)
    begin
        if (ap_sig_bdd_196) then 
            ap_sig_cseq_ST_pp2_stg3_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg3_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg4_fsm_9 assign process. --
    ap_sig_cseq_ST_pp2_stg4_fsm_9_assign_proc : process(ap_sig_bdd_248)
    begin
        if (ap_sig_bdd_248) then 
            ap_sig_cseq_ST_pp2_stg4_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg4_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_38)
    begin
        if (ap_sig_bdd_38) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_10 assign process. --
    ap_sig_cseq_ST_st23_fsm_10_assign_proc : process(ap_sig_bdd_215)
    begin
        if (ap_sig_bdd_215) then 
            ap_sig_cseq_ST_st23_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_11 assign process. --
    ap_sig_cseq_ST_st24_fsm_11_assign_proc : process(ap_sig_bdd_228)
    begin
        if (ap_sig_bdd_228) then 
            ap_sig_cseq_ST_st24_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_12 assign process. --
    ap_sig_cseq_ST_st25_fsm_12_assign_proc : process(ap_sig_bdd_237)
    begin
        if (ap_sig_bdd_237) then 
            ap_sig_cseq_ST_st25_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_17 assign process. --
    ap_sig_cseq_ST_st30_fsm_17_assign_proc : process(ap_sig_bdd_92)
    begin
        if (ap_sig_bdd_92) then 
            ap_sig_cseq_ST_st30_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_18 assign process. --
    ap_sig_cseq_ST_st31_fsm_18_assign_proc : process(ap_sig_bdd_282)
    begin
        if (ap_sig_bdd_282) then 
            ap_sig_cseq_ST_st31_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_111)
    begin
        if (ap_sig_bdd_111) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_137)
    begin
        if (ap_sig_bdd_137) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_303)
    begin
        if (ap_sig_bdd_303) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    conv_output_V_din <= reg_296;

    -- conv_output_V_write assign process. --
    conv_output_V_write_assign_proc : process(or_cond_reg_846, ap_sig_cseq_ST_st31_fsm_18, ap_sig_bdd_288)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_18) and not((ap_const_lv1_0 = or_cond_reg_846)) and not(ap_sig_bdd_288))) then 
            conv_output_V_write <= ap_const_logic_1;
        else 
            conv_output_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_fu_361_p2 <= "1" when (pos1_reg_220 = ap_const_lv7_75) else "0";
    exitcond6_fu_319_p2 <= "1" when (pixels_read_reg_208 = ap_const_lv10_310) else "0";
    exitcond7_i_i_fu_302_p2 <= "1" when (pos_0_i_i_reg_186 = ap_const_lv7_75) else "0";
    exitcond_flatten_fu_397_p2 <= "1" when (indvar_flatten_phi_fu_236_p4 = ap_const_lv5_19) else "0";
    exitcond_fu_409_p2 <= "1" when (j_phi_fu_270_p4 = ap_const_lv3_5) else "0";
    grp_fu_277_ce <= ap_const_logic_1;
    grp_fu_277_p0 <= p_02_1_reg_254;
    grp_fu_277_p1 <= tmp_22_reg_826;
    grp_fu_282_ce <= ap_const_logic_1;
    grp_fu_282_p0 <= reg_296;
    grp_fu_282_p1 <= weights_q0;
    grp_fu_287_ce <= ap_const_logic_1;

    -- grp_fu_287_p0 assign process. --
    grp_fu_287_p0_assign_proc : process(ap_sig_cseq_ST_pp2_stg2_fsm_7, ap_reg_ppiten_pp2_it0, tmp_18_fu_516_p1, output_s_fu_722_p1, ap_sig_cseq_ST_st25_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_12)) then 
            grp_fu_287_p0 <= output_s_fu_722_p1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg2_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            grp_fu_287_p0 <= tmp_18_fu_516_p1;
        else 
            grp_fu_287_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_cast7_cast_fu_437_p1 <= std_logic_vector(resize(unsigned(i_mid2_fu_429_p3),4));
    i_mid2_fu_429_p3 <= 
        i_s_fu_423_p2 when (exitcond_fu_409_p2(0) = '1') else 
        i_phi_fu_247_p4;

    -- i_phi_fu_247_p4 assign process. --
    i_phi_fu_247_p4_assign_proc : process(i_reg_243, ap_reg_ppiten_pp2_it1, exitcond_flatten_reg_777, ap_sig_cseq_ST_pp2_stg0_fsm_5, i_mid2_reg_786)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (exitcond_flatten_reg_777 = ap_const_lv1_0))) then 
            i_phi_fu_247_p4 <= i_mid2_reg_786;
        else 
            i_phi_fu_247_p4 <= i_reg_243;
        end if; 
    end process;

    i_s_fu_423_p2 <= std_logic_vector(unsigned(i_phi_fu_247_p4) + unsigned(ap_const_lv3_1));
    icmp_fu_581_p2 <= "1" when (signed(tmp_24_fu_572_p4) > signed(ap_const_lv30_0)) else "0";

    -- image_V_read assign process. --
    image_V_read_assign_proc : process(exitcond6_fu_319_p2, ap_sig_cseq_ST_st3_fsm_2, ap_sig_bdd_116)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond6_fu_319_p2) and not(ap_sig_bdd_116))) then 
            image_V_read <= ap_const_logic_1;
        else 
            image_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_403_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_236_p4) + unsigned(ap_const_lv5_1));

    -- indvar_flatten_phi_fu_236_p4 assign process. --
    indvar_flatten_phi_fu_236_p4_assign_proc : process(indvar_flatten_reg_232, ap_reg_ppiten_pp2_it1, exitcond_flatten_reg_777, ap_sig_cseq_ST_pp2_stg0_fsm_5, indvar_flatten_next_reg_781)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (exitcond_flatten_reg_777 = ap_const_lv1_0))) then 
            indvar_flatten_phi_fu_236_p4 <= indvar_flatten_next_reg_781;
        else 
            indvar_flatten_phi_fu_236_p4 <= indvar_flatten_reg_232;
        end if; 
    end process;

    input_assign_to_int_fu_524_p1 <= p_02_1_reg_254;
    isNeg_fu_646_p3 <= sh_assign_fu_640_p2(8 downto 8);
    j_1_fu_510_p2 <= std_logic_vector(unsigned(j_mid2_fu_415_p3) + unsigned(ap_const_lv3_1));
    j_cast4_cast_fu_471_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_415_p3),4));
    j_cast5_fu_475_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_415_p3),9));
    j_mid2_fu_415_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_409_p2(0) = '1') else 
        j_phi_fu_270_p4;

    -- j_phi_fu_270_p4 assign process. --
    j_phi_fu_270_p4_assign_proc : process(j_reg_266, ap_reg_ppiten_pp2_it1, exitcond_flatten_reg_777, ap_sig_cseq_ST_pp2_stg0_fsm_5, j_1_reg_801)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (exitcond_flatten_reg_777 = ap_const_lv1_0))) then 
            j_phi_fu_270_p4 <= j_1_reg_801;
        else 
            j_phi_fu_270_p4 <= j_reg_266;
        end if; 
    end process;


    -- linebuff_address0 assign process. --
    linebuff_address0_assign_proc : process(ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_pp2_stg0_fsm_5, ap_sig_cseq_ST_st5_fsm_4, tmp_i_fu_314_p1, tmp_8_fu_373_p1, tmp_s_fu_392_p1, tmp_17_fu_489_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            linebuff_address0 <= tmp_s_fu_392_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            linebuff_address0 <= tmp_i_fu_314_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5))) then 
            linebuff_address0 <= tmp_17_fu_489_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            linebuff_address0 <= tmp_8_fu_373_p1(7 - 1 downto 0);
        else 
            linebuff_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- linebuff_ce0 assign process. --
    linebuff_ce0_assign_proc : process(ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_pp2_stg0_fsm_5, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5)) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            linebuff_ce0 <= ap_const_logic_1;
        else 
            linebuff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- linebuff_d0 assign process. --
    linebuff_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4, tmp_9_fu_384_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            linebuff_d0 <= tmp_9_fu_384_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            linebuff_d0 <= ap_const_lv8_0;
        else 
            linebuff_d0 <= "XXXXXXXX";
        end if; 
    end process;


    -- linebuff_we0 assign process. --
    linebuff_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond5_reg_763, exitcond7_i_i_fu_302_p2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond7_i_i_fu_302_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond5_reg_763)))) then 
            linebuff_we0 <= ap_const_logic_1;
        else 
            linebuff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    loc_V_1_fu_620_p1 <= p_Val2_s_fu_604_p3(23 - 1 downto 0);
    loc_V_fu_610_p4 <= p_Val2_s_fu_604_p3(30 downto 23);
    m_fu_335_p2 <= std_logic_vector(unsigned(pixels_read_cast9_fu_331_p1) - unsigned(t_reg_197));
    not_s_fu_587_p2 <= (tmp_4_reg_753 xor ap_const_lv1_1);
    notlhs_fu_542_p2 <= "0" when (tmp_7_fu_528_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_548_p2 <= "1" when (tmp_1_fu_538_p1 = ap_const_lv23_0) else "0";
    or_cond_fu_598_p2 <= (tmp1_fu_592_p2 and icmp_fu_581_p2);
    output_s_fu_722_p1 <= std_logic_vector(resize(unsigned(result_V_reg_850),32));
    p_Result_s_fu_624_p3 <= (ap_const_lv1_1 & loc_V_1_fu_620_p1);
    p_Val2_s_fu_604_p3 <= 
        input_assign_to_int_reg_836 when (tmp_13_reg_841(0) = '1') else 
        ap_const_lv32_0;
    p_shl2_cast_fu_449_p1 <= std_logic_vector(resize(unsigned(p_shl2_fu_441_p3),9));
    p_shl2_fu_441_p3 <= (i_mid2_fu_429_p3 & ap_const_lv5_0);
    p_shl3_cast_fu_461_p1 <= std_logic_vector(resize(unsigned(p_shl3_fu_453_p3),9));
    p_shl3_fu_453_p3 <= (i_mid2_fu_429_p3 & ap_const_lv2_0);
    p_t_fu_353_p3 <= 
        t_1_fu_347_p2 when (tmp_4_fu_341_p2(0) = '1') else 
        t_reg_197;
    pixels_read_1_fu_325_p2 <= std_logic_vector(unsigned(pixels_read_reg_208) + unsigned(ap_const_lv10_1));
    pixels_read_cast9_fu_331_p1 <= std_logic_vector(resize(unsigned(pixels_read_reg_208),32));
    pos_1_fu_367_p2 <= std_logic_vector(unsigned(pos1_reg_220) + unsigned(ap_const_lv7_1));
    pos_fu_308_p2 <= std_logic_vector(unsigned(pos_0_i_i_reg_186) + unsigned(ap_const_lv7_1));
    result_V_fu_714_p3 <= 
        tmp_14_fu_700_p1 when (isNeg_fu_646_p3(0) = '1') else 
        tmp_15_fu_704_p4;
    sh_assign_1_fu_664_p3 <= 
        tmp_1_i_cast_i_fu_660_p1 when (isNeg_fu_646_p3(0) = '1') else 
        sh_assign_fu_640_p2;
        sh_assign_1_i_cast_i_cast_fu_672_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_664_p3),24));

    sh_assign_fu_640_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_cast_i_fu_636_p1));
    t_1_fu_347_p2 <= std_logic_vector(unsigned(t_reg_197) + unsigned(ap_const_lv32_1C));
    tmp1_fu_592_p2 <= (tmp_5_fu_566_p2 and not_s_fu_587_p2);
    tmp2_cast_fu_500_p1 <= std_logic_vector(resize(unsigned(tmp2_fu_494_p2),5));
    tmp2_fu_494_p2 <= std_logic_vector(unsigned(j_cast4_cast_fu_471_p1) + unsigned(i_cast7_cast_fu_437_p1));
    tmp_10_fu_554_p2 <= (notrhs_fu_548_p2 or notlhs_fu_542_p2);
    tmp_11_fu_290_opcode <= ap_const_lv5_2;
    tmp_11_fu_290_p0 <= p_02_1_reg_254;
    tmp_11_fu_290_p1 <= ap_const_lv32_0;
    tmp_12_fu_465_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_449_p1) - unsigned(p_shl3_cast_fu_461_p1));
    tmp_13_fu_560_p2 <= (tmp_10_fu_554_p2 and tmp_11_fu_290_p2);
    tmp_14_fu_700_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_692_p3),8));
    tmp_15_fu_704_p4 <= tmp_5_i_i_fu_686_p2(30 downto 23);
        tmp_16_cast_fu_485_p1 <= std_logic_vector(resize(signed(tmp_16_fu_479_p2),32));

    tmp_16_fu_479_p2 <= std_logic_vector(unsigned(j_cast5_fu_475_p1) + unsigned(tmp_12_fu_465_p2));
    tmp_17_fu_489_p1 <= std_logic_vector(resize(unsigned(tmp_16_cast_fu_485_p1),64));
    tmp_18_fu_516_p1 <= std_logic_vector(resize(unsigned(linebuff_load_1_reg_806),32));
    tmp_1_fu_538_p1 <= input_assign_to_int_fu_524_p1(23 - 1 downto 0);
        tmp_1_i_cast_i_fu_660_p1 <= std_logic_vector(resize(signed(tmp_1_i_i_fu_654_p2),9));

    tmp_1_i_i_fu_654_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_610_p4));
    tmp_20_fu_504_p2 <= std_logic_vector(unsigned(p_shl3_fu_453_p3) + unsigned(tmp2_cast_fu_500_p1));
    tmp_21_fu_520_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_tmp_20_reg_796_pp2_it1),64));
    tmp_23_fu_692_p3 <= tmp_3_i_i_fu_676_p2(23 downto 23);
    tmp_24_fu_572_p4 <= m_reg_748(31 downto 2);
    tmp_3_i_i_fu_676_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_624_p3),to_integer(unsigned('0' & sh_assign_1_i_cast_i_cast_fu_672_p1(24-1 downto 0)))));
    tmp_4_fu_341_p2 <= "1" when (signed(m_fu_335_p2) > signed(ap_const_lv32_1B)) else "0";
    tmp_4_i_cast_i_fu_682_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_fu_664_p3),31));
    tmp_5_fu_566_p2 <= "1" when (unsigned(pixels_read_reg_208) > unsigned(ap_const_lv10_74)) else "0";
    tmp_5_i_i_fu_686_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_cast_i_fu_632_p1),to_integer(unsigned('0' & tmp_4_i_cast_i_fu_682_p1(31-1 downto 0)))));
    tmp_6_fu_378_p2 <= "1" when (unsigned(pos1_reg_220) < unsigned(ap_const_lv7_74)) else "0";
    tmp_7_fu_528_p4 <= input_assign_to_int_fu_524_p1(30 downto 23);
    tmp_8_fu_373_p1 <= std_logic_vector(resize(unsigned(pos_1_fu_367_p2),64));
    tmp_9_fu_384_p3 <= 
        linebuff_q0 when (tmp_6_fu_378_p2(0) = '1') else 
        read_reg_743;
    tmp_i_cast_i_fu_632_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_624_p3),31));
    tmp_i_fu_314_p1 <= std_logic_vector(resize(unsigned(pos_0_i_i_reg_186),64));
    tmp_i_i_cast_i_fu_636_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_610_p4),9));
    tmp_s_fu_392_p1 <= std_logic_vector(resize(unsigned(pos1_reg_220),64));
    weights_address0 <= tmp_21_fu_520_p1(5 - 1 downto 0);

    -- weights_ce0 assign process. --
    weights_ce0_assign_proc : process(ap_sig_cseq_ST_pp2_stg2_fsm_7, ap_reg_ppiten_pp2_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg2_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
