// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolve_Loop_BUFFER_RESET_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        weights_address0,
        weights_ce0,
        weights_q0,
        image_V_dout,
        image_V_empty_n,
        image_V_read,
        conv_output_V_din,
        conv_output_V_full_n,
        conv_output_V_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 19'b1;
parameter    ap_ST_st2_fsm_1 = 19'b10;
parameter    ap_ST_st3_fsm_2 = 19'b100;
parameter    ap_ST_st4_fsm_3 = 19'b1000;
parameter    ap_ST_st5_fsm_4 = 19'b10000;
parameter    ap_ST_pp2_stg0_fsm_5 = 19'b100000;
parameter    ap_ST_pp2_stg1_fsm_6 = 19'b1000000;
parameter    ap_ST_pp2_stg2_fsm_7 = 19'b10000000;
parameter    ap_ST_pp2_stg3_fsm_8 = 19'b100000000;
parameter    ap_ST_pp2_stg4_fsm_9 = 19'b1000000000;
parameter    ap_ST_st23_fsm_10 = 19'b10000000000;
parameter    ap_ST_st24_fsm_11 = 19'b100000000000;
parameter    ap_ST_st25_fsm_12 = 19'b1000000000000;
parameter    ap_ST_st26_fsm_13 = 19'b10000000000000;
parameter    ap_ST_st27_fsm_14 = 19'b100000000000000;
parameter    ap_ST_st28_fsm_15 = 19'b1000000000000000;
parameter    ap_ST_st29_fsm_16 = 19'b10000000000000000;
parameter    ap_ST_st30_fsm_17 = 19'b100000000000000000;
parameter    ap_ST_st31_fsm_18 = 19'b1000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv7_75 = 7'b1110101;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv10_310 = 10'b1100010000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv7_74 = 7'b1110100;
parameter    ap_const_lv5_19 = 5'b11001;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv10_74 = 10'b1110100;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv30_0 = 30'b000000000000000000000000000000;
parameter    ap_const_lv9_181 = 9'b110000001;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [4:0] weights_address0;
output   weights_ce0;
input  [31:0] weights_q0;
input  [7:0] image_V_dout;
input   image_V_empty_n;
output   image_V_read;
output  [31:0] conv_output_V_din;
input   conv_output_V_full_n;
output   conv_output_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weights_ce0;
reg image_V_read;
reg conv_output_V_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm = 19'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_38;
reg   [4:0] indvar_flatten_reg_232;
reg   [2:0] i_reg_243;
reg   [31:0] p_02_1_reg_254;
reg   [2:0] j_reg_266;
wire   [31:0] grp_fu_287_p1;
reg   [31:0] reg_296;
reg    ap_sig_cseq_ST_pp2_stg2_fsm_7;
reg    ap_sig_bdd_74;
reg    ap_reg_ppiten_pp2_it0 = 1'b0;
reg    ap_reg_ppiten_pp2_it1 = 1'b0;
reg    ap_reg_ppiten_pp2_it2 = 1'b0;
reg   [0:0] exitcond_flatten_reg_777;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it1;
reg    ap_sig_cseq_ST_st30_fsm_17;
reg    ap_sig_bdd_92;
wire   [6:0] pos_fu_308_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_102;
wire   [0:0] exitcond6_fu_319_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_111;
reg    ap_sig_bdd_116;
wire   [9:0] pixels_read_1_fu_325_p2;
reg   [9:0] pixels_read_1_reg_738;
reg   [7:0] read_reg_743;
wire   [31:0] m_fu_335_p2;
reg   [31:0] m_reg_748;
wire   [0:0] tmp_4_fu_341_p2;
reg   [0:0] tmp_4_reg_753;
wire   [31:0] p_t_fu_353_p3;
reg   [31:0] p_t_reg_758;
wire   [0:0] exitcond5_fu_361_p2;
reg   [0:0] exitcond5_reg_763;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_137;
wire   [6:0] pos_1_fu_367_p2;
reg   [6:0] pos_1_reg_767;
wire   [0:0] exitcond_flatten_fu_397_p2;
reg    ap_sig_cseq_ST_pp2_stg0_fsm_5;
reg    ap_sig_bdd_151;
reg    ap_reg_ppiten_pp2_it3 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it2;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it3;
wire   [4:0] indvar_flatten_next_fu_403_p2;
reg   [4:0] indvar_flatten_next_reg_781;
wire   [2:0] i_mid2_fu_429_p3;
reg   [2:0] i_mid2_reg_786;
wire   [4:0] tmp_20_fu_504_p2;
reg   [4:0] tmp_20_reg_796;
reg   [4:0] ap_reg_ppstg_tmp_20_reg_796_pp2_it1;
wire   [2:0] j_1_fu_510_p2;
reg   [2:0] j_1_reg_801;
wire   [7:0] linebuff_q0;
reg   [7:0] linebuff_load_1_reg_806;
reg    ap_sig_cseq_ST_pp2_stg1_fsm_6;
reg    ap_sig_bdd_181;
wire   [31:0] tmp_18_fu_516_p1;
reg    ap_sig_cseq_ST_pp2_stg3_fsm_8;
reg    ap_sig_bdd_196;
wire   [31:0] grp_fu_282_p2;
reg   [31:0] tmp_22_reg_826;
wire   [31:0] grp_fu_277_p2;
wire   [31:0] input_assign_to_int_fu_524_p1;
reg   [31:0] input_assign_to_int_reg_836;
reg    ap_sig_cseq_ST_st23_fsm_10;
reg    ap_sig_bdd_215;
wire   [0:0] tmp_13_fu_560_p2;
reg   [0:0] tmp_13_reg_841;
wire   [0:0] or_cond_fu_598_p2;
reg   [0:0] or_cond_reg_846;
wire   [7:0] result_V_fu_714_p3;
reg   [7:0] result_V_reg_850;
reg    ap_sig_cseq_ST_st24_fsm_11;
reg    ap_sig_bdd_228;
wire   [31:0] output_s_fu_722_p1;
reg    ap_sig_cseq_ST_st25_fsm_12;
reg    ap_sig_bdd_237;
reg    ap_sig_cseq_ST_pp2_stg4_fsm_9;
reg    ap_sig_bdd_248;
reg   [6:0] linebuff_address0;
reg    linebuff_ce0;
reg    linebuff_we0;
reg   [7:0] linebuff_d0;
reg   [6:0] pos_0_i_i_reg_186;
reg    ap_sig_bdd_269;
wire   [0:0] exitcond7_i_i_fu_302_p2;
reg   [31:0] t_reg_197;
reg    ap_sig_cseq_ST_st31_fsm_18;
reg    ap_sig_bdd_282;
reg    ap_sig_bdd_288;
reg   [9:0] pixels_read_reg_208;
reg   [6:0] pos1_reg_220;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_303;
reg   [4:0] indvar_flatten_phi_fu_236_p4;
reg   [2:0] i_phi_fu_247_p4;
reg   [2:0] j_phi_fu_270_p4;
wire   [63:0] tmp_i_fu_314_p1;
wire   [63:0] tmp_8_fu_373_p1;
wire   [63:0] tmp_s_fu_392_p1;
wire   [63:0] tmp_17_fu_489_p1;
wire   [63:0] tmp_21_fu_520_p1;
wire   [7:0] tmp_9_fu_384_p3;
wire   [31:0] grp_fu_277_p0;
wire   [31:0] grp_fu_277_p1;
wire   [31:0] grp_fu_282_p0;
wire   [31:0] grp_fu_282_p1;
reg   [31:0] grp_fu_287_p0;
wire   [31:0] tmp_11_fu_290_p0;
wire   [31:0] tmp_11_fu_290_p1;
wire   [31:0] pixels_read_cast9_fu_331_p1;
wire   [31:0] t_1_fu_347_p2;
wire   [0:0] tmp_6_fu_378_p2;
wire   [0:0] exitcond_fu_409_p2;
wire   [2:0] i_s_fu_423_p2;
wire   [7:0] p_shl2_fu_441_p3;
wire   [4:0] p_shl3_fu_453_p3;
wire   [8:0] p_shl2_cast_fu_449_p1;
wire   [8:0] p_shl3_cast_fu_461_p1;
wire   [2:0] j_mid2_fu_415_p3;
wire   [8:0] j_cast5_fu_475_p1;
wire   [8:0] tmp_12_fu_465_p2;
wire   [8:0] tmp_16_fu_479_p2;
wire  signed [31:0] tmp_16_cast_fu_485_p1;
wire   [3:0] j_cast4_cast_fu_471_p1;
wire   [3:0] i_cast7_cast_fu_437_p1;
wire   [3:0] tmp2_fu_494_p2;
wire   [4:0] tmp2_cast_fu_500_p1;
wire   [7:0] tmp_7_fu_528_p4;
wire   [22:0] tmp_1_fu_538_p1;
wire   [0:0] notrhs_fu_548_p2;
wire   [0:0] notlhs_fu_542_p2;
wire   [0:0] tmp_10_fu_554_p2;
wire   [0:0] tmp_11_fu_290_p2;
wire   [29:0] tmp_24_fu_572_p4;
wire   [0:0] tmp_5_fu_566_p2;
wire   [0:0] not_s_fu_587_p2;
wire   [0:0] tmp1_fu_592_p2;
wire   [0:0] icmp_fu_581_p2;
wire   [31:0] p_Val2_s_fu_604_p3;
wire   [22:0] loc_V_1_fu_620_p1;
wire   [23:0] p_Result_s_fu_624_p3;
wire   [7:0] loc_V_fu_610_p4;
wire   [8:0] tmp_i_i_cast_i_fu_636_p1;
wire  signed [8:0] sh_assign_fu_640_p2;
wire   [7:0] tmp_1_i_i_fu_654_p2;
wire   [0:0] isNeg_fu_646_p3;
wire  signed [8:0] tmp_1_i_cast_i_fu_660_p1;
wire   [8:0] sh_assign_1_fu_664_p3;
wire  signed [23:0] sh_assign_1_i_cast_i_cast_fu_672_p1;
wire   [30:0] tmp_i_cast_i_fu_632_p1;
wire   [30:0] tmp_4_i_cast_i_fu_682_p1;
wire   [23:0] tmp_3_i_i_fu_676_p2;
wire   [0:0] tmp_23_fu_692_p3;
wire   [30:0] tmp_5_i_i_fu_686_p2;
wire   [7:0] tmp_14_fu_700_p1;
wire   [7:0] tmp_15_fu_704_p4;
wire    grp_fu_277_ce;
wire    grp_fu_282_ce;
wire    grp_fu_287_ce;
wire   [4:0] tmp_11_fu_290_opcode;
reg   [18:0] ap_NS_fsm;


convolve_Loop_BUFFER_RESET_proc_linebuff #(
    .DataWidth( 8 ),
    .AddressRange( 117 ),
    .AddressWidth( 7 ))
linebuff_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( linebuff_address0 ),
    .ce0( linebuff_ce0 ),
    .we0( linebuff_we0 ),
    .d0( linebuff_d0 ),
    .q0( linebuff_q0 )
);

convolve_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolve_fadd_32ns_32ns_32_5_full_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_277_p0 ),
    .din1( grp_fu_277_p1 ),
    .ce( grp_fu_277_ce ),
    .dout( grp_fu_277_p2 )
);

convolve_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolve_fmul_32ns_32ns_32_4_max_dsp_U2(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_282_p0 ),
    .din1( grp_fu_282_p1 ),
    .ce( grp_fu_282_ce ),
    .dout( grp_fu_282_p2 )
);

convolve_sitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolve_sitofp_32ns_32_6_U3(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_287_p0 ),
    .ce( grp_fu_287_ce ),
    .dout( grp_fu_287_p1 )
);

convolve_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
convolve_fcmp_32ns_32ns_1_1_U4(
    .din0( tmp_11_fu_290_p0 ),
    .din1( tmp_11_fu_290_p1 ),
    .opcode( tmp_11_fu_290_opcode ),
    .dout( tmp_11_fu_290_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_116 & ~(ap_const_lv1_0 == exitcond6_fu_319_p2))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp2_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp2_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & ~(ap_const_lv1_0 == exitcond_flatten_fu_397_p2))) begin
            ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond5_fu_361_p2))) begin
            ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp2_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp2_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
    end else begin
        if (((exitcond_flatten_reg_777 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg4_fsm_9))) begin
            ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond5_fu_361_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg4_fsm_9) & ~(exitcond_flatten_reg_777 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp2_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp2_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg4_fsm_9)) begin
            ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
        end
    end
end

/// ap_reg_ppiten_pp2_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp2_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp2_it3 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg4_fsm_9)) begin
            ap_reg_ppiten_pp2_it3 <= ap_reg_ppiten_pp2_it2;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond5_fu_361_p2))) begin
            ap_reg_ppiten_pp2_it3 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond5_fu_361_p2))) begin
        i_reg_243 <= ap_const_lv3_0;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (exitcond_flatten_reg_777 == ap_const_lv1_0))) begin
        i_reg_243 <= i_mid2_reg_786;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond5_fu_361_p2))) begin
        indvar_flatten_reg_232 <= ap_const_lv5_0;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (exitcond_flatten_reg_777 == ap_const_lv1_0))) begin
        indvar_flatten_reg_232 <= indvar_flatten_next_reg_781;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond5_fu_361_p2))) begin
        j_reg_266 <= ap_const_lv3_0;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (exitcond_flatten_reg_777 == ap_const_lv1_0))) begin
        j_reg_266 <= j_1_reg_801;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond5_fu_361_p2))) begin
        p_02_1_reg_254 <= ap_const_lv32_0;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp2_it3) & (ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg1_fsm_6) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it3))) begin
        p_02_1_reg_254 <= grp_fu_277_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond7_i_i_fu_302_p2))) begin
        pixels_read_reg_208 <= ap_const_lv10_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st31_fsm_18) & ~ap_sig_bdd_288)) begin
        pixels_read_reg_208 <= pixels_read_1_reg_738;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond5_reg_763))) begin
        pos1_reg_220 <= pos_1_reg_767;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond6_fu_319_p2) & ~ap_sig_bdd_116)) begin
        pos1_reg_220 <= ap_const_lv7_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond7_i_i_fu_302_p2))) begin
        pos_0_i_i_reg_186 <= pos_fu_308_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_269)) begin
        pos_0_i_i_reg_186 <= ap_const_lv7_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond7_i_i_fu_302_p2))) begin
        t_reg_197 <= ap_const_lv32_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st31_fsm_18) & ~ap_sig_bdd_288)) begin
        t_reg_197 <= p_t_reg_758;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_5)) begin
        ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it1 <= exitcond_flatten_reg_777;
        ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it2 <= ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it1;
        ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it3 <= ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it2;
        ap_reg_ppstg_tmp_20_reg_796_pp2_it1 <= tmp_20_reg_796;
        exitcond_flatten_reg_777 <= exitcond_flatten_fu_397_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        exitcond5_reg_763 <= exitcond5_fu_361_p2;
        pos_1_reg_767 <= pos_1_fu_367_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (ap_const_lv1_0 == exitcond_flatten_fu_397_p2))) begin
        i_mid2_reg_786 <= i_mid2_fu_429_p3;
        j_1_reg_801 <= j_1_fu_510_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_5))) begin
        indvar_flatten_next_reg_781 <= indvar_flatten_next_fu_403_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_10)) begin
        input_assign_to_int_reg_836 <= input_assign_to_int_fu_524_p1;
        or_cond_reg_846 <= or_cond_fu_598_p2;
        tmp_13_reg_841 <= tmp_13_fu_560_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg1_fsm_6) & (exitcond_flatten_reg_777 == ap_const_lv1_0))) begin
        linebuff_load_1_reg_806 <= linebuff_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond6_fu_319_p2) & ~ap_sig_bdd_116)) begin
        m_reg_748 <= m_fu_335_p2;
        p_t_reg_758 <= p_t_fu_353_p3;
        read_reg_743 <= image_V_dout;
        tmp_4_reg_753 <= tmp_4_fu_341_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_116)) begin
        pixels_read_1_reg_738 <= pixels_read_1_fu_325_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg2_fsm_7) & (ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it1 == ap_const_lv1_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st30_fsm_17))) begin
        reg_296 <= grp_fu_287_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_11)) begin
        result_V_reg_850 <= result_V_fu_714_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (ap_const_lv1_0 == exitcond_flatten_fu_397_p2))) begin
        tmp_20_reg_796 <= tmp_20_fu_504_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg1_fsm_6) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_777_pp2_it2))) begin
        tmp_22_reg_826 <= grp_fu_282_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or exitcond6_fu_319_p2 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_bdd_116)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_116 & ~(ap_const_lv1_0 == exitcond6_fu_319_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (exitcond6_fu_319_p2 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_bdd_116)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_116 & ~(ap_const_lv1_0 == exitcond6_fu_319_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp2_stg0_fsm_5 assign process. ///
always @ (ap_sig_bdd_151)
begin
    if (ap_sig_bdd_151) begin
        ap_sig_cseq_ST_pp2_stg0_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp2_stg0_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp2_stg1_fsm_6 assign process. ///
always @ (ap_sig_bdd_181)
begin
    if (ap_sig_bdd_181) begin
        ap_sig_cseq_ST_pp2_stg1_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp2_stg1_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp2_stg2_fsm_7 assign process. ///
always @ (ap_sig_bdd_74)
begin
    if (ap_sig_bdd_74) begin
        ap_sig_cseq_ST_pp2_stg2_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp2_stg2_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp2_stg3_fsm_8 assign process. ///
always @ (ap_sig_bdd_196)
begin
    if (ap_sig_bdd_196) begin
        ap_sig_cseq_ST_pp2_stg3_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp2_stg3_fsm_8 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp2_stg4_fsm_9 assign process. ///
always @ (ap_sig_bdd_248)
begin
    if (ap_sig_bdd_248) begin
        ap_sig_cseq_ST_pp2_stg4_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp2_stg4_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_38)
begin
    if (ap_sig_bdd_38) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st23_fsm_10 assign process. ///
always @ (ap_sig_bdd_215)
begin
    if (ap_sig_bdd_215) begin
        ap_sig_cseq_ST_st23_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st24_fsm_11 assign process. ///
always @ (ap_sig_bdd_228)
begin
    if (ap_sig_bdd_228) begin
        ap_sig_cseq_ST_st24_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st24_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st25_fsm_12 assign process. ///
always @ (ap_sig_bdd_237)
begin
    if (ap_sig_bdd_237) begin
        ap_sig_cseq_ST_st25_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st25_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_102)
begin
    if (ap_sig_bdd_102) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st30_fsm_17 assign process. ///
always @ (ap_sig_bdd_92)
begin
    if (ap_sig_bdd_92) begin
        ap_sig_cseq_ST_st30_fsm_17 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st30_fsm_17 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st31_fsm_18 assign process. ///
always @ (ap_sig_bdd_282)
begin
    if (ap_sig_bdd_282) begin
        ap_sig_cseq_ST_st31_fsm_18 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st31_fsm_18 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_111)
begin
    if (ap_sig_bdd_111) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_137)
begin
    if (ap_sig_bdd_137) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_303)
begin
    if (ap_sig_bdd_303) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// conv_output_V_write assign process. ///
always @ (or_cond_reg_846 or ap_sig_cseq_ST_st31_fsm_18 or ap_sig_bdd_288)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st31_fsm_18) & ~(ap_const_lv1_0 == or_cond_reg_846) & ~ap_sig_bdd_288)) begin
        conv_output_V_write = ap_const_logic_1;
    end else begin
        conv_output_V_write = ap_const_logic_0;
    end
end

/// grp_fu_287_p0 assign process. ///
always @ (ap_sig_cseq_ST_pp2_stg2_fsm_7 or ap_reg_ppiten_pp2_it0 or tmp_18_fu_516_p1 or output_s_fu_722_p1 or ap_sig_cseq_ST_st25_fsm_12)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_12)) begin
        grp_fu_287_p0 = output_s_fu_722_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg2_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it0))) begin
        grp_fu_287_p0 = tmp_18_fu_516_p1;
    end else begin
        grp_fu_287_p0 = 'bx;
    end
end

/// i_phi_fu_247_p4 assign process. ///
always @ (i_reg_243 or ap_reg_ppiten_pp2_it1 or exitcond_flatten_reg_777 or ap_sig_cseq_ST_pp2_stg0_fsm_5 or i_mid2_reg_786)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (exitcond_flatten_reg_777 == ap_const_lv1_0))) begin
        i_phi_fu_247_p4 = i_mid2_reg_786;
    end else begin
        i_phi_fu_247_p4 = i_reg_243;
    end
end

/// image_V_read assign process. ///
always @ (exitcond6_fu_319_p2 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_bdd_116)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond6_fu_319_p2) & ~ap_sig_bdd_116)) begin
        image_V_read = ap_const_logic_1;
    end else begin
        image_V_read = ap_const_logic_0;
    end
end

/// indvar_flatten_phi_fu_236_p4 assign process. ///
always @ (indvar_flatten_reg_232 or ap_reg_ppiten_pp2_it1 or exitcond_flatten_reg_777 or ap_sig_cseq_ST_pp2_stg0_fsm_5 or indvar_flatten_next_reg_781)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (exitcond_flatten_reg_777 == ap_const_lv1_0))) begin
        indvar_flatten_phi_fu_236_p4 = indvar_flatten_next_reg_781;
    end else begin
        indvar_flatten_phi_fu_236_p4 = indvar_flatten_reg_232;
    end
end

/// j_phi_fu_270_p4 assign process. ///
always @ (j_reg_266 or ap_reg_ppiten_pp2_it1 or exitcond_flatten_reg_777 or ap_sig_cseq_ST_pp2_stg0_fsm_5 or j_1_reg_801)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (exitcond_flatten_reg_777 == ap_const_lv1_0))) begin
        j_phi_fu_270_p4 = j_1_reg_801;
    end else begin
        j_phi_fu_270_p4 = j_reg_266;
    end
end

/// linebuff_address0 assign process. ///
always @ (ap_reg_ppiten_pp2_it0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_pp2_stg0_fsm_5 or ap_sig_cseq_ST_st5_fsm_4 or tmp_i_fu_314_p1 or tmp_8_fu_373_p1 or tmp_s_fu_392_p1 or tmp_17_fu_489_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        linebuff_address0 = tmp_s_fu_392_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        linebuff_address0 = tmp_i_fu_314_p1;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_5))) begin
        linebuff_address0 = tmp_17_fu_489_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        linebuff_address0 = tmp_8_fu_373_p1;
    end else begin
        linebuff_address0 = 'bx;
    end
end

/// linebuff_ce0 assign process. ///
always @ (ap_reg_ppiten_pp2_it0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_pp2_stg0_fsm_5 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | ((ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg0_fsm_5)) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        linebuff_ce0 = ap_const_logic_1;
    end else begin
        linebuff_ce0 = ap_const_logic_0;
    end
end

/// linebuff_d0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st5_fsm_4 or tmp_9_fu_384_p3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        linebuff_d0 = tmp_9_fu_384_p3;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        linebuff_d0 = ap_const_lv8_0;
    end else begin
        linebuff_d0 = 'bx;
    end
end

/// linebuff_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond5_reg_763 or exitcond7_i_i_fu_302_p2 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond7_i_i_fu_302_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond5_reg_763)))) begin
        linebuff_we0 = ap_const_logic_1;
    end else begin
        linebuff_we0 = ap_const_logic_0;
    end
end

/// weights_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp2_stg2_fsm_7 or ap_reg_ppiten_pp2_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg2_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1))) begin
        weights_ce0 = ap_const_logic_1;
    end else begin
        weights_ce0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp2_it0 or ap_reg_ppiten_pp2_it1 or ap_reg_ppiten_pp2_it2 or exitcond6_fu_319_p2 or ap_sig_bdd_116 or exitcond5_fu_361_p2 or exitcond_flatten_fu_397_p2 or ap_reg_ppiten_pp2_it3 or ap_sig_cseq_ST_pp2_stg1_fsm_6 or ap_sig_bdd_269 or exitcond7_i_i_fu_302_p2 or ap_sig_bdd_288)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_269) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((ap_const_lv1_0 == exitcond7_i_i_fu_302_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((~ap_sig_bdd_116 & ~(ap_const_lv1_0 == exitcond6_fu_319_p2))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((ap_const_lv1_0 == exitcond6_fu_319_p2) & ~ap_sig_bdd_116)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if ((ap_const_lv1_0 == exitcond5_fu_361_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_5;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_pp2_stg0_fsm_5 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & ~(ap_const_lv1_0 == exitcond_flatten_fu_397_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp2_it1))) begin
                ap_NS_fsm = ap_ST_pp2_stg1_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st23_fsm_10;
            end
        end
        ap_ST_pp2_stg1_fsm_6 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp2_it3) & (ap_const_logic_1 == ap_sig_cseq_ST_pp2_stg1_fsm_6) & ~(ap_const_logic_1 == ap_reg_ppiten_pp2_it2))) begin
                ap_NS_fsm = ap_ST_pp2_stg2_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st23_fsm_10;
            end
        end
        ap_ST_pp2_stg2_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_pp2_stg3_fsm_8;
        end
        ap_ST_pp2_stg3_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_pp2_stg4_fsm_9;
        end
        ap_ST_pp2_stg4_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_pp2_stg0_fsm_5;
        end
        ap_ST_st23_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_11;
        end
        ap_ST_st24_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_12;
        end
        ap_ST_st25_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st26_fsm_13;
        end
        ap_ST_st26_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st27_fsm_14;
        end
        ap_ST_st27_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st28_fsm_15;
        end
        ap_ST_st28_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st29_fsm_16;
        end
        ap_ST_st29_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st30_fsm_17;
        end
        ap_ST_st30_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st31_fsm_18;
        end
        ap_ST_st31_fsm_18 : 
        begin
            if (~ap_sig_bdd_288) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st31_fsm_18;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_102 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_102 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_111 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_111 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_116 assign process. ///
always @ (image_V_empty_n or exitcond6_fu_319_p2)
begin
    ap_sig_bdd_116 = ((image_V_empty_n == ap_const_logic_0) & (ap_const_lv1_0 == exitcond6_fu_319_p2));
end

/// ap_sig_bdd_137 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_137 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_151 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_151 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_181 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_181 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_196 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_196 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_215 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_215 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_228 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_228 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_237 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_237 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_248 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_248 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_269 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_269 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_282 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_282 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_12]);
end

/// ap_sig_bdd_288 assign process. ///
always @ (conv_output_V_full_n or or_cond_reg_846)
begin
    ap_sig_bdd_288 = ((conv_output_V_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == or_cond_reg_846));
end

/// ap_sig_bdd_303 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_303 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_38 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_38 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_74 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_74 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_92 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_92 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_11]);
end
assign conv_output_V_din = reg_296;
assign exitcond5_fu_361_p2 = (pos1_reg_220 == ap_const_lv7_75? 1'b1: 1'b0);
assign exitcond6_fu_319_p2 = (pixels_read_reg_208 == ap_const_lv10_310? 1'b1: 1'b0);
assign exitcond7_i_i_fu_302_p2 = (pos_0_i_i_reg_186 == ap_const_lv7_75? 1'b1: 1'b0);
assign exitcond_flatten_fu_397_p2 = (indvar_flatten_phi_fu_236_p4 == ap_const_lv5_19? 1'b1: 1'b0);
assign exitcond_fu_409_p2 = (j_phi_fu_270_p4 == ap_const_lv3_5? 1'b1: 1'b0);
assign grp_fu_277_ce = ap_const_logic_1;
assign grp_fu_277_p0 = p_02_1_reg_254;
assign grp_fu_277_p1 = tmp_22_reg_826;
assign grp_fu_282_ce = ap_const_logic_1;
assign grp_fu_282_p0 = reg_296;
assign grp_fu_282_p1 = weights_q0;
assign grp_fu_287_ce = ap_const_logic_1;
assign i_cast7_cast_fu_437_p1 = i_mid2_fu_429_p3;
assign i_mid2_fu_429_p3 = ((exitcond_fu_409_p2[0:0]===1'b1)? i_s_fu_423_p2: i_phi_fu_247_p4);
assign i_s_fu_423_p2 = (i_phi_fu_247_p4 + ap_const_lv3_1);
assign icmp_fu_581_p2 = ($signed(tmp_24_fu_572_p4) > $signed(30'b000000000000000000000000000000)? 1'b1: 1'b0);
assign indvar_flatten_next_fu_403_p2 = (indvar_flatten_phi_fu_236_p4 + ap_const_lv5_1);
assign input_assign_to_int_fu_524_p1 = p_02_1_reg_254;
assign isNeg_fu_646_p3 = sh_assign_fu_640_p2[ap_const_lv32_8];
assign j_1_fu_510_p2 = (j_mid2_fu_415_p3 + ap_const_lv3_1);
assign j_cast4_cast_fu_471_p1 = j_mid2_fu_415_p3;
assign j_cast5_fu_475_p1 = j_mid2_fu_415_p3;
assign j_mid2_fu_415_p3 = ((exitcond_fu_409_p2[0:0]===1'b1)? ap_const_lv3_0: j_phi_fu_270_p4);
assign loc_V_1_fu_620_p1 = p_Val2_s_fu_604_p3[22:0];
assign loc_V_fu_610_p4 = {{p_Val2_s_fu_604_p3[ap_const_lv32_1E : ap_const_lv32_17]}};
assign m_fu_335_p2 = (pixels_read_cast9_fu_331_p1 - t_reg_197);
assign not_s_fu_587_p2 = (tmp_4_reg_753 ^ ap_const_lv1_1);
assign notlhs_fu_542_p2 = (tmp_7_fu_528_p4 != ap_const_lv8_FF? 1'b1: 1'b0);
assign notrhs_fu_548_p2 = (tmp_1_fu_538_p1 == ap_const_lv23_0? 1'b1: 1'b0);
assign or_cond_fu_598_p2 = (tmp1_fu_592_p2 & icmp_fu_581_p2);
assign output_s_fu_722_p1 = result_V_reg_850;
assign p_Result_s_fu_624_p3 = {{ap_const_lv1_1}, {loc_V_1_fu_620_p1}};
assign p_Val2_s_fu_604_p3 = ((tmp_13_reg_841[0:0]===1'b1)? input_assign_to_int_reg_836: ap_const_lv32_0);
assign p_shl2_cast_fu_449_p1 = p_shl2_fu_441_p3;
assign p_shl2_fu_441_p3 = {{i_mid2_fu_429_p3}, {ap_const_lv5_0}};
assign p_shl3_cast_fu_461_p1 = p_shl3_fu_453_p3;
assign p_shl3_fu_453_p3 = {{i_mid2_fu_429_p3}, {ap_const_lv2_0}};
assign p_t_fu_353_p3 = ((tmp_4_fu_341_p2[0:0]===1'b1)? t_1_fu_347_p2: t_reg_197);
assign pixels_read_1_fu_325_p2 = (pixels_read_reg_208 + ap_const_lv10_1);
assign pixels_read_cast9_fu_331_p1 = pixels_read_reg_208;
assign pos_1_fu_367_p2 = (pos1_reg_220 + ap_const_lv7_1);
assign pos_fu_308_p2 = (pos_0_i_i_reg_186 + ap_const_lv7_1);
assign result_V_fu_714_p3 = ((isNeg_fu_646_p3[0:0]===1'b1)? tmp_14_fu_700_p1: tmp_15_fu_704_p4);
assign sh_assign_1_fu_664_p3 = ((isNeg_fu_646_p3[0:0]===1'b1)? tmp_1_i_cast_i_fu_660_p1: sh_assign_fu_640_p2);
assign sh_assign_1_i_cast_i_cast_fu_672_p1 = $signed(sh_assign_1_fu_664_p3);
assign sh_assign_fu_640_p2 = ($signed(ap_const_lv9_181) + $signed(tmp_i_i_cast_i_fu_636_p1));
assign t_1_fu_347_p2 = (t_reg_197 + ap_const_lv32_1C);
assign tmp1_fu_592_p2 = (tmp_5_fu_566_p2 & not_s_fu_587_p2);
assign tmp2_cast_fu_500_p1 = tmp2_fu_494_p2;
assign tmp2_fu_494_p2 = (j_cast4_cast_fu_471_p1 + i_cast7_cast_fu_437_p1);
assign tmp_10_fu_554_p2 = (notrhs_fu_548_p2 | notlhs_fu_542_p2);
assign tmp_11_fu_290_opcode = ap_const_lv5_2;
assign tmp_11_fu_290_p0 = p_02_1_reg_254;
assign tmp_11_fu_290_p1 = ap_const_lv32_0;
assign tmp_12_fu_465_p2 = (p_shl2_cast_fu_449_p1 - p_shl3_cast_fu_461_p1);
assign tmp_13_fu_560_p2 = (tmp_10_fu_554_p2 & tmp_11_fu_290_p2);
assign tmp_14_fu_700_p1 = tmp_23_fu_692_p3;
assign tmp_15_fu_704_p4 = {{tmp_5_i_i_fu_686_p2[ap_const_lv32_1E : ap_const_lv32_17]}};
assign tmp_16_cast_fu_485_p1 = $signed(tmp_16_fu_479_p2);
assign tmp_16_fu_479_p2 = (j_cast5_fu_475_p1 + tmp_12_fu_465_p2);
assign tmp_17_fu_489_p1 = $unsigned(tmp_16_cast_fu_485_p1);
assign tmp_18_fu_516_p1 = linebuff_load_1_reg_806;
assign tmp_1_fu_538_p1 = input_assign_to_int_fu_524_p1[22:0];
assign tmp_1_i_cast_i_fu_660_p1 = $signed(tmp_1_i_i_fu_654_p2);
assign tmp_1_i_i_fu_654_p2 = (ap_const_lv8_7F - loc_V_fu_610_p4);
assign tmp_20_fu_504_p2 = (p_shl3_fu_453_p3 + tmp2_cast_fu_500_p1);
assign tmp_21_fu_520_p1 = ap_reg_ppstg_tmp_20_reg_796_pp2_it1;
assign tmp_23_fu_692_p3 = tmp_3_i_i_fu_676_p2[ap_const_lv32_17];
assign tmp_24_fu_572_p4 = {{m_reg_748[ap_const_lv32_1F : ap_const_lv32_2]}};
assign tmp_3_i_i_fu_676_p2 = p_Result_s_fu_624_p3 >> sh_assign_1_i_cast_i_cast_fu_672_p1;
assign tmp_4_fu_341_p2 = ($signed(m_fu_335_p2) > $signed(32'b11011)? 1'b1: 1'b0);
assign tmp_4_i_cast_i_fu_682_p1 = sh_assign_1_fu_664_p3;
assign tmp_5_fu_566_p2 = (pixels_read_reg_208 > ap_const_lv10_74? 1'b1: 1'b0);
assign tmp_5_i_i_fu_686_p2 = tmp_i_cast_i_fu_632_p1 << tmp_4_i_cast_i_fu_682_p1;
assign tmp_6_fu_378_p2 = (pos1_reg_220 < ap_const_lv7_74? 1'b1: 1'b0);
assign tmp_7_fu_528_p4 = {{input_assign_to_int_fu_524_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
assign tmp_8_fu_373_p1 = pos_1_fu_367_p2;
assign tmp_9_fu_384_p3 = ((tmp_6_fu_378_p2[0:0]===1'b1)? linebuff_q0: read_reg_743);
assign tmp_i_cast_i_fu_632_p1 = p_Result_s_fu_624_p3;
assign tmp_i_fu_314_p1 = pos_0_i_i_reg_186;
assign tmp_i_i_cast_i_fu_636_p1 = loc_V_fu_610_p4;
assign tmp_s_fu_392_p1 = pos1_reg_220;
assign weights_address0 = tmp_21_fu_520_p1;


endmodule //convolve_Loop_BUFFER_RESET_proc

