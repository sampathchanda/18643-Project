// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      convolve
`define AUTOTB_DUT_INST AESL_inst_convolve
`define AUTOTB_TOP      apatb_convolve_top
`define AUTOTB_LAT_RESULT_FILE "convolve.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "convolve.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_convolve_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_TRANSACTION_NUM  1
`define AUTOTB_CLOCK_PERIOD 10.000000
`define LENGTH_image_V 784
`define LENGTH_weights 25
`define LENGTH_conv_output_V 575
`define LENGTH_done 1

`define	AESL_FIFO_image_V AESL_autofifo_image_V
`define	AESL_FIFO_INST_image_V AESL_autofifo_inst_image_V
`define	AESL_MEM_weights AESL_automem_weights
`define	AESL_MEM_INST_weights mem_inst_weights
`define	AESL_FIFO_conv_output_V AESL_autofifo_conv_output_V
`define	AESL_FIFO_INST_conv_output_V AESL_autofifo_inst_conv_output_V
`define   AESL_DEPTH_done 1
`define AUTOTB_TVIN_image_V  "./c.convolve.autotvin_image_V.dat"
`define AUTOTB_TVIN_weights  "./c.convolve.autotvin_weights.dat"
`define AUTOTB_TVIN_conv_output_V  "./c.convolve.autotvin_conv_output_V.dat"
`define AUTOTB_TVIN_image_V_out_wrapc  "./rtl.convolve.autotvin_image_V.dat"
`define AUTOTB_TVIN_weights_out_wrapc  "./rtl.convolve.autotvin_weights.dat"
`define AUTOTB_TVIN_conv_output_V_out_wrapc  "./rtl.convolve.autotvin_conv_output_V.dat"
`define AUTOTB_TVOUT_conv_output_V  "./c.convolve.autotvout_conv_output_V.dat"
`define AUTOTB_TVOUT_done  "./c.convolve.autotvout_done.dat"
`define AUTOTB_TVOUT_conv_output_V_out_wrapc  "./impl_rtl.convolve.autotvout_conv_output_V.dat"
`define AUTOTB_TVOUT_done_out_wrapc  "./impl_rtl.convolve.autotvout_done.dat"

module `AUTOTB_TOP;
task read_token;
    input integer fp;
    output reg [183 : 0] token;
    reg [7:0] c;
    reg intoken;
    reg done;
    begin
        token = "";
        intoken = 0;
        done = 0;
        while (!done) begin
            c = $fgetc(fp);
            if (c == 8'hff) begin   // EOF
                done = 1;
            end
            else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
                if (intoken) begin
                    done = 1;
                end
            end
            else begin              // valid character
                intoken = 1;
                token = (token << 8) | c;
            end
        end
    end
endtask

task post_check;
    input integer fp1;
    input integer fp2;
    reg [183 : 0] token1;
    reg [183 : 0] token2;
    reg [183 : 0] golden;
    reg [183 : 0] result;
    integer ret;
    begin
        read_token(fp1, token1);
        read_token(fp2, token2);
        if (token1 != "[[[runtime]]]" || token2 != "[[[runtime]]]") begin // Illegal format
            $display("ERROR: Simulation using HLS TB failed.");
            $finish;
        end
        read_token(fp1, token1);
        read_token(fp2, token2);
        while (token1 != "[[[/runtime]]]" && token2 != "[[[/runtime]]]") begin
            if (token1 != "[[transaction]]" || token2 != "[[transaction]]") begin
                $display("ERROR: Simulation using HLS TB failed.");
	              $finish;
            end
            read_token(fp1, token1);  // skip transaction number
            read_token(fp2, token2);  // skip transaction number
	          read_token(fp1, token1);
	          read_token(fp2, token2);
            while(token1 != "[[/transaction]]" && token2 != "[[/transaction]]") begin
                ret = $sscanf(token1, "0x%x", golden);
	              if (ret != 1) begin
	                  $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
	              end
                ret = $sscanf(token2, "0x%x", result);
	              if (ret != 1) begin
	                  $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
	              end
                if(golden != result) begin
	                  $display("%x (expected) vs. %x (actual) - mismatch", golden, result);
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
                end
	              read_token(fp1, token1);
	              read_token(fp2, token2);
            end
	          read_token(fp1, token1);
	          read_token(fp2, token2);
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
reg [31 : 0] AESL_mLatCnterIn [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterIn_addr;
reg [31 : 0] AESL_mLatCnterOut [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterOut_addr ;
reg [31 : 0] AESL_clk_counter ;
reg [20 - 1 : 0] AESL_clk_ready[0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [20 - 1 : 0] AESL_clk_done[0 : `AUTOTB_TRANSACTION_NUM + 1];

reg reported_stuck = 0;
reg reported_stuck_cnt = 0;
wire [7 : 0] image_V_dout;
wire  image_V_empty_n;
wire  image_V_read;
wire [4 : 0] weights_address0;
wire  weights_ce0;
wire [31 : 0] weights_d0;
wire [31 : 0] weights_q0;
wire  weights_we0;
wire [4 : 0] weights_address1;
wire  weights_ce1;
wire [31 : 0] weights_d1;
wire [31 : 0] weights_q1;
wire  weights_we1;
wire [31 : 0] conv_output_V_din;
wire  conv_output_V_full_n;
wire  conv_output_V_write;
wire [31 : 0] done;
wire ap_clk;
wire ap_rst;
wire ap_done;
wire  done_ap_vld;
wire ap_start;
wire ap_idle;
wire ap_ready;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
.image_V_dout(image_V_dout),
.image_V_empty_n(image_V_empty_n),
.image_V_read(image_V_read),
.weights_address0(weights_address0),
.weights_ce0(weights_ce0),
.weights_d0(weights_d0),
.weights_q0(weights_q0),
.weights_we0(weights_we0),
.weights_address1(weights_address1),
.weights_ce1(weights_ce1),
.weights_d1(weights_d1),
.weights_q1(weights_q1),
.weights_we1(weights_we1),
.conv_output_V_din(conv_output_V_din),
.conv_output_V_full_n(conv_output_V_full_n),
.conv_output_V_write(conv_output_V_write),
.done(done),
.ap_clk(ap_clk),
.ap_rst(ap_rst),
.ap_done(ap_done),
.done_ap_vld(done_ap_vld),
.ap_start(ap_start),
.ap_idle(ap_idle),
.ap_ready(ap_ready)
);

// Assignment for control signal
  assign ap_clk = AESL_clock;
  assign ap_rst = AESL_reset;
  assign ap_rst_n = ~AESL_reset;
  assign AESL_reset = rst;
  assign AESL_done = ap_done;
  assign ap_start = AESL_start;
  assign AESL_start = start;
  assign AESL_idle = ap_idle;
  assign AESL_ready = ap_ready;
  assign AESL_ce = ce;
  assign AESL_continue = continue;
  always @(posedge AESL_clock)
  begin
    if(AESL_reset)
      ;
      else begin
          if ( AESL_done !== 1 && AESL_done !== 0 ) begin 
              $display("ERROR: Control signal AESL_done is invalid!");
              $finish;
          end
      end
  end
  always @(posedge AESL_clock)
  begin
    if(AESL_reset)
      ;
      else begin
          if ( AESL_ready !== 1 && AESL_ready !== 0 ) begin 
              $display("ERROR: Control signal AESL_ready is invalid!");
              $finish;
          end
      end
  end
//------------------------Fifoimage_V Instantiation--------------

// The input and output of fifoimage_V
wire        fifoimage_V_rd;
wire        [7 : 0] fifoimage_V_dout;
wire        fifoimage_V_empty_n;
wire  fifoimage_V_ready;
wire  fifoimage_V_done;
integer ap_c_n_tvin_image_V_trans_num;
reg   image_V_ready_reg;

`AESL_FIFO_image_V `AESL_FIFO_INST_image_V(
    .clk          (AESL_clock),
    .reset        (AESL_reset),
    .if_write     (),
    .if_din       (),
    .if_full_n    (),
    .if_read      (fifoimage_V_rd),
    .if_dout      (fifoimage_V_dout),
    .if_empty_n   (fifoimage_V_empty_n),
    .ready        (fifoimage_V_ready),
    .done         (fifoimage_V_done)
);

// Assignment between dut and fifoimage_V

// Assign input of fifoimage_V
assign      fifoimage_V_rd        =   image_V_read & image_V_empty_n;
assign    fifoimage_V_ready   =   image_V_ready_reg | ready_initial;
assign    fifoimage_V_done    =   0;
// Assign input of dut
assign      image_V_dout       =   fifoimage_V_dout;
reg   reg_fifoimage_V_empty_n;
initial begin : gen_reg_fifoimage_V_empty_n_process
    integer rand;
    reg_fifoimage_V_empty_n = fifoimage_V_empty_n;
    while(1)
    begin
        @(fifoimage_V_empty_n);
        if(fifoimage_V_empty_n === 1)
        begin
        end
        reg_fifoimage_V_empty_n = fifoimage_V_empty_n;
    end
end

assign      image_V_empty_n    =   reg_fifoimage_V_empty_n;


//------------------------arrayweights Instantiation--------------

// The input and output of arrayweights
wire    arrayweights_ce0, arrayweights_ce1;
wire	arrayweights_we0, arrayweights_we1;
wire    [4 : 0]	arrayweights_address0, arrayweights_address1;
wire	[31 : 0]	arrayweights_din0, arrayweights_din1;
wire    [31 : 0]	arrayweights_dout0, arrayweights_dout1;
wire	arrayweights_ready;
wire	arrayweights_done;

`AESL_MEM_weights `AESL_MEM_INST_weights(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayweights_ce0),
    .we0        (arrayweights_we0),
    .address0   (arrayweights_address0),
    .din0       (arrayweights_din0),
    .dout0      (arrayweights_dout0),
    .ce1        (arrayweights_ce1),
    .we1        (arrayweights_we1),
    .address1   (arrayweights_address1),
    .din1       (arrayweights_din1),
    .dout1      (arrayweights_dout1),
    .ready	  (arrayweights_ready),
    .done	(arrayweights_done)
);

// Assignment between dut and arrayweights
assign arrayweights_address0 = weights_address0;
assign arrayweights_ce0 = weights_ce0;
assign weights_q0 = arrayweights_dout0;
assign arrayweights_we0 = 0;
assign arrayweights_din0 = 0;
assign arrayweights_we1 = 0;
assign arrayweights_din1 = 0;
assign arrayweights_ready=	ready;
assign arrayweights_done = 0;


//------------------------Fifoconv_output_V Instantiation--------------

// The input and output of fifoconv_output_V
wire  fifoconv_output_V_wr;
wire  [31 : 0] fifoconv_output_V_din;
wire  fifoconv_output_V_full_n;
wire  fifoconv_output_V_ready;
wire  fifoconv_output_V_done;

`AESL_FIFO_conv_output_V `AESL_FIFO_INST_conv_output_V(
    .clk          (AESL_clock),
    .reset        (AESL_reset),
    .if_write     (fifoconv_output_V_wr),
    .if_din       (fifoconv_output_V_din),
    .if_full_n    (fifoconv_output_V_full_n),
    .if_read      (),
    .if_dout      (),
    .if_empty_n   (),
    .ready        (fifoconv_output_V_ready),
    .done         (fifoconv_output_V_done)
);

// Assignment between dut and fifoconv_output_V

// Assign input of fifoconv_output_V
assign      fifoconv_output_V_wr        =   conv_output_V_write & conv_output_V_full_n;
assign      fifoconv_output_V_din        =   conv_output_V_din;
assign    fifoconv_output_V_ready   =  0;   //ready_initial | AESL_done_delay;
assign    fifoconv_output_V_done    =   AESL_done_delay;
// Assign input of dut
reg   reg_fifoconv_output_V_full_n;
initial begin : gen_reg_fifoconv_output_V_full_n_process
    integer rand;
    reg_fifoconv_output_V_full_n = fifoconv_output_V_full_n;
    while(1)
    begin
        @(fifoconv_output_V_full_n);
        if(fifoconv_output_V_full_n === 1)
        begin
        end
        reg_fifoconv_output_V_full_n = fifoconv_output_V_full_n;
    end
end

assign      conv_output_V_full_n    =   reg_fifoconv_output_V_full_n;


reg AESL_REG_done_ap_vld = 0;
// The signal of port done
reg [31: 0] AESL_REG_done = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_done = 0; 
    else if(done_ap_vld) begin
        AESL_REG_done <= done;
        AESL_REG_done_ap_vld <= 1;
    end
end 

initial begin : write_file_process_done
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer rand;
    integer done_count;
    reg [183  : 0] token;
    integer transaction_idx;
    reg [ 8*5 : 1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_done_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_done_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != `AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
	      while(AESL_done !== 1) begin
	          @(posedge AESL_clock);
	      end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_done_ap_vld)  begin
	      $fdisplay(fp,"0x%x", AESL_REG_done);
        AESL_REG_done_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
	  $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 0);
    while(AESL_ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_ready_cnt_proc
    ready_cnt = 0;
    wait(AESL_reset === 0);
    while(ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        ready_cnt = ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_done_cnt_proc
    integer fp1;
    integer fp2;
    done_cnt = 0;
    wait(AESL_reset === 0);
    while(done_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_done !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        done_cnt = done_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
    @(posedge AESL_clock);
    # 0.4;
    fp1 = $fopen("./rtl.convolve.autotvout_conv_output_V.dat", "r");
    fp2 = $fopen("./impl_rtl.convolve.autotvout_conv_output_V.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.convolve.autotvout_conv_output_V.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.convolve.autotvout_conv_output_V.dat\"!");
    else begin
        $display("Comparing rtl.convolve.autotvout_conv_output_V.dat with impl_rtl.convolve.autotvout_conv_output_V.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
    fp1 = $fopen("./rtl.convolve.autotvout_done.dat", "r");
    fp2 = $fopen("./impl_rtl.convolve.autotvout_done.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.convolve.autotvout_done.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.convolve.autotvout_done.dat\"!");
    else begin
        $display("Comparing rtl.convolve.autotvout_done.dat with impl_rtl.convolve.autotvout_done.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
        $display("Simulation Passed.");
    $finish;
end

initial fork
    AESL_clock = 0;
    forever #(`AUTOTB_CLOCK_PERIOD/2) AESL_clock = ~AESL_clock;
join

initial begin : initial_process
    integer rand;
    rst = 1;
    # 100;
	  repeat(3) @(posedge AESL_clock);
    rst = 0;
end

initial begin : start_process
  integer rand;
  start = 0;
  ce = 1;
    wait(AESL_reset === 0);
  @(posedge AESL_clock);
  start <= 1;
  while(ready_cnt != `AUTOTB_TRANSACTION_NUM + 1) begin
      @(posedge AESL_clock);
      if(AESL_ready == 1) begin
          start <= 0;
          start <= 1;
      end
  end
  start <= 0;
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == `AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt != `AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end
initial begin : proc_gen_image_V_internal_ready
    integer internal_trans_num;
    wait(AESL_reset === 0);
    wait(ready_initial === 1);
    image_V_ready_reg <= 0;
    @(posedge AESL_clock);
    internal_trans_num = 1;
    while(internal_trans_num != `AUTOTB_TRANSACTION_NUM + 1) begin
        if (ap_c_n_tvin_image_V_trans_num > internal_trans_num) begin
            image_V_ready_reg <= 1;
            @(posedge AESL_clock);
            image_V_ready_reg <= 0;
            internal_trans_num = internal_trans_num + 1;
        end
        else begin
            @(posedge AESL_clock);
        end
    end
    image_V_ready_reg <= 0;
end
initial begin : proc_ap_c_n_tvin_image_V_trans_num
    integer i;
    integer fp;
    integer ret;
    integer size;
    reg [127 : 0] token;
    fp = $fopen("./stream_size_in_image_V.dat","r");
    if(fp == 0) begin       // Failed to open file
	      $display("Failed to open file \"%s\"!","../tv/stream_size/stream_size_in_image_V.dat" );
        $display("ERROR: Simulation using HLS TB failed.");
	      $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin             // Illegal format
        $display("ERROR: Simulation using HLS TB failed.");
	      $finish;
    end
    read_token(fp, token);
    @(posedge AESL_clock);
    ap_c_n_tvin_image_V_trans_num = 1;
    while(token != "[[[/runtime]]]") begin
        i = 0;
        if (token != "[[transaction]]") begin             // Illegal format
            $display("ERROR: Simulation using HLS TB failed.");
	          $finish;
        end
        read_token(fp, token);     // skip transaction number
        read_token(fp, token);
        #0.5;
        //this is for hls::stream port
        ret = $sscanf(token, "%d", size);
        if (ret != 1) begin
            $display("Failed to parse token!");
            $display("ERROR: Simulation using HLS TB failed.");
            $finish;
        end
        while (i != size) begin
            if (image_V_read == 1) begin 
               i = i + 1;
           end 
           if (i != size) begin
               @(posedge AESL_clock);
               #0.5;
           end 
       end 
       read_token(fp, token);//[[/transaction]]
        read_token(fp, token);
        ap_c_n_tvin_image_V_trans_num = ap_c_n_tvin_image_V_trans_num + 1;
        if (i != 0) begin
            @(posedge AESL_clock);
        end 
    end
    if (token != "[[[/runtime]]]") begin             // Illegal format
        $display("ERROR: Simulation using HLS TB failed.");
	      $finish;
    end
    @(posedge AESL_clock);
    $fclose(fp);
end

// Write "[[[runtime]]]" and "[[[/runtime]]]" for output-only transactor 
initial begin : write_output_transactor_conv_output_V_runtime_process
    integer fp;
    fp = $fopen(`AUTOTB_TVOUT_conv_output_V_out_wrapc, "w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_conv_output_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait(done_cnt == `AUTOTB_TRANSACTION_NUM)
	  repeat(2) @(posedge AESL_clock);
    # 0.2;
    fp = $fopen(`AUTOTB_TVOUT_conv_output_V_out_wrapc, "a");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_conv_output_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end

always @ (negedge AESL_clock) begin
    if(AESL_reset)
    begin
        AESL_clk_counter <= 0;
    end 
    else begin
        AESL_clk_counter = AESL_clk_counter + 1;
    end    
end

always @ (posedge AESL_clock or posedge AESL_reset) begin
    if(AESL_reset)
    begin
        AESL_mLatCnterOut_addr = 0;
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter + 1;
        reported_stuck_cnt <= 0;
    end
    else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter;
        AESL_mLatCnterOut_addr = AESL_mLatCnterOut_addr + 1;
        reported_stuck <= 0;
    end
    else if (reported_stuck == 0 && reported_stuck_cnt < 4) begin
        if ( AESL_mLatCnterIn_addr > AESL_mLatCnterOut_addr ) begin
          if ( AESL_clk_counter - AESL_mLatCnterIn[AESL_mLatCnterOut_addr] > 10 * 299607 ) begin
              $display("WARNING: The latency is much larger than expected. Simulation may stuck.");
              reported_stuck <= 1;
              reported_stuck_cnt <= reported_stuck_cnt + 1;
          end
        end
    end
end

always @ (posedge AESL_clock or posedge AESL_reset) begin
    if(AESL_reset)
    begin
        AESL_mLatCnterIn_addr = 0;
    end
    else begin
        if (AESL_start && AESL_mLatCnterIn_addr == 0) begin
            AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
            AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
        end
        if (AESL_ready && AESL_mLatCnterIn_addr < `AUTOTB_TRANSACTION_NUM + 1 ) begin
            AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
            AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
        end
    end
end

initial begin : performance_check
	integer transaction_counter;
	integer i;
	integer fp;

	integer latthistime;
	integer lattotal;
	integer latmax;
	integer latmin;


	integer thrthistime;
	integer thrtotal;
	integer thrmax;
	integer thrmin;

	integer lataver;
	integer thraver;
	reg [31 : 0] lat_array [0 : `AUTOTB_TRANSACTION_NUM];
	reg [31 : 0] thr_array [0 : `AUTOTB_TRANSACTION_NUM];


	i = 0;
	lattotal = 0;
	latmax = 0;
	latmin = 32'h 7fffffff;
	lataver = 0;

	thrtotal = 0;
	thrmax = 0;
	thrmin = 32'h 7fffffff;
	thraver = 0;

	@(negedge AESL_clock);
	@(negedge AESL_reset);
	while (done_cnt != `AUTOTB_TRANSACTION_NUM) begin
		@(posedge AESL_clock);
	end

	#0.001

	if (AESL_mLatCnterIn_addr == 0) begin
		latmax  = 0;
		latmin  = 0;
		lataver = 0;
		thrmax  = 0;
		thrmin  = 0;
		thraver = 0;
		lat_array[0] = 0;
		thr_array[0] = 0;
	end else if (AESL_mLatCnterOut_addr == 1 || AESL_mLatCnterOut_addr == 0 ) begin
		latmax  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		latmin  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		lataver = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		thrmax  = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
		thrmin  = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
		thraver = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
		lat_array[0] = lataver;
		thr_array[0] = thraver;
	end else begin
		// LATENCY
		for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
			latthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i];
			if (i > 0) latthistime = (latthistime < 1) ? 0 : (latthistime - 1);
			lattotal = lattotal + latthistime;
			lat_array[i] = latthistime;
			if (latthistime > latmax) latmax = latthistime;
			if (latthistime < latmin) latmin = latthistime;
		end
		// II
		for (i = 0; i < AESL_mLatCnterIn_addr - 1; i = i + 1) begin
			thrthistime = AESL_mLatCnterIn[i + 1] - AESL_mLatCnterIn[i];
			if (i == 0) thrthistime = thrthistime + 1;
			thrtotal = thrtotal + thrthistime;
			thr_array[i] = thrthistime;
			if (thrthistime > thrmax) thrmax = thrthistime;
			if (thrthistime < thrmin) thrmin = thrthistime;
		end

		thr_array[AESL_mLatCnterIn_addr - 1] = 0;
		lataver = lattotal / (AESL_mLatCnterOut_addr);
		thraver = thrtotal / (AESL_mLatCnterIn_addr - 1);
	end

	fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

	$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax );
	$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin );
	$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver );
	$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", thrmax );
	$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", thrmin );
	$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", thraver );
	$fclose(fp);
	fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");
	$fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
	for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
		$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
	end

	$fclose(fp);
end
endmodule
