// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "convolve.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic convolve::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> convolve::ap_const_lv5_0 = "00000";
const sc_lv<32> convolve::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic convolve::ap_const_logic_1 = sc_dt::Log_1;
const bool convolve::ap_true = true;

convolve::convolve(sc_module_name name) : sc_module(name), mVcdFile(0) {
    convolve_Loop_BUFFER_RESET_proc_U0 = new convolve_Loop_BUFFER_RESET_proc("convolve_Loop_BUFFER_RESET_proc_U0");
    convolve_Loop_BUFFER_RESET_proc_U0->ap_clk(ap_clk);
    convolve_Loop_BUFFER_RESET_proc_U0->ap_rst(ap_rst);
    convolve_Loop_BUFFER_RESET_proc_U0->ap_start(convolve_Loop_BUFFER_RESET_proc_U0_ap_start);
    convolve_Loop_BUFFER_RESET_proc_U0->ap_done(convolve_Loop_BUFFER_RESET_proc_U0_ap_done);
    convolve_Loop_BUFFER_RESET_proc_U0->ap_continue(convolve_Loop_BUFFER_RESET_proc_U0_ap_continue);
    convolve_Loop_BUFFER_RESET_proc_U0->ap_idle(convolve_Loop_BUFFER_RESET_proc_U0_ap_idle);
    convolve_Loop_BUFFER_RESET_proc_U0->ap_ready(convolve_Loop_BUFFER_RESET_proc_U0_ap_ready);
    convolve_Loop_BUFFER_RESET_proc_U0->weights_address0(convolve_Loop_BUFFER_RESET_proc_U0_weights_address0);
    convolve_Loop_BUFFER_RESET_proc_U0->weights_ce0(convolve_Loop_BUFFER_RESET_proc_U0_weights_ce0);
    convolve_Loop_BUFFER_RESET_proc_U0->weights_q0(convolve_Loop_BUFFER_RESET_proc_U0_weights_q0);
    convolve_Loop_BUFFER_RESET_proc_U0->image_V_dout(convolve_Loop_BUFFER_RESET_proc_U0_image_V_dout);
    convolve_Loop_BUFFER_RESET_proc_U0->image_V_empty_n(convolve_Loop_BUFFER_RESET_proc_U0_image_V_empty_n);
    convolve_Loop_BUFFER_RESET_proc_U0->image_V_read(convolve_Loop_BUFFER_RESET_proc_U0_image_V_read);
    convolve_Loop_BUFFER_RESET_proc_U0->conv_output_V_din(convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_din);
    convolve_Loop_BUFFER_RESET_proc_U0->conv_output_V_full_n(convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_full_n);
    convolve_Loop_BUFFER_RESET_proc_U0->conv_output_V_write(convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_write);
    convolve_Block_proc_U0 = new convolve_Block_proc("convolve_Block_proc_U0");
    convolve_Block_proc_U0->ap_clk(ap_clk);
    convolve_Block_proc_U0->ap_rst(ap_rst);
    convolve_Block_proc_U0->ap_start(convolve_Block_proc_U0_ap_start);
    convolve_Block_proc_U0->ap_done(convolve_Block_proc_U0_ap_done);
    convolve_Block_proc_U0->ap_continue(convolve_Block_proc_U0_ap_continue);
    convolve_Block_proc_U0->ap_idle(convolve_Block_proc_U0_ap_idle);
    convolve_Block_proc_U0->ap_ready(convolve_Block_proc_U0_ap_ready);
    convolve_Block_proc_U0->done(convolve_Block_proc_U0_done);
    convolve_Block_proc_U0->done_ap_vld(convolve_Block_proc_U0_done_ap_vld);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_hs_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( convolve_Loop_BUFFER_RESET_proc_U0_ap_idle );
    sensitive << ( convolve_Block_proc_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_top_allready );

    SC_METHOD(thread_ap_sig_hs_continue);
    sensitive << ( ap_sig_hs_done );

    SC_METHOD(thread_ap_sig_hs_done);
    sensitive << ( ap_reg_procdone_convolve_Loop_BUFFER_RESET_proc_U0 );
    sensitive << ( ap_reg_procdone_convolve_Block_proc_U0 );

    SC_METHOD(thread_ap_sig_top_allready);
    sensitive << ( convolve_Loop_BUFFER_RESET_proc_U0_ap_ready );

    SC_METHOD(thread_conv_output_V_din);
    sensitive << ( convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_din );

    SC_METHOD(thread_conv_output_V_write);
    sensitive << ( convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_write );

    SC_METHOD(thread_convolve_Block_proc_U0_ap_continue);
    sensitive << ( ap_sig_hs_continue );

    SC_METHOD(thread_convolve_Block_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_convolve_Loop_BUFFER_RESET_proc_U0_ap_continue);
    sensitive << ( ap_sig_hs_continue );

    SC_METHOD(thread_convolve_Loop_BUFFER_RESET_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_full_n);
    sensitive << ( conv_output_V_full_n );

    SC_METHOD(thread_convolve_Loop_BUFFER_RESET_proc_U0_image_V_dout);
    sensitive << ( image_V_dout );

    SC_METHOD(thread_convolve_Loop_BUFFER_RESET_proc_U0_image_V_empty_n);
    sensitive << ( image_V_empty_n );

    SC_METHOD(thread_convolve_Loop_BUFFER_RESET_proc_U0_weights_q0);
    sensitive << ( weights_q0 );

    SC_METHOD(thread_done);
    sensitive << ( convolve_Block_proc_U0_done );

    SC_METHOD(thread_done_ap_vld);
    sensitive << ( convolve_Block_proc_U0_done_ap_vld );

    SC_METHOD(thread_image_V_read);
    sensitive << ( convolve_Loop_BUFFER_RESET_proc_U0_image_V_read );

    SC_METHOD(thread_weights_address0);
    sensitive << ( convolve_Loop_BUFFER_RESET_proc_U0_weights_address0 );

    SC_METHOD(thread_weights_address1);

    SC_METHOD(thread_weights_ce0);
    sensitive << ( convolve_Loop_BUFFER_RESET_proc_U0_weights_ce0 );

    SC_METHOD(thread_weights_ce1);

    SC_METHOD(thread_weights_d0);

    SC_METHOD(thread_weights_d1);

    SC_METHOD(thread_weights_we0);

    SC_METHOD(thread_weights_we1);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_reg_procdone_convolve_Loop_BUFFER_RESET_proc_U0 = SC_LOGIC_0;
    ap_reg_procdone_convolve_Block_proc_U0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "convolve_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, image_V_dout, "(port)image_V_dout");
    sc_trace(mVcdFile, image_V_empty_n, "(port)image_V_empty_n");
    sc_trace(mVcdFile, image_V_read, "(port)image_V_read");
    sc_trace(mVcdFile, weights_address0, "(port)weights_address0");
    sc_trace(mVcdFile, weights_ce0, "(port)weights_ce0");
    sc_trace(mVcdFile, weights_d0, "(port)weights_d0");
    sc_trace(mVcdFile, weights_q0, "(port)weights_q0");
    sc_trace(mVcdFile, weights_we0, "(port)weights_we0");
    sc_trace(mVcdFile, weights_address1, "(port)weights_address1");
    sc_trace(mVcdFile, weights_ce1, "(port)weights_ce1");
    sc_trace(mVcdFile, weights_d1, "(port)weights_d1");
    sc_trace(mVcdFile, weights_q1, "(port)weights_q1");
    sc_trace(mVcdFile, weights_we1, "(port)weights_we1");
    sc_trace(mVcdFile, conv_output_V_din, "(port)conv_output_V_din");
    sc_trace(mVcdFile, conv_output_V_full_n, "(port)conv_output_V_full_n");
    sc_trace(mVcdFile, conv_output_V_write, "(port)conv_output_V_write");
    sc_trace(mVcdFile, done, "(port)done");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, done_ap_vld, "(port)done_ap_vld");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_ap_start, "convolve_Loop_BUFFER_RESET_proc_U0_ap_start");
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_ap_done, "convolve_Loop_BUFFER_RESET_proc_U0_ap_done");
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_ap_continue, "convolve_Loop_BUFFER_RESET_proc_U0_ap_continue");
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_ap_idle, "convolve_Loop_BUFFER_RESET_proc_U0_ap_idle");
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_ap_ready, "convolve_Loop_BUFFER_RESET_proc_U0_ap_ready");
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_weights_address0, "convolve_Loop_BUFFER_RESET_proc_U0_weights_address0");
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_weights_ce0, "convolve_Loop_BUFFER_RESET_proc_U0_weights_ce0");
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_weights_q0, "convolve_Loop_BUFFER_RESET_proc_U0_weights_q0");
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_image_V_dout, "convolve_Loop_BUFFER_RESET_proc_U0_image_V_dout");
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_image_V_empty_n, "convolve_Loop_BUFFER_RESET_proc_U0_image_V_empty_n");
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_image_V_read, "convolve_Loop_BUFFER_RESET_proc_U0_image_V_read");
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_din, "convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_din");
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_full_n, "convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_full_n");
    sc_trace(mVcdFile, convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_write, "convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_write");
    sc_trace(mVcdFile, ap_sig_hs_continue, "ap_sig_hs_continue");
    sc_trace(mVcdFile, convolve_Block_proc_U0_ap_start, "convolve_Block_proc_U0_ap_start");
    sc_trace(mVcdFile, convolve_Block_proc_U0_ap_done, "convolve_Block_proc_U0_ap_done");
    sc_trace(mVcdFile, convolve_Block_proc_U0_ap_continue, "convolve_Block_proc_U0_ap_continue");
    sc_trace(mVcdFile, convolve_Block_proc_U0_ap_idle, "convolve_Block_proc_U0_ap_idle");
    sc_trace(mVcdFile, convolve_Block_proc_U0_ap_ready, "convolve_Block_proc_U0_ap_ready");
    sc_trace(mVcdFile, convolve_Block_proc_U0_done, "convolve_Block_proc_U0_done");
    sc_trace(mVcdFile, convolve_Block_proc_U0_done_ap_vld, "convolve_Block_proc_U0_done_ap_vld");
    sc_trace(mVcdFile, ap_reg_procdone_convolve_Loop_BUFFER_RESET_proc_U0, "ap_reg_procdone_convolve_Loop_BUFFER_RESET_proc_U0");
    sc_trace(mVcdFile, ap_sig_hs_done, "ap_sig_hs_done");
    sc_trace(mVcdFile, ap_reg_procdone_convolve_Block_proc_U0, "ap_reg_procdone_convolve_Block_proc_U0");
    sc_trace(mVcdFile, ap_CS, "ap_CS");
    sc_trace(mVcdFile, ap_sig_top_allready, "ap_sig_top_allready");
#endif

    }
    mHdltvinHandle.open("convolve.hdltvin.dat");
    mHdltvoutHandle.open("convolve.hdltvout.dat");
}

convolve::~convolve() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete convolve_Loop_BUFFER_RESET_proc_U0;
    delete convolve_Block_proc_U0;
}

void convolve::thread_ap_clk_no_reset_() {
    ap_CS = ap_const_logic_0;
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_procdone_convolve_Block_proc_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_convolve_Block_proc_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, convolve_Block_proc_U0_ap_done.read())) {
            ap_reg_procdone_convolve_Block_proc_U0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_procdone_convolve_Loop_BUFFER_RESET_proc_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_convolve_Loop_BUFFER_RESET_proc_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(convolve_Loop_BUFFER_RESET_proc_U0_ap_done.read(), ap_const_logic_1)) {
            ap_reg_procdone_convolve_Loop_BUFFER_RESET_proc_U0 = ap_const_logic_1;
        }
    }
}

void convolve::thread_ap_done() {
    ap_done = ap_sig_hs_done.read();
}

void convolve::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(convolve_Loop_BUFFER_RESET_proc_U0_ap_idle.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, convolve_Block_proc_U0_ap_idle.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void convolve::thread_ap_ready() {
    ap_ready = ap_sig_top_allready.read();
}

void convolve::thread_ap_sig_hs_continue() {
    ap_sig_hs_continue = ap_sig_hs_done.read();
}

void convolve::thread_ap_sig_hs_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_procdone_convolve_Block_proc_U0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_procdone_convolve_Loop_BUFFER_RESET_proc_U0.read()))) {
        ap_sig_hs_done = ap_const_logic_1;
    } else {
        ap_sig_hs_done = ap_const_logic_0;
    }
}

void convolve::thread_ap_sig_top_allready() {
    ap_sig_top_allready = convolve_Loop_BUFFER_RESET_proc_U0_ap_ready.read();
}

void convolve::thread_conv_output_V_din() {
    conv_output_V_din = convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_din.read();
}

void convolve::thread_conv_output_V_write() {
    conv_output_V_write = convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_write.read();
}

void convolve::thread_convolve_Block_proc_U0_ap_continue() {
    convolve_Block_proc_U0_ap_continue = ap_sig_hs_continue.read();
}

void convolve::thread_convolve_Block_proc_U0_ap_start() {
    convolve_Block_proc_U0_ap_start = ap_start.read();
}

void convolve::thread_convolve_Loop_BUFFER_RESET_proc_U0_ap_continue() {
    convolve_Loop_BUFFER_RESET_proc_U0_ap_continue = ap_sig_hs_continue.read();
}

void convolve::thread_convolve_Loop_BUFFER_RESET_proc_U0_ap_start() {
    convolve_Loop_BUFFER_RESET_proc_U0_ap_start = ap_start.read();
}

void convolve::thread_convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_full_n() {
    convolve_Loop_BUFFER_RESET_proc_U0_conv_output_V_full_n = conv_output_V_full_n.read();
}

void convolve::thread_convolve_Loop_BUFFER_RESET_proc_U0_image_V_dout() {
    convolve_Loop_BUFFER_RESET_proc_U0_image_V_dout = image_V_dout.read();
}

void convolve::thread_convolve_Loop_BUFFER_RESET_proc_U0_image_V_empty_n() {
    convolve_Loop_BUFFER_RESET_proc_U0_image_V_empty_n = image_V_empty_n.read();
}

void convolve::thread_convolve_Loop_BUFFER_RESET_proc_U0_weights_q0() {
    convolve_Loop_BUFFER_RESET_proc_U0_weights_q0 = weights_q0.read();
}

void convolve::thread_done() {
    done = convolve_Block_proc_U0_done.read();
}

void convolve::thread_done_ap_vld() {
    done_ap_vld = convolve_Block_proc_U0_done_ap_vld.read();
}

void convolve::thread_image_V_read() {
    image_V_read = convolve_Loop_BUFFER_RESET_proc_U0_image_V_read.read();
}

void convolve::thread_weights_address0() {
    weights_address0 = convolve_Loop_BUFFER_RESET_proc_U0_weights_address0.read();
}

void convolve::thread_weights_address1() {
    weights_address1 = ap_const_lv5_0;
}

void convolve::thread_weights_ce0() {
    weights_ce0 = convolve_Loop_BUFFER_RESET_proc_U0_weights_ce0.read();
}

void convolve::thread_weights_ce1() {
    weights_ce1 = ap_const_logic_0;
}

void convolve::thread_weights_d0() {
    weights_d0 = ap_const_lv32_0;
}

void convolve::thread_weights_d1() {
    weights_d1 = ap_const_lv32_0;
}

void convolve::thread_weights_we0() {
    weights_we0 = ap_const_logic_0;
}

void convolve::thread_weights_we1() {
    weights_we1 = ap_const_logic_0;
}

void convolve::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"image_V_dout\" :  \"" << image_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"image_V_empty_n\" :  \"" << image_V_empty_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"image_V_read\" :  \"" << image_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_address0\" :  \"" << weights_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_ce0\" :  \"" << weights_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_d0\" :  \"" << weights_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weights_q0\" :  \"" << weights_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_we0\" :  \"" << weights_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_address1\" :  \"" << weights_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_ce1\" :  \"" << weights_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_d1\" :  \"" << weights_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weights_q1\" :  \"" << weights_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_we1\" :  \"" << weights_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"conv_output_V_din\" :  \"" << conv_output_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"conv_output_V_full_n\" :  \"" << conv_output_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"conv_output_V_write\" :  \"" << conv_output_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"done\" :  \"" << done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"done_ap_vld\" :  \"" << done_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

