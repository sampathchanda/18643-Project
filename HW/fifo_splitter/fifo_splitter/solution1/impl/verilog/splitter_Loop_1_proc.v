// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module splitter_Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_V_dout,
        input_V_empty_n,
        input_V_read,
        output_0_V_din,
        output_0_V_full_n,
        output_0_V_write,
        output_1_V_din,
        output_1_V_full_n,
        output_1_V_write,
        output_2_V_din,
        output_2_V_full_n,
        output_2_V_write,
        output_3_V_din,
        output_3_V_full_n,
        output_3_V_write,
        output_4_V_din,
        output_4_V_full_n,
        output_4_V_write,
        output_5_V_din,
        output_5_V_full_n,
        output_5_V_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st4_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv10_310 = 10'b1100010000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] input_V_dout;
input   input_V_empty_n;
output   input_V_read;
output  [7:0] output_0_V_din;
input   output_0_V_full_n;
output   output_0_V_write;
output  [7:0] output_1_V_din;
input   output_1_V_full_n;
output   output_1_V_write;
output  [7:0] output_2_V_din;
input   output_2_V_full_n;
output   output_2_V_write;
output  [7:0] output_3_V_din;
input   output_3_V_full_n;
output   output_3_V_write;
output  [7:0] output_4_V_din;
input   output_4_V_full_n;
output   output_4_V_write;
output  [7:0] output_5_V_din;
input   output_5_V_full_n;
output   output_5_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_read;
reg output_0_V_write;
reg output_1_V_write;
reg output_2_V_write;
reg output_3_V_write;
reg output_4_V_write;
reg output_5_V_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
reg   [9:0] pixels_read_0_i_i_reg_100;
wire   [0:0] exitcond4_i_i_fu_111_p2;
reg   [0:0] exitcond4_i_i_reg_123;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_66;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_bdd_92;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [9:0] pixels_read_fu_117_p2;
reg    ap_sig_bdd_105;
reg    ap_sig_cseq_ST_st4_fsm_2;
reg    ap_sig_bdd_140;
reg   [2:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_2)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond4_i_i_fu_111_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_105)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond4_i_i_fu_111_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_105) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond4_i_i_fu_111_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond4_i_i_fu_111_p2 == ap_const_lv1_0))) begin
        pixels_read_0_i_i_reg_100 <= pixels_read_fu_117_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_105)) begin
        pixels_read_0_i_i_reg_100 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        exitcond4_i_i_reg_123 <= exitcond4_i_i_fu_111_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st4_fsm_2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_66)
begin
    if (ap_sig_bdd_66) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_2 assign process. ///
always @ (ap_sig_bdd_140)
begin
    if (ap_sig_bdd_140) begin
        ap_sig_cseq_ST_st4_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_2 = ap_const_logic_0;
    end
end

/// input_V_read assign process. ///
always @ (exitcond4_i_i_reg_123 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_92 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond4_i_i_reg_123 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        input_V_read = ap_const_logic_1;
    end else begin
        input_V_read = ap_const_logic_0;
    end
end

/// output_0_V_write assign process. ///
always @ (exitcond4_i_i_reg_123 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_92 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond4_i_i_reg_123 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        output_0_V_write = ap_const_logic_1;
    end else begin
        output_0_V_write = ap_const_logic_0;
    end
end

/// output_1_V_write assign process. ///
always @ (exitcond4_i_i_reg_123 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_92 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond4_i_i_reg_123 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        output_1_V_write = ap_const_logic_1;
    end else begin
        output_1_V_write = ap_const_logic_0;
    end
end

/// output_2_V_write assign process. ///
always @ (exitcond4_i_i_reg_123 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_92 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond4_i_i_reg_123 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        output_2_V_write = ap_const_logic_1;
    end else begin
        output_2_V_write = ap_const_logic_0;
    end
end

/// output_3_V_write assign process. ///
always @ (exitcond4_i_i_reg_123 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_92 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond4_i_i_reg_123 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        output_3_V_write = ap_const_logic_1;
    end else begin
        output_3_V_write = ap_const_logic_0;
    end
end

/// output_4_V_write assign process. ///
always @ (exitcond4_i_i_reg_123 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_92 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond4_i_i_reg_123 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        output_4_V_write = ap_const_logic_1;
    end else begin
        output_4_V_write = ap_const_logic_0;
    end
end

/// output_5_V_write assign process. ///
always @ (exitcond4_i_i_reg_123 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_92 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond4_i_i_reg_123 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        output_5_V_write = ap_const_logic_1;
    end else begin
        output_5_V_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond4_i_i_fu_111_p2 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_92 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_105)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_105) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond4_i_i_fu_111_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_92 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond4_i_i_fu_111_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st4_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_st4_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_105 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_105 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_140 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_140 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_66 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_66 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_92 assign process. ///
always @ (input_V_empty_n or output_0_V_full_n or output_1_V_full_n or output_2_V_full_n or output_3_V_full_n or output_4_V_full_n or output_5_V_full_n or exitcond4_i_i_reg_123)
begin
    ap_sig_bdd_92 = (((input_V_empty_n == ap_const_logic_0) & (exitcond4_i_i_reg_123 == ap_const_lv1_0)) | ((exitcond4_i_i_reg_123 == ap_const_lv1_0) & (output_0_V_full_n == ap_const_logic_0)) | ((exitcond4_i_i_reg_123 == ap_const_lv1_0) & (output_1_V_full_n == ap_const_logic_0)) | ((exitcond4_i_i_reg_123 == ap_const_lv1_0) & (output_2_V_full_n == ap_const_logic_0)) | ((exitcond4_i_i_reg_123 == ap_const_lv1_0) & (output_3_V_full_n == ap_const_logic_0)) | ((exitcond4_i_i_reg_123 == ap_const_lv1_0) & (output_4_V_full_n == ap_const_logic_0)) | ((exitcond4_i_i_reg_123 == ap_const_lv1_0) & (output_5_V_full_n == ap_const_logic_0)));
end
assign exitcond4_i_i_fu_111_p2 = (pixels_read_0_i_i_reg_100 == ap_const_lv10_310? 1'b1: 1'b0);
assign output_0_V_din = input_V_dout;
assign output_1_V_din = input_V_dout;
assign output_2_V_din = input_V_dout;
assign output_3_V_din = input_V_dout;
assign output_4_V_din = input_V_dout;
assign output_5_V_din = input_V_dout;
assign pixels_read_fu_117_p2 = (pixels_read_0_i_i_reg_100 + ap_const_lv10_1);


endmodule //splitter_Loop_1_proc

