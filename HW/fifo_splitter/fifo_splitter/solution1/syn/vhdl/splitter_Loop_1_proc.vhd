-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity splitter_Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    input_V_empty_n : IN STD_LOGIC;
    input_V_read : OUT STD_LOGIC;
    output_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_0_V_full_n : IN STD_LOGIC;
    output_0_V_write : OUT STD_LOGIC;
    output_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_1_V_full_n : IN STD_LOGIC;
    output_1_V_write : OUT STD_LOGIC;
    output_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_2_V_full_n : IN STD_LOGIC;
    output_2_V_write : OUT STD_LOGIC;
    output_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_3_V_full_n : IN STD_LOGIC;
    output_3_V_write : OUT STD_LOGIC;
    output_4_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_4_V_full_n : IN STD_LOGIC;
    output_4_V_write : OUT STD_LOGIC;
    output_5_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_5_V_full_n : IN STD_LOGIC;
    output_5_V_write : OUT STD_LOGIC );
end;


architecture behav of splitter_Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal pixels_read_0_i_i_reg_100 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_i_i_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_i_i_reg_123 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_66 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_92 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal pixels_read_fu_117_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_bdd_105 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_140 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_i_i_fu_111_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_105))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond4_i_i_fu_111_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_105)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_i_i_fu_111_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- pixels_read_0_i_i_reg_100 assign process. --
    pixels_read_0_i_i_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond4_i_i_fu_111_p2 = ap_const_lv1_0))) then 
                pixels_read_0_i_i_reg_100 <= pixels_read_fu_117_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_105))) then 
                pixels_read_0_i_i_reg_100 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                exitcond4_i_i_reg_123 <= exitcond4_i_i_fu_111_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond4_i_i_fu_111_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_92, ap_reg_ppiten_pp0_it1, ap_sig_bdd_105)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_105)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_i_i_fu_111_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond4_i_i_fu_111_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st4_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st4_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st4_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_105 assign process. --
    ap_sig_bdd_105_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_105 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_140 assign process. --
    ap_sig_bdd_140_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_140 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_66 assign process. --
    ap_sig_bdd_66_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_66 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_92 assign process. --
    ap_sig_bdd_92_assign_proc : process(input_V_empty_n, output_0_V_full_n, output_1_V_full_n, output_2_V_full_n, output_3_V_full_n, output_4_V_full_n, output_5_V_full_n, exitcond4_i_i_reg_123)
    begin
                ap_sig_bdd_92 <= (((input_V_empty_n = ap_const_logic_0) and (exitcond4_i_i_reg_123 = ap_const_lv1_0)) or ((exitcond4_i_i_reg_123 = ap_const_lv1_0) and (output_0_V_full_n = ap_const_logic_0)) or ((exitcond4_i_i_reg_123 = ap_const_lv1_0) and (output_1_V_full_n = ap_const_logic_0)) or ((exitcond4_i_i_reg_123 = ap_const_lv1_0) and (output_2_V_full_n = ap_const_logic_0)) or ((exitcond4_i_i_reg_123 = ap_const_lv1_0) and (output_3_V_full_n = ap_const_logic_0)) or ((exitcond4_i_i_reg_123 = ap_const_lv1_0) and (output_4_V_full_n = ap_const_logic_0)) or ((exitcond4_i_i_reg_123 = ap_const_lv1_0) and (output_5_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_66)
    begin
        if (ap_sig_bdd_66) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_2 assign process. --
    ap_sig_cseq_ST_st4_fsm_2_assign_proc : process(ap_sig_bdd_140)
    begin
        if (ap_sig_bdd_140) then 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_i_i_fu_111_p2 <= "1" when (pixels_read_0_i_i_reg_100 = ap_const_lv10_310) else "0";

    -- input_V_read assign process. --
    input_V_read_assign_proc : process(exitcond4_i_i_reg_123, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_92, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond4_i_i_reg_123 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            input_V_read <= ap_const_logic_1;
        else 
            input_V_read <= ap_const_logic_0;
        end if; 
    end process;

    output_0_V_din <= input_V_dout;

    -- output_0_V_write assign process. --
    output_0_V_write_assign_proc : process(exitcond4_i_i_reg_123, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_92, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond4_i_i_reg_123 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            output_0_V_write <= ap_const_logic_1;
        else 
            output_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    output_1_V_din <= input_V_dout;

    -- output_1_V_write assign process. --
    output_1_V_write_assign_proc : process(exitcond4_i_i_reg_123, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_92, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond4_i_i_reg_123 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            output_1_V_write <= ap_const_logic_1;
        else 
            output_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    output_2_V_din <= input_V_dout;

    -- output_2_V_write assign process. --
    output_2_V_write_assign_proc : process(exitcond4_i_i_reg_123, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_92, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond4_i_i_reg_123 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            output_2_V_write <= ap_const_logic_1;
        else 
            output_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    output_3_V_din <= input_V_dout;

    -- output_3_V_write assign process. --
    output_3_V_write_assign_proc : process(exitcond4_i_i_reg_123, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_92, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond4_i_i_reg_123 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            output_3_V_write <= ap_const_logic_1;
        else 
            output_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    output_4_V_din <= input_V_dout;

    -- output_4_V_write assign process. --
    output_4_V_write_assign_proc : process(exitcond4_i_i_reg_123, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_92, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond4_i_i_reg_123 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            output_4_V_write <= ap_const_logic_1;
        else 
            output_4_V_write <= ap_const_logic_0;
        end if; 
    end process;

    output_5_V_din <= input_V_dout;

    -- output_5_V_write assign process. --
    output_5_V_write_assign_proc : process(exitcond4_i_i_reg_123, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_92, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond4_i_i_reg_123 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            output_5_V_write <= ap_const_logic_1;
        else 
            output_5_V_write <= ap_const_logic_0;
        end if; 
    end process;

    pixels_read_fu_117_p2 <= std_logic_vector(unsigned(pixels_read_0_i_i_reg_100) + unsigned(ap_const_lv10_1));
end behav;
