// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _splitter_Loop_1_proc_HH_
#define _splitter_Loop_1_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct splitter_Loop_1_proc : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > input_V_dout;
    sc_in< sc_logic > input_V_empty_n;
    sc_out< sc_logic > input_V_read;
    sc_out< sc_lv<8> > output_0_V_din;
    sc_in< sc_logic > output_0_V_full_n;
    sc_out< sc_logic > output_0_V_write;
    sc_out< sc_lv<8> > output_1_V_din;
    sc_in< sc_logic > output_1_V_full_n;
    sc_out< sc_logic > output_1_V_write;
    sc_out< sc_lv<8> > output_2_V_din;
    sc_in< sc_logic > output_2_V_full_n;
    sc_out< sc_logic > output_2_V_write;
    sc_out< sc_lv<8> > output_3_V_din;
    sc_in< sc_logic > output_3_V_full_n;
    sc_out< sc_logic > output_3_V_write;
    sc_out< sc_lv<8> > output_4_V_din;
    sc_in< sc_logic > output_4_V_full_n;
    sc_out< sc_logic > output_4_V_write;
    sc_out< sc_lv<8> > output_5_V_din;
    sc_in< sc_logic > output_5_V_full_n;
    sc_out< sc_logic > output_5_V_write;


    // Module declarations
    splitter_Loop_1_proc(sc_module_name name);
    SC_HAS_PROCESS(splitter_Loop_1_proc);

    ~splitter_Loop_1_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_22;
    sc_signal< sc_lv<10> > pixels_read_0_i_i_reg_100;
    sc_signal< sc_lv<1> > exitcond4_i_i_fu_111_p2;
    sc_signal< sc_lv<1> > exitcond4_i_i_reg_123;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_bdd_66;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< bool > ap_sig_bdd_92;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<10> > pixels_read_fu_117_p2;
    sc_signal< bool > ap_sig_bdd_105;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_2;
    sc_signal< bool > ap_sig_bdd_140;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<3> ap_ST_st4_fsm_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<10> ap_const_lv10_310;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_105();
    void thread_ap_sig_bdd_140();
    void thread_ap_sig_bdd_22();
    void thread_ap_sig_bdd_66();
    void thread_ap_sig_bdd_92();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st4_fsm_2();
    void thread_exitcond4_i_i_fu_111_p2();
    void thread_input_V_read();
    void thread_output_0_V_din();
    void thread_output_0_V_write();
    void thread_output_1_V_din();
    void thread_output_1_V_write();
    void thread_output_2_V_din();
    void thread_output_2_V_write();
    void thread_output_3_V_din();
    void thread_output_3_V_write();
    void thread_output_4_V_din();
    void thread_output_4_V_write();
    void thread_output_5_V_din();
    void thread_output_5_V_write();
    void thread_pixels_read_fu_117_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
